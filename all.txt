AWS でモダン
アプリケーションを
構築する
管理の軽減。迅速な構築。さらなるイノベーション。

1

はじめに

モダンアプリケーションによって
顧客価値を提供する方法が変化している

今後数年間で新たに構築されるアプリケーションは 5 億を超え、過去 40
年間で開発されたアプリケーション数の合計よりも多くなります¹。多く
の組織では、技術の管理と新機能の提供とのバランスを取ることに苦労し
ながらアプリケーションを構築しています。
クラウドは俊敏性を約束するものの、俊敏性が自動的に実現するわけでは
ありません。イノベーションの加速、データの活用、新しいカスタマーエ
クスペリエンスの構築を目指す組織では、アプリケーションの構築とオペ
レーションの方法をモダナイズする必要があります。モダンアプリケー
ションは、モジュール式のアーキテクチャパターン、サーバーレスの運用
モデル、俊敏なデベロッパープロセスの組み合わせで構築します。

この日本語ガイドでは、お客様の組織でモダンアプリケーション開発の基
盤を築くために役立つ 3 つのパスをご案内します。また、AWS を使った
モダンアプリケーション開発が組織のイノベーション、コスト削減、市場
投入までの時間短縮、信頼性の向上にどのように役立つのかを説明します。

1

IDC PlanScape: Connected Cloud Architectures to Enable the Future of Digital Infrastructure、 2020 年 10 月

2

モダンアプリケーションがデジタルイノベーターに力を与える

イノベーションとは
顧客の意見を聞くこと

Forrester Research は最近発行したビジョンレポート「 Digital Rewrites the
Rules of Business」 の中で、デジタルイノベーターの顧客中心の思考方式を
定義付けました。以下の抜粋では、こうした最近のイノベーターの基本的な
使命を説明しています。

ヒアリング

「 …デジタルアセットとエコシステムを活用して、常により良い結
果を顧客に提供すると同時に、カスタマーエクスペリエンス、オペ
レーション、エコシステム、イノベーションにデジタル思考を採り
入れることで、運用性をさらに向上させます」。

顧客を重視することとは、顧客の視点に立って逆算しながらビジネス上の決
断を下すことです。また、満足度が高い成果を顧客に提供できるように製品
やサービスの向上に絶えず取り組むことを意味します。さらに、
顧客が本当に
大切にしていることに耳を傾け、顧客に代わって発明とイテレーションを行
い続けられるようにすることを意味します。これは「イノベーションのフラ
イホイール」と呼ばれます。

イノベーション
フライホイール
イテレーション

実験

そのベーシックな概念は、イノベーションの推進力は顧客の需要から始ま
り、顧客からのフィードバックで改善され、継続的に ( かつ収益が上がる形
で ) 繰り返され、需要が変化するとサイクル全体がもう一度開始されるとい
うものです。チームが独自のイノベーションフライホイールを早く回転でき
るほど、モダンアプリケーションの構築が進み、競合他社よりも優位な立ち
位置を確保できます。

3

モダンアプリケーションがデジタルイノベーターに力を与える

AWS でモダンアプリケーションを構築すれば市場投入を迅速に行えま
す。構築およびリリースのサイクルを高速化し、運用上の間接諸経費
を軽減することにより、デベロッパーは新しい機能を迅速に構築でき
ます。モジュール式のアーキテクチャによって、アプリケーション全
体をリスクにさらすことなく、チームが個々のアプリケーションコン

ポーネントを実験することができ、イノベーションが加速します。開発
ライフサイクルの各段階のテスト手順とモニタリングを自動化するこ
とで、信頼性を向上させることができます。従量課金制の料金体系
によって、過剰なプロビジョニングやアイドル状態にあるリソース
への支払いコストを削減し、総保有コスト (TCO) を改善することができ
ます。

モダンアプリケーションを構築するには、既存のアプリケーション基
盤を再検討する必要があるかもしれません。アーキテクチャの変更は
組織にとっては劇的な変化ではありますが、一気に舵を切る必要はあ
りません。クラウドで新しいモダンアプリケーションを構築するために
飛躍的な変貌を遂げる組織も多いですが、その他の多くの組織ではハイ
ブリッドなアプローチによってチーム別、ワークロード別に一歩ずつ様
子を見ながら進めます。

50%

デジタルトランスフォーメーションを実現する
ために 2023 年までに割り当てられることが
予想される情報通信技術の割合

67%

競争力を維持するためには今よりスピードを
上げる必要があると考える経営幹部の割合

90%

2025 年までにクラウドネイティブになることが
予想される新たなアプリケーションの割合

4

デジタルイノベーター

Amazon.com のアプリケーションを構築し、何百万もの AWS のお客様に
サービスを提供してきた当社の実績から、アプリケーションをモダナイズ
するビジョンを現実のものにし、その工程でビジネス価値を生み出すために
実行すべき 3 つのパスを解明しました。

1

2
3

マネージドコンテナサービスへのリプラットフォーム。既にオンプレ
ミスでコンテナを実行中の組織やアプリケーションをコンテナに移行
することを検討している組織では、ワークロードを AWS のコンテナ
サービスにリプラットフォームすることでオペレーションを簡素化し、
オーケストレーションやインフラストラクチャのプロビジョニングな
どの間接管理コストを削減できます。
新しいアプリケーションをサーバーレスアーキテクチャで構築。新
しいアプリケーションや機能を構築する場合は、サーバーレス技術
と目的別データベースを使用して俊敏性を最大化し、最新の開発ツー
ルを使って開発を加速することをお勧めします。
モダン Dev+Ops モデルへの変換。企業文化の変化をもたらすような大
規模なモダンアプリケーションを構築するには、セキュリティとガバ
ナンスを高い水準で維持しつつ、DevOps サービスとツールを活用し
ます。

俊敏性の強化、コストの削減、ビジネスの成功に寄与する優れたアプリケー
ションの構築にどのように役立つかを示しながら、それぞれのパスについ
て詳細に説明します。モダンアプリケーションへの移行に際しては、ス
タート地点はそれぞれ違っても、ゴールはみな同じでなければなりませ
ん。安全性、信頼性、拡張性があり、お客様やパートナーがすぐ利用で
きるアプリケーションがゴールです。

5

モダンアプリケーションの実用状況

モダンアプリケーション開発への
3 つのパス

モダンアプリケーション開発により、クラウド内でのソフトウェ
アの設計、構築、管理を効率的に進めることができます。この実証
済みの方法により、開発チームの俊敏性、アプリケーションの信頼
性とセキュリティが軒並み向上するため、高機能製品をより短期間
で構築およびリリースすることが可能となります。組織のあらゆる
種類のアプリケーションの構築をお手伝いしてきた当社の経験か
ら、モダンアプリケーション開発の 3 つのソリューションの柱を
ご紹介し、お客様のモダナイゼーションをお手伝いします。

モダンアプリケーションへのパス

1
2
3

マネージドコンテナサービスへのリプラットフォーム

新しい、セキュアなアプリケーションをサーバー

レスアーキテクチャで構築

モダン Dev+Ops モデルへの変換

6

マネージドコンテナサービスへのリプラットフォーム

マネージドコンテ
ナサービスへの
リプラットフォーム

コンテナは、アプリケーションを実行し、デプロイ
するための軽量でポータブルな手段です。多くの場
合、モダナイゼーションの最初のステップは、既存
のアプリケーションをコンテナ化することです。ア
プリケーションをコンテナに移行することを検討し
ている場合は、AWS Fargate で Amazon Elastic
Kubernetes Service (Amazon EKS) や Amazon
Elastic Container Service (Amazon ECS) などの
AWSマネージドサービスへワークロードをリプラッ

トフォームするとよいでしょう。マネージドコン
テナサービスは、スケーラビリティ、信頼性、セ
キュリティ、可用性を向上させながら、運用上の負
担を軽減します。AWS のマネージドコンテナサー
ビスによって、コンテナの管理を気にする必要がな
くなる分、サーバーレスコンピューティングを用い
たモダンアプリケーション開発に必要なスキル
アップのためのトレーニングにリソースを集中でき
ます。

7

お客様事例

「 AWS Fargate Spot によってユニットコストが下がった
結果、 AWS への移行をさらに後押しすることになりま
した。この最適化によって、当社では毎月より多くの資
産価値を提供し続けています。効率性の向上によって
得られた価値を株主に還元することは、当社全体のミッ
ションの中核となるものです」
– Vanguard クラウドビジネスオフィス、シニアマネージャー、
Tim Treston 氏

2015 年に AWS に移行を開始して以来、Vanguard Group では大きな躍進
を遂げました。例えば、AWS のサービスを利用することで自社の IT 部門
でサーバーを管理する必要がなくなりました。デベロッパーには革新的な新
しいマイクロサービスを構築したり、現在のアプリケーションを強化した
りするための時間が増え、市場投入までのスピードが 3 か月から 24 時間
に短縮されました。

しかし、同社が得られたメリットは市場投入までのスピードだけではありま
せん。Vanguard では、AWS Fargate と並ぶフルマネージドのコンテナオー
ケストレーションサービスである Amazon Elastic Container Service (Amazon
ECS) の使用を選択しました。AWS Fargate はサーバーレスコンピューティン
グサービスの 1 つで、クラウド上で、安全でリサイズ可能なコンピュー
ティング性能を提供するウェブサービスである Amazon Elastic Compute
Cloud (Amazon EC2) で必要なプロビジョニングや管理が不要になります。さ
らに、AWS Fargate 用の新しいオプションを購入して活用することで、この
金融サービス会社ではユニットコストを 50% 削減しました。

詳しいストーリーを読む »

8

新規のアプリをサーバーレスで

アプリケーション開発のモダナイゼーションとは、デベロッパーがアプリ
ケーション構築の俊敏性を高めることができるようにするサービス、プラク
ティス、戦略を導入することです。また、モダンインフラストラクチャのス
ピードと信頼性によって、デベロッパーはプロトタイプから数百万人のユー
ザーまでオートスケーリングするセキュアなアプリケーションを提供でき
るようになるため、イノベーションを加速し、変化に迅速に対応できるよう
になります。

多くのモダンアプリケーションはサーバーレスファーストで構築されていま
す。これはお客様がアプリケーションスタック全体の俊敏性を高めるために、
サーバーレスの導入を優先する戦略です。サーバーレス技術によって、物理
サーバーの管理が必要なくなり、オートスケーリングの実現、高可用性が最初
から組み込まれている、従量課金制請求などのメリットが得られます。また
サーバーやランタイムの管理と運用に煩わされることなく、製品のイノベー
ションに集中して、市場投入までの時間を短縮することができます。
さらに、ウェブやモバイルのフロントエンドツールとサービスも、AWS に

構築することができます。このインフラストラクチャの信頼性によって、
企業は世界中で自動的にスケーリングでき、安全で可用性の高いアプリケー
ションの提供を実現することができます。

スケーラブルなモダンアプリケー
ションを構築するための主な検討事項

アーキテクチャのパターン : マイクロサービス

モノリシックアプリケーションは現時点では管理が簡単かもしれ
ませんが、企業規模が拡大すると、アプリケーションの責任権限の
割り振り方など、さまざまな課題が生じます。オーナーシップの
文化を強固にしてもよいのですが、最終製品に所有者意識を持つ
のを避けたくなるような依存がアプリケーションアーキテクチャ
自体にあると、規模を拡大しづらくなります。拡大と変更を迅速に
行うアプリケーションに対し、私たちがマイクロサービスアーキテ
クチャの構築を勧める理由はそこにあります。マイクロサービスと
は、オーナーシップの文化をアーキテクチャで表現したものです。
複雑なアプリケーションをコンポーネントに細分し、各部分を 1 つ
のチームが単独で所有、運営できるようにします。

モノリシックアプリケーションでは、多数のデベロッパーが共有のリ
リースパイプラインにすべての変更をプッシュするため、ライフサ
イクルのあちこちで衝突が生じます。開発中、現場のエンジニアは
他のデベロッパーのコードを壊さないように変更を調整する必要が
あります。新しい機能を活用するには、共有ライブラリを全員が同
時にアップグレードする必要がありますが、
その説得は簡単ではあり
ません。また、
機能の重要な修正プロセスをすぐに進める必要がある
場合でも、その修正を進行中の変更とマージする必要があります。

開発後に配信パイプラインを通じて変更をプッシュする場合、間接諸
経費の問題にも直面します。コードをわずか 1 行変更する場合で
も、エンジニアには煩雑な作業が待っています。例えば、変更を早
めに調整し、コードをマージして、リリース内の競合を解決し、ア
プリ全体を再構築し、一連のテストを実行し、デプロイし直すといっ
た具合です。
9

新規のアプリをサーバーレスで

マイクロサービスアーキテクチャを持つアプリ
ケーションは、各アプリケーションプロセスを
1 つのサービスとして実行する独立したコンポー
ネントで構成されます。各サービスはビジネス機
能向けに構築され、それぞれ 1 つの機能を実行
します。各サービスは独立して実行され、1 つの
開発チームによって管理されるため、アプリケー
ションの特定の機能に合わせてアップデート、デ
プロイ、スケールすることができます。例えば、
オンラインショップのカートはセール期間中によ
り多くのユーザーに利用される可能性がありま
す。マイクロサービスでは、軽量の API、イベン
ト、ストリームを使用して、詳細に定義されたイン
ターフェイス経由で相互にデータがやり取りされ
ます。アプリケーションのスケーラビリティと回
復力の向上およびコスト削減を両立するために、
AWS のお客様は、データの変更に反応してアク
ションがトリガーされるイベント駆動型アーキテ
クチャを利用する割合が急速に高まっています。

総合型 vs 専用型 :
2 種類のアプリケーション
モノリスアプリケーション

すべてを実行

単一アプリケーション

アプリ全体のデプロイが必要
単一データベース

テクノロジーレイヤーを中心に構成
各ランタイムインスタンスに存在

アプリケーション全体に 1 つのテクノロジー
スタック

マイクロサービス

1 つのことを実行

最小限の機能サービス

個別にデプロイ、連携して機能

それぞれ独自のデータストアを所有
ビジネス能力を中心に構成
状態を外部化

マイクロサービスごとにテクノロジーを選択可能

10

お客様事例

エネルギーとサービスを提供する英国の多国籍企業 Centrica では、アプリ
ケーションのアーキテクチャを設計する方法を変更することで、コストを削
減し、俊敏性を高めようと考えていました。同社はこれらの目標を達成する
ため、マイクロサービスアーキテクチャにリファクタリングし、サーバーレ
ス戦略を採用することにしました。

組織を変革するために、Centrica ではサーバーレス作業グループを設置し、
代表チームと協力してパイロットの構築をスタートしました。この成功を受
けて、他のチームも同じアプローチを採用したため、今ではサーバーレスは
組織全体に浸透しています。
Centrica ではサーバーレスを採用したことで、以前はできなかった顧客の問
題をリアルタイムで確認し、対応することができるようになりました。

動画を見る »

11

新規のアプリをサーバーレスで

サーバーレス運用モデル

AWS でのサーバーレスの定義

サーバーレスを徹底

アーキテクチャのパターンとソフトウェアの配信プロセスを変更すると、ビ
ジネスの主力機能以外の活動を排除できる運用モデルの採用を検討するよ
うになるでしょう。迅速なイノベーションを可能にする俊敏性を手に入れる
ためには、マイクロサービスアーキテクチャを構築し、アプリケーションの
モニタリング、プロビジョニング、コスト管理、デプロイ、セキュリティ、
ガバナンスなどを自動化して、ソフトウェアを運用およびデプロイする
ことをお勧めします。サーバーレスファースト戦略を採用し、
可能な限りサー
バーレステクノロジーを選ぶことで、AWS での運用のメリットを最大限に
高めることができます。
サーバーレスの運用モデルでは、サーバーをプロビジョニングまた管理す
ることなく、アプリケーションやサービスの構築と実行が可能になりま
す。そのため、サーバーの管理が不要になり、柔軟にスケールできます。
また従量課金制が採用され、高可用性が自動化されます。このモデルでは
基礎的な細部に煩わされることなく、お客様に価値を提供するアプリケー
ションの構築および管理に集中することができます。
まったく新しいアプリケーションを構築する、レガシーアプリケーションを
移行する、など、どのような目的であれ、コンピューティング、データ、イン
テグレーションのために基礎的なサーバーレス環境を構築すると、クラウドに
よってもたらされる俊敏性の恩恵を最大限に受けることができます。

AWS では、サーバー運用という画一的で面倒な作業を取り除くことを
「サーバーレス」と呼んでいます。サーバーレスが重要な理由は、アプリ
ケーションをサポートするためのインフラストラクチャの管理や規模の拡大
ではなく、アプリケーションの構築自体に集中できることにあります。
サーバーレスの運用モデルに関する原則を 4 つ紹介します。

1
2
3
4

サーバー管理不要 ― サーバーのプロビジョニングや維持が不要です。
インストール、維持、管理を要するソフトウェアやランタイムがあり
ません。
柔軟なスケーリング ― アプリケーションを自動的に、あるいは、
サーバー単位ではなく利用単位 ( スループット、メモリなど ) を切り替
えて容量を調整することで、スケールできます。
従量課金制 ― サーバー台数でなく、一貫したスループットや実行時
間といった利用分に対してのみ支払いが発生します。
自動化による高可用性 ― サーバーレスアプリケーションには高可用
性と耐障害性が組み込まれています。これらの機能は、アプリケー
ションを実行するサービスによってデフォルトで提供されるため、お
客様がアーキテクチャを設計する必要はありません。

サーバーレス運用モデルは急速なイノベーションが必要な高成長企業に最適です。サーバーレ
スにすることで、作業ペースが上がり、ビジネスを差別化する活動にのみ常に照準を合わせ、
イノベーションフライホイールを高速で回転できます。
12

新規のアプリをサーバーレスで

AWS Lambda と AWS のマネージドコンテナサービスの活用

コンテナおよびサーバーレスコンピューティングの台頭によって、クラ
ウドコンピューティングの選択肢はインスタンスだけではなくなりまし
た。モダンアプリケーションに最適なコンピューティングを選択するた
めに、最初にいくつか確認することがあります。インフラストラクチャ
を自己管理することで、ビジネスの成果は向上しますか�そのための専
門知識は持っていますか�その労力に見合った価値を生み出すと思いま
すか�

サーバー管理をオフロードすることを選択するお客様は増えており、そ
のために Amazon ECS お よ び Amazon EKS と い っ た コ ン テ ナ サ ー ビ
ス や、AWS Lambda のようなイベント駆動型サーバーレスコンピュー
ティングサービスを導入しています。
現実には、ほとんどのお客様は両方を組み合わせて使用しています。約
80% の AWS コンテナのお客様は AWS Lambda も導入しています ²。両
方のオプションを活用することで、AWS インフラストラクチャとの高度
な統合が可能なフルマネージドサービス、幅広いユースケースのサポー
ト、複雑性からの抽象化、幅広いパートナーエコシステムなど、数々の
メリットがあります。

2

Datadog State of Serverless、 2020 年

13

マネージドコンテナサービスへのリプラットフォーム

どのように決断しますか�

お客様が AWS Lambda を選択するのは、コードを記述することに主に注力
しているチームがあり、既存のインスタンスやコンテナプラットフォームに
制限がない場合です。AWS Lambda ではインフラストラクチャからの抽象
度を最大化しているため、お客様は最速でリリースできます。そのため、
AWS Lambda は新しいアプリケーションに最適です。

最小

AWS が管理
AWS Lambda

サーバーレス関数

データソースの統合

物理ハードウェア、ソフトウェア、ネッ
トワーク、設備

お客様がコンテナを選択するのは、多くの場合、既存のコンテナに投資をし
ている、オープンソースの Kubernetes を好んでいる、またはインフラスト

ラクチャの管理や設定について特定の要件がある場合です。コンテナはコー
ドをパッケージする最も一般的な方法であり、レガシーアプリケーションの
モダナイゼーションには最適な選択です。

お客様が管理

アプリケーションコード

お客様が管理する範囲

プロビジョニング

AWS Fargate

サーバーレスコンテナ

クラスターのスケーリング

物理ハードウェア、ホスト OS/ カーネル、
ネットワーク、設備

Amazon ECS/
Amazon EKS

サービスとしての
コンテナ管理

最大

コンテナのオーケストレーション、プロ
ビジョニング

Amazon EC2

サービスとしての
インフラストラクチャ

アプリケーションコード
データソースの統合

セキュリティの設定と更新、ネットワー
クの設定

コンテナのオーケストレーションコント
ロールプレーン

アプリケーションコード

物理ハードウェア、ネットワーク、設備

アプリケーションコード

物理ハードウェア、ネットワーク、設備

管理タスク

データソースの統合

セキュリティの設定と更新、ネットワー
クの設定、ファイアウォール

データソースの統合
スケーリング
管理タスク

作業クラスター
管理タスク

セキュリティの設定と更新、ネットワー
クの設定
サーバーのプロビジョニング、管理、
スケーリング、パッチ適用

14

お客様事例

「 AWS で運用している当社のテクノロジーにより、ますます
多くの高齢者が自宅で自立して幸せに暮らすことができる
ようになると考えています」
– ATF Services および AbiBird、CEO ( 最高経営責任者 )、Robin Mysell 氏

AbiBird は、オーストラリアとニュージーランドに 60 の支店を持つオース
トラリアの企業グループである ATF Services が完全所有する部門です。同社
では 350 人の正社員と契約社員が勤務しています。AbiBird では、
家庭向けの
赤外線センサーで構成されるサービスを提供しています。このセンサーを設
置すると、スマートフォンにインストールしたアプリから高齢者の動きを見
守ることができます。

AbiBird では、以前は Microsoft Azure で運用していましたが、サービスを
運用し続けるためにクラウドプロバイダーに対して非常に多くのサポート
チケットを作成していることに気付きました。同社では、より安定したス
ケーラビリティの高いクラウドを必要としていました。Abibird は AWS に
移行し、現在はニーズに基づいてコンピューティングサービスの組み合わ
せを使用しています。使いやすく、スケーラビリティが高く、マネージド
型であることから、バックエンドで AWS Lambda を使用しています。

AbiBird では AWS のコンテナサービスも使用しています。Amazon ECS で公
開 API をホストし、仮想マシン群を自社で管理することなく AWS Fargate を
使用してコンテナを実行しています。

2019 年に AWS でこのシステムを立ち上げてから、AbiBird ではサポートチ
ケットを 1 枚も作成する必要がありませんでした。最小限の間接費のサポー
トで効率的に運用できるようになったのです。

詳しいストーリーを読む »

15

お客様事例

米国を代表する飲食ブランドの 1 つである Taco
Bell は、米国内に 7,000 店を超えるレストランを
展開しています。新型コロナウイルス感染症
がまん延している間、Taco Bell ではお客様か
らのデリバリーの要望に応えるために、迅速に
シフトする必要がありました。エンジニアリン
グおよび分析部門バイスプレジデントの Vadim
Parizher 氏 に よ る と、Taco Bell で は、 ほ ぼ す
べ て の イ ン フ ラ ス ト ラ ク チ ャ を Amazon Web

Services (AWS) で 運 用 し て お り、AWS の サ ー
バーレスを活用することで、サーバー管理より
も、ビジネスロジックやデータトランスフォー
メーションの構築に集中して、メニューやレス
トランの情報をリアルタイムでデリバリーパー
トナーに提供することに力を入れています。
「当社のメニューは、非常に複雑で複数のデジ
タルチャネルで共有する必要があります。サー
バーレスはそのモデルに最適です」と、Parizher

氏は述べました。サーバーレスサービスを利用
することで Taco Bell は初期コストを削減する
ことができ、小規模でスタートして必要な分
だけを支払い、サービスの利用が増えれば自動
的にスケーリングすることができます。

動画を見る (英語) »

16

お客様事例

新型コロナウイルス感染症による打撃で、消費
者の習慣は一夜のうちに変わりました。CocaCola では迅速に対応し、革新的な Freestyle ド
リンクディスペンサーに、非接触で購入でき
る機能を加えました。Coca-Cola では、構築に
AWS Lambda を使用することを選択し、その結
果、チームはセキュリティ、レイテンシー、ス
ケーラビリティよりもアプリケーションに集

AWS Lambda には、それらがすべて組み込ま
れているからです。新しいアプリケーションを
わずか100 日で立ち上げ、現在では 52,000 台を
超えるマシンに非接触機能が備わっています。

詳しいストーリーを見る (英語) »

「ユーザーエクスペリエンスには低レイテン

シーが不可欠であり、それが AWS のサー
バーレスソリューションに当社がコミット
した理由です」

– Coca-Cola Freestyle 装置イノベーションセンター、
チーフアーキテクト、Michael Connor 氏

中できました。

17

モダン DEV+OPS モデルへの変換

モダン Dev+Ops は、文化的な理念、プラクティス、およびツールの組
み合わせであり、組織が迅速かつ安全にソフトウェアを開発して、それを
本番環境にリリースし、目標とする可用性とパフォーマンスが維持でき
るようにするものです。
AWS では一連の一般的で広く受け入れられている参考事例を特定し、こ

れを導入することで、パフォーマンスの高い DevOps 組織を構築するた
めのメカニズムを提供しています。このアプローチでは継続的改善とい
うシンプルなアイデアが、計画からコードの記述、デプロイおよびモニ
タリングまで、DevOps ライフサイクルのすべてに採用されています。
当社ではこのアプローチをモダン Dev+Ops と呼んでおり、コンプライ
アンス、可観測性、レジリエンス、インフラストラクチャなどのオペ
レーションタスクを開発プロセスの早い段階で共有し、さらに AI と
機械学習 (AI/ML) を使って強化することで、デベロッパーとオペレー
ション部門との距離を縮めることに焦点を当てています。

デ ベ ロ ッ パ ー の 俊 敏 性 : 抽 象 化、
自動化、標準化

マイクロサービスアーキテクチャを採用することで、俊敏性が上が
り、これまでよりも迅速に動くことができます。つまり、リリー
スするべきものの構築がはかどるようになります。これは良いこ
となのですが、構築とリリースのプロセスがチームのペースに追
いつかない場合、新しい機能を迅速に顧客に提供することができ
ません。従来の開発プロセスとリリースパイプラインの遅れの主
な原因は、手動プロセスとカスタムコードでした。カスタムコー
ドによりエラーの余地が生まれるとともに、長期のメンテナンス
が必要になるため、カスタムコードは長期にわたり負担となり
ます。コードの変更や構築リクエストからテスト、デプロイま
で、手動ステップはリリース速度にブレーキをかける最大の要
因です。これを解決するには、抽象化、自動化、標準化が必要で
す。開発プロセスをスピードアップするには、本番対応のアプリ
ケーションの開発および配信に必要なコードをできる限り抽象化

します。特に、ビジネスロジックコード以外の行を抽象化しま
す。抽象化を行うために、複雑なリソースのプロビジョニングと
設定を軽減するフレームワークとツールを採用するのが 1 つの方

法です。これにより、デベロッパーは迅速に作業できるだけでな
く、開発プロセス全体でセキュリティ、プライバシー、信頼性、
パフォーマンス、可観測性、拡張性のベストプラクティスを採用
できます。開発フレームワークを利用すれば、ビジネスの成長

を長期的にサポートするアーキテクチャを構築している確信を持
つことができます。

18
18

モダン DEV+OPS モデルへの変換

ベストプラクティスのテンプレートに沿ってソフトウェアの配信プロセスを
定義すると、クラウド環境におけるすべてのインフラストラクチャリソー
スのモデル作成とプロビジョニングを標準化できます。この「Infrastructure
as Code」テンプレートを使用すると、チームは幸先の良いスタートを切る
ことができます。このテンプレートでは手動プロセスでなくコードを通じて
アプリケーションのテクノロジースタック全体が提供されるためです。

オートメーションを通じて反復可能な動きを作成し、ソフトウェアの配信ラ
イフサイクルを加速できます。継続的インテグレーションと継続的デリバ
リー (CI/CD) を通じてリリースパイプラインを自動化すると、良質のコードを
迅速かつより頻繁にリリースするのに役立ちます。CI/CD を実践している
チームでは、より多くのコードをより迅速にリリースし、問題にすばやく対
応しています。実際、Puppet の State of DevOps レポートによると、CI/CD
プラクティスを採用するチームの障害率は採用していないチームの 5 分の
1 にとどまり、コミットからデプロイまでのスピードは 440 倍速く、デプ
ロイの頻度は 46 倍高くなっています。
³ 中でも注目すべきは、プロセスや
ツールを管理する代わりに新しい機能とコードの作成にかける時間が 44%
も長くなっていることです。
CI/CD パイプラインはモダンアプリケーションの新たな構築の場となってい
ます。Amazon では、リリース速度を加速するために CI/CD の利用をスター
トして大きな成果をあげています。年間デプロイ件数は数百万に達してお
り、毎年急速に拡大しています。AWS では、当社の経験をお客様に活用し
ていただけるように、当社で使用しているツールをベースに、コードの迅速
な提供に役立つ開発ツール一式を構築しました。

3

Puppet 2020 State of DevOps Report、 2020 年

補足情報

継続的インテグレーション ― (CI) とは、デベロッパーが定期的に
コードに対する変更をセントラルリポジトリにマージし、その後自
動的に構築してテストが実行されるソフトウェア開発手法です。継
続的インテグレーションは、ほとんどの場合ソフトウェアリリース
プロセスのビルドまたはインテグレーションの段階を指し、自動化
要素 (CI やビルドサービスなど ) および文化的要素 ( 例えば、頻繁に
統合について学ぶこと ) を必要とします。

継続的デリバリー ― (CD) は、コードの変更によって本番環境への
リリースを自動的に準備するソフトウェア開発のプラクティスで
す。継続的デリバリーでは、ビルド後にテスト環境または本番環
境にすべてのコード変更をデプロイすることで、継続的インテグ
レーションを拡張します。

Amazon がどのようにデプロイを自動化し、安全かつ手
動操作なしでデプロイしているのかについてはこちらを
ご覧ください »

19

お客様事例

カナダの Lululemon Athletica は AWS を利用することにより、数日どこ
ろか数分で開発環境を立ち上げ、その環境を自動化し、継続的インテ
グレーションとデプロイを実現しました。同社は、ヨガ関連アパレル
などの衣料を世界中にある 350 以上の拠点で販売しています。
Lululemon は開発環境とテスト環境、および近日中にリリースされるモ
バイルアプリケーション環境を AWS クラウドで運用しています。

Lululemon では、AWS CloudFormation テンプレートと AWS CodePipeline
を使用して、新しい本番稼働用アカウント構築の時間を、2 日から数分に
短縮しました。俊敏性が高まった今、Lululemon の開発チームは、実験を
試みながら最適なソリューションを入手できるようになり、リソースを
確保済みのソリューションで妥協する必要がなくなりました。

詳しいストーリーを読む »

「継続的インテグレーションとデプロイパイプラインは自動化さ
れ、管理が簡単で、誰にでもわかりやすくあるべきです。 AWS は
そのすべてを兼ね備えています。オンプレミス環境で今まで得ら
れなかったレベルのシンプルさと透明性を実現しています」。

HyperTrack は、アプリケーションでライブ位置情報を追跡するための
セルフサービスのクラウドプラットフォームです。HyperTrack では、
2015 年後半の設立時に、デベロッパーが新しい機能の構築に使える
時間を減らすことなく、自動的にスケールして、予想される成長に対
応できるプラットフォームを構築する必要がありました。

HyperTrack では、エンジニアリングが関与しなくても自動的にス
ケールアップおよびスケールダウンするために、モバイル開発フレー
ムワークとサーバーレスアーキテクチャに AWS Amplify を使用する
ことに決めました。

その結果、同社では、サーバーレスに切り替える前に使用していたアー
キテクチャと比べて、30% のコスト削減を実現できました。このコス
ト削減の大部分は、運用リソースをサーバー管理に投入しなくて済ん
だことが要因です。HyperTrack では、数百万のイベントを管理しなが
らも、毎週 40 時間の作業時間を節約しています。

詳しいストーリーを読む »

– Lululemon、プロダクトアーキテクチャディレクター、Sam Keen 氏

20

モダン DEV+OPS モデルへの変換

オーナーシップが根付く
文化を育む : 管理の低減、
モダン Dev+Ops でさらな
るイノベーション
イノベーションの根源にあるのは人材です。し
たがって、顧客により良い成果を提供するた
めに人材に権限を与えることがモダンアプリ
ケ ー シ ョ ン 開 発 の 出 発 点 に な り ま す。AWS
では、権限を与えることがチームのあり方に与
える影響の大きさを説明するのに、
「プロジェ
クトでなく製品」という概念を使用していま
す。単純に言うと、製品を構築するチームが製
品の動作と保守に責任を負うということです。

責任の所在を明確にすることで、一部でなく製
品全体の開発に対してチームが責任感を抱くよ
うになります。

AWS はスケーラビリティに優れたウェブアプ
リケーションである Amazon. com の構築およ

び運用に 10 年以上携わってきました。その経
験から、チームに自己裁量権を与える重要性を
学んできました。アプリケーションには、顧
客の意見の採用、ロードマップの計画、アプリ
ケーションの開発、運用などのライフサイクル
があります。そのライフサイクル全体を通じて
チームに所有者としての権限を付与したとこ
ろ、チームは所有者として開発を行い、顧客の
ために新たな成果を届ける責任感を抱くように
なりました。自己裁量権を与えると、チームは

やる気を出し、創造力を掻き立てられます。ま
た、信頼のおける環境でリスクを恐れない文化
が育まれます。

オーナーシップの文化を受け入れることはテク
ノロジーと本質的には関係ありませんが、モ
ダンアプリケーション開発の最も困難な側面
の 1 つに挙げられます。チームに製品所有者
としての権限を与えるには、組織の考え方、
チームの構造、チームが担当する作業を変える
必要があります。
ほとんどの組織では、IT は 2 つのグループに
分類されます。それは戦略的で競争力のある武
器としての見方と、より一般的には、ビジネスの
成長をサポートするためのコストセンターとし
ての見方があります。

イノベーション文化を育む
1

2

3

まずは顧客の話を聞く ― どのイノベーションも顧客のニーズを探るところからスタートし、
顧客を満足させることを最終目標とします。顧客の需要に重点を置くことを常に優先します。
構築作業はプロを雇って任せる ― 顧客が求める製品と機能を構築、リリースするプロセスを
阻む障害をすべて取り除きます。イテレーションペースが速いほど、フライホイールの回転も速
くなります。

信念を持って構築者をサポート ― イノベーションに口先だけのサポートは不要です。リーダー
から営業、サポート担当者まで、企業の全領域でイノベーションを導入、実践しましょう。

21

終わりに

管理業務を減らして
イノベーションを加速
モダンアプリケーションによって、迅速
なイノベーションが可能になり、競合他
社との差別化を図れます。スピードと俊

敏性を売りにしたサービス、プラクティ
ス、戦略を導入することで、通常のビ
ジネスから顧客価値を高めて差別化する
アクティビティにリソースをシフトする
ことができます。多くの実験に取り組
み、より迅速にアイデアをリリースに発
展させることも可能です。また、構築の
プロが管理業務よりも構築作業により多

なぜ AWS でモダンアプリケーションを構築するのか ?
市場への
迅速な投入

構築およびリリースサイクルを高速化し、運
用上の間接諸経費を軽減することにより、
デベロッパーは新しい機能を迅速に構築でき
ます。テストとリリースのプロセスを自動
化することでエラー率を低減し、製品をよ
り早く市場に投入できるようになります。

実績を見る :
Urbanbase では AWS を使
用して 20 倍の速さでサー
ビスを立ち上げ (英語)

イノベー
ションを加速

モジュール式のアーキテクチャを使用する
ことで、個々のアプリケーションコンポー
ネントへの変更を迅速に行うことができ、ア
プリケーション全体へのリスクが低くなるた
め、チームはより頻繁に新しいアイデアを試
すことができます。

実績を見る :
iRobot で は AWS Lambda
および AWS IoT プラット
フォームを使用してロボッ
ト掃除機 Roomba を管理

信頼性の向上

開発ライフサイクルの各段階のテスト手順と
モニタリングを自動化することで、モダンア
プリケーションはデプロイ時からすでに信頼
性の高いものとなっています。またあらゆる
問題をリアルタイムで評価し、対応すること
ができます。

実績を見る :
Siemens で は、 お 客 様 管
理システムのアラートが
90% 減少し、インフラス
トラクチャコストが 85%
削減 (英語)

TCO の向上

従量課金制モデルにより、モダンアプリケー
ションの過剰なプロビジョニングやアイドル
状態にあるリソースへの支払いコストを削減
できます。また、インフラストラクチャ管理の
負荷を軽減することで、メンテナンスコストを
減らすこともできます。

実績を見る :
AWS Lambda を 使 用 し て
アプリケーションのメンテ
ナンスを最大 80% 削減

くの時間を費やす環境を育むこともで

きます。モダンアプリケーションは、
Amazon 自身を含む企業が迅速かつ俊敏
にイノベーションを実現するための手
法です。

22

終わりに

アプリケーションのモダナイゼーションプロセスをスタートする
マネージドコンテナサービスへの
リプラットフォーム

モダン Dev+Ops モデルへの変換

クラウドで実行されているコンテナ化された

サーバーレス技術とツールを使用した
新しいモダンアプリケーションの構築

モダンアプリケーションの構築のためにサー
バーレスファースト戦略を導入することで、
メンテナンス時間を最大 80％、開発時間を約
70％削減 **

高度に進化した DevOps プラクティスを使用
したチームの 60% が、セキュリティの脆弱
性を 1 日未満で完全に修復 #

リソース (英語)
Amazon ECS workshop、
Amazon EKS workshop、

リソース (英語)
Innovator Island ― サーバーレスウェブアプ

リソース
Amazon Builder� s Library、
AWS DevOps サービス

アプリケーションの 80% が AWS で実行され
ています*。クラウドにおける Kubernetes の全
ワークロードの 84% が AWS で実行されてい
ます*

リケーション開発のワークショップ。サー

AWS AppRunner workshop

バーレスウェブアプリケーションを構築する

推奨トレーニング ( クラスルーム ) (英語)

推奨トレーニング ( クラスルーム )
Advanced Developing on AWS

推奨トレーニング ( クラスルーム )
DevOps Engineering on AWS

推奨トレーニング ( オンライン )

推奨トレーニング ( オンライン ) (英語)

Running Containers on Amazon Elastic

動画チュートリアル。

Kubernetes Service (Amazon EKS)
推奨トレーニング ( オンライン )
Amazon Elastic Container Service (ECS) Primer

Architecting Serverless Solutions

AWS でのモダンアプリケーション構築についての詳細はこちら

g

モダナイゼーションを加速するため AWS パートナーとつながる

g

Getting Started with DevOps

モダンアプリケーション開発のベストプラクティスの導入について問い合わせる

g

* 出典 : Nucleus Research
© 2021, Amazon Web Services, Inc. or its aﬃliates. All rights reserved.

** 出典 : Deloitte

# 出典 : 2020 DORA state of DevOps Report

23

AWS のコンテナ
サービスで
モダナイゼーションを
促進

はじめに

現 在、 世 界 中 の 企 業 が デ ジ タ ル ト ラ ン ス フ ォ ー メ ー

ションに取り組んでいます。企業はアプリケーションのモ
ダナイゼーションを行うことで、より優れたサービスを顧

客に提供し、競争の激しい市場で生き残ることができます。
AWS は、企業のモダナイゼーション支援の 1 つとして、コン
テナの実装により開発を効率化すること、つまり企業文

化の改革のきっかけを作ってきました。この日本語ガイド
では、コンテナ化のベストプラクティスと、AWS でどのよ
うにコンテナを使用するのかを説明します。

競争の中で生き残る

ここ数年、世界中でデジタルトランスフォーメーションの動きが急激に加速
しています。中小企業から大手企業まであらゆる企業が、俊敏性を高め、顧
客の要求により優れた対応をするための新たな手段を探しています。変わ
り続ける環境の中で生き残ろうとする各社のニーズが、この動きを加速さ
せています。今はデジタルか破綻かの時代です。クラウドネイティブな企業
が業界を破壊し、レガシービジネスを追い抜いています。企業のデジタルト
ランスフォーメーションは多くの場合、アプリケーションのモダナイゼー
ションを行い、オートメーション環境をクラウドで活用することから始まり
ます。モダナイゼーションにより企業は次のことが可能になります。
伸縮性 : 顧客のニーズの急速な増加に対応できる

可用性 : いつでもどこでも顧客の要望に対応できる

俊敏性 : 問題を迅速に解決したり、顧客の求める新たな機能をすばやくデプ
ロイできる

2

コンテナ

コンテナは目標を達成する
ためのツール

デジタルトランスフォーメーションには時間が
かかりますが、最終的には生産性が向上し利益
がもたらされます。企業のモダナイゼーションの
ためのツールは数多く出回っていますが、その
中でもコンテナは、アプリケーションを効率
的にパッケージ化しデプロイするための有力な
ソリューションとして、デベロッパーの間で
継続的に人気が高まっています。Cloud Native
Computing Foundation (CNCF) による 2020 年の
調査によると、本番環境におけるコンテナの使
用は、2016 年から 300% 増加しています。こ
れは、2 つの異なるコンテナ技術である Docker
と Kubernetes が今日どれほど広く使用されてい
るかを見れば明らかです。クラウド上にホスト
された Kubernetes ワークロードのうち、82% が
AWS で実行されています 1。

開発はコンテナでシンプルになる

コンテナは、アプリケーションを簡単に実行し
どこからでもスケーリングできる、ポータブル
で安定した軽量のソフトウェア環境を提供しま
す。アプリケーションはそのライフサイクルに
おいて、テストや本番稼働といった初期ステー
ジや、オンプレミスの仮想マシンから、移行時の
クラウドまで、多様な環境で実行されます。コン
1

テナが開発される以前は、IT チームは新たな環
境の互換性を考慮し、アプリケーションが適切に
機能するようコードを書き足さなければなりま
せんでした。コンテナが開発され、アプリケー
ションを依存関係や設定ファイル、インターフェ
イスと一緒にパッケージ化できるようになり、
デベロッパーは、異なるホスト間をシームレスに
移動する 1 つのイメージを利用できるようにな
りました。これにより、インフラストラクチャ
管理の差別化につながらない重労働は開発チー
ムから取り除かれました。
コンテナがあれば、デベロッパーは新機能の追
加や最新のセキュリティの追加など、アプリケー
ションの構築に集中できます。さまざまな環境
間の互換性の管理に時間をとられることはあり
ません。
さらにコンテナは、アプリケーションのモノリ
シックな従来のアーキテクチャを打破する上で
不可欠です。コンテナによって、マイクロサー
ビスに移行し、より扱いやすいスケールを実現
することが可能になります。マイクロサービスを
使用すれば、それぞれのアプリケーションの構
成要素を独立したサービスとして実行できるた
め、デベロッパーは、さまざまな側面に個別に
対応することができます。

Nuclear Research による 2019 年のレポート

3

コンテナ

コンテナは開発プラクティスにおいて
持続可能なカルチャーシフトを促す

コンテナは、アプリケーションのモダナイゼーションを行うためのツール
であるだけでなく、開発プラクティスの向上にも大きく貢献します。コン
テナでは、デベロッパーに開発するアプリやコードの品質管理を積極的に
委ねることで、従来の開発サイクルを革新します。これまでデベロッパー

はアプリケーションの構築のみに集中し、パッケージ化やデプロイの成功
についてはほとんど監督することはありませんでした。コンテナにより、
デベ
ロッパーは「シフト」と呼ばれる現象を経験します。これにより、開発プロ
セスにおける品質管理の優先順位がかなり低い順位から前面へと押し出さ
れ、デベロッパーはこの責任を持つようになります。

デベロッパーが自身の成果物の品質に責任を持つようになったら、次に必要
なのは、初期に失敗し、その失敗から学ぶという文化を育てることです。コン
テナ化では、コードの統合とデプロイを自動化し、企業の俊敏性を総合的に
高めることによりこれを実現します。

老舗企業でもモダナイゼーションは可能

創業 100 年を迎えたある大手企業が、グローバル市場において自社アプリ
ケーションのモダナイゼーションに成功しました。この企業の開発チームは、
こうしたクラウドベースのアプローチを導入することで高い俊敏性を達成
し、はるかに迅速なイテレーションを可能にしました。コンテナと、AWS
によって自動化される環境を利用することで、新しいプラットフォームをわ
ずか 6 週間で概念からプロトタイプ、プロトタイプからデプロイへと進め
ることができました。

4

コンテナ

今すぐ AWS のコンテナでモダナイゼーションに取り掛
かる

AWS には、コンテナ化をシームレスに行うためのソリューションがすべてそろっています。インフラ
ストラクチャのプロビジョニング、オーケストレーション、セキュリティ、ネットワーク、オートメー
ション、モニタリングのための優れたツールをすぐに活用し、コンテナを使ったモダナイゼーションに
着手できます。

プロビジョニング

基盤となるインフラとリソースをシームレスにプ
ロビジョニングする

コンテナの実行には、基盤となるインフラスト
ラクチャのプロビジョニングが必要です。AWS
では、目標とする管理範囲やオートメーション
範囲に応じて、2 つのソリューションを用意し
ています。
• AWS Fargate に よ る 基 盤 イ ン フ ラ ス ト ラ ク
チャのプロビジョニングの自動化

オーケストレーション

Docker や Kubernetes のコンテナのスケーリン
グと管理を行う
• Amazon Elastic Container Registry (Amazon
ECR) を 利 用 し、Amazon Elastic Container
Service (Amazon ECS) をオーケストレータと
して使用した、Docker イメージの保存と管理
• Amazon Elastic Kubernetes Service (Amazon
EKS) の 導 入 に よ る Kubernetes コ ン テ ナ の
オーケストレーション

セキュリティ

コンテナの脆弱性を保護、スキャン、検出する
• AWS Identity and Access Management (IAM)、
タ グ 付 け、Amazon EC2 イ ン ス タ ン ス の セ
キュリティグループ、Amazon Virtual Private
Cloud (VPC) によるコンテナの保護

• イメージスキャンのソリューションによる、
Docker コンテナイメージの脆弱性の検出

• Amazon Elastic Compute Cloud (Amazon EC2)
インスタンスによるインフラストラクチャの
コンピューティング、ストレージ、ネットワー
ク機能の手動の定義

5

コンテナ

ネットワークと接続

コンテナ間のアプリケーショントラフィックを分
散する

• AWS Elastic Load Balancing を使用した、コン
テナおよびサーバーレス環境間でのアプリ
ケーショントラフィックの分散

• AWS Global Accelerator お よ び AWS Elastic
Load Balancing を 使 用 し た、 コ ン テ ナ で 実
行中のグローバルに分散されたアプリケー
ション用のトラフィックのルーティング
• AWS Global Accelerator お よ び AWS Elastic
Load Balancing を使用した、アプリケーション
パフォーマンスの改善

• AWS App Mesh を使用した、サービス間の通
信とセキュリティの管理

オートメーション

継続的インテグレーションと継続的デリバリー
(CI/CD) を使用し、コードを自動的にデプロイ
する

• AWS CodeCommit を使用したソースコードリ
ポジトリの作成
• AWS CodePipeline を使用した CI/CD パイプラ
インの設定
• AWS CodeBuild のデプロイによる、
独自のコン
テナイメージの構築

• AWS App Runner でのコンテナ化されたウェ
ブアプリケーションの構築、デプロイ、実行

観測とモニタリング

コンテナで実行されるサービスが、正常に機能し、
期待どおりの相互コミュニケーションを行うよ
うにする

• AWS App Mesh のデプロイによるログ記録、
メトリクス、追跡の可視化、およびロードバ
ランシングとトラフィック形成の実現
• Docker コンテナイメージのヘルスチェックに
よる、コンテナとアプリケーションの実行の
確認

• Amazon CloudWatch Application Insights を使用
した、Amazon EC2 上の Amazon ECS、Amazon
EKS、または Kubernetes でデプロイされたコン
テナで実行中のアプリケーションのヘルスお
よび正常性のモニタリング

6

プロビジョニング

プロビジョニング

AWS は、Amazon EC2 と AWS Fargate により、インフラストラクチャをプ
ロビジョニングするオプションを提供します。この 2 つのツールの主な違
いは、コンテナアプリケーションを実行する基盤インフラストラクチャに
対して可能な維持管理のボリュームにあります。

a AWS Fargate: サーバーやクラスターを管理することなくコンテナを

実行できます。アプリケーションをコンテナにパッケージ化して、
CPU とメモリの要件を指定し、ネットワークと IAM のポリシーを定
義したら、あとはアプリケーションを起動するだけです。

a Amazon EC2: 以前からある起動タイプで、インスタンスにコンテナを
実行させることができ、コンテナアプリケーションを実行するインフ
ラストラクチャを、サーバーレベルできめ細かく管理できます。

7

オーケストレーション 1

オーケストレーション

アプリケーションをコンテナ化したら、次はコンテナを本番環境で実行しま
す。アーキテクチャをスケールするには、オーケストレーションツールが必
要です。AWS は、オンプレミスでもクラウドでも、お客様のニーズに合っ
たオーケストレーションプラットフォームを提供します。

Amazon ECS および Amazon ECS Anywhere:

Amazon ECS Anywhere を 使 用 す れ ば、 使 い 慣 れ た 同 じ
Amazon ECS コンソールとオペレーターツールにより、オン
プレミスコンテナワークロードを管理し、コンテナベースの
アプリケーション全体で一貫したエクスペリエンスを実現で
きます。AWS Systems Manager ( 以前の SSM) との統合によ
り、オンプレミスハードウェアと AWS コントロールプレーン
間で自動的かつ安全に信頼を確立できます。

Amazon Elastic Container Service (Amazon ECS) は、コンテナ化したワーク
ロードの AWS でのデプロイを簡単にします。Amazon ECS の強力なシンプ
ルさにより、1 つの Docker コンテナから成長して、エンタープライズアプ
リケーションポートフォリオ全体の管理を実現できます。コントロールプ
レーンまたはノードを管理する複雑さがなく、アベイラビリティーゾーン、
クラウド上、オンプレミス全体でコンテナワークロードを実行およびスケー
ルできます。Amazon ECS は、マネージド型の、無限にスケーラブルなコン
トロールプレーンを備えています。このタイプのオーケストレーションツー
ルは、独自のオペレーティングシステムを使用する企業や、自社のインフラ
ストラクチャの管理機能を必要とする企業に最適です。AWS Copilot は、
コン
テナ化されたアプリケーションを AWS ですばやく起動し、簡単に管理する
ことができるコマンドラインインターフェイス (CLI) です。AWS Copilot は、
お客様の迅速なデプロイを支援するために組み込まれたサンプルやガイド付
きの操作を含む、シンプルな宣言コマンドのセットを提供します。本番環境
で使用できるサービスを導入するために必要なものは、AWS Copilot、AWS
アカウント、コードのみです。

8

オーケストレーション 2

Amazon EKS および Amazon EKS Anywhere:

Kubernetes は、大規模なコンテナの実行を容易にするために開発された、
急成長中のオープンソースのコンテナ管理プラットフォームです。Amazon
EKS は、複数の AWS のアベイラビリティーゾーンにまたがり Kubernetes の
管理インフラストラクチャを実行します。
AWS のお客様は、AWS で Kubernetes を実行することのメリットは驚くほど
大きいと感じています。Amazon EKS は、コンテナのスケジュール、アプリ
ケーションの可用性の管理、クラスターデータの保存、その他の主なタス
クを行う Kubernetes コントロールプレーンノードの可用性とスケーラビリ
ティを自動的に管理します。Kubernetes アプリケーションは、コンテナ用
サーバーレスコンピューティングを提供する Amazon EC2 と AWS Fargate の
どちらでも実行できます。

Amazon EKS Anywhere により、独自の仮想マシン (VM) とベアメタルサー
バーを含めて、オンプレミスで Kubernetes クラスター (Amazon EKS Distro
でのソフトウェアによる構築 ) を簡単に作成および運用できます。EKS
Anywhere は、Kubernetes クラスターを管理するための独自のツールを構築
およびサポートする複雑さをなくします。EKS Anywhere は、ログ記録、モ
ニタリング、ネットワーク、ストレージのデフォルト設定を備えた、ベア
メタル、vSphere、クラウド仮想マシンなどのインフラストラクチャ上での
クラスターの作成、管理、運用を簡単にするオートメーションツールを提
供します。その一方で、クラスターのインストールとライフサイクル管
理、可観測性、クラスターのバックアップ、ポリシー管理など、本番環境で
Kubernetes を実行するために必要となる、自律的なツールや追加のコンポー
ネントを提供します。Amazon EKS Distro は、
オンプレミスでのお客様独自の
インフラストラクチャで使用するために AWS 上の EKS で使用されるのと同
じ、オープンソースの Kubernetes ソフトウェアディストリビューションを
パッケージ化します。EKS Distro クラスターは、お客様独自のツールまたは
Amazon EKS Anywhere を使用して管理できます。

K
K

9

オーケストレーション 3

Amazon ECR:

Docker コンテナを使用するために必要な最初のものは、Docker イメージで
す。このイメージは、コンテナのインスタンスを作成するための設計図の
役割を果たします。Amazon ECR は、Docker コンテナイメージを簡単に保
存、管理、デプロイできるようにするためのフルマネージド Docker コンテ
ナレジストリです。Amazon ECR は Amazon ECS に統合されているため、開
発から本番までのワークフローを簡略化できます。Amazon ECR を使用する
ことにより、独自のコンテナリポジトリを運用したり、その基盤インフラス
トラクチャをスケーリングしたりする必要がなくなります。

10

セキュリティ

セキュリティ

品質管理と同様に、セキュリティの課題対応も開発サイクルの初期段階に
移行しています。より高い自主性により、デベロッパーはすばやくコー
ドを適用して新たなセキュリティの脅威に対処できます。ただし、セキュ
リティは組織全体での優先事項とする必要があります。セキュリティの取
り組みをできる限り透明化し、セキュリティのベストプラクティスとツー
ルを考慮したアーキテクチャを最初に定義することで、このような企業文
化のシフトを支援することができます。

AWS は、コンテナにアクセスできるユーザーを管理するための複数のツー
ルを提供しています。AWS IAM を使用して、
誰を認証 ( サインイン ) し、
誰に
リソースの使用を承認する ( アクセス許可を持たせる ) かを決定できます。
Amazon VPC を使用すれば、定義した仮想ネットワークでコンテナタスク
(Docker) やポッド (Kubernetes) を論理的に隔離できます。セキュリティグ
ループを定義すれば、EC2 インスタンス間で仮想ファイアウォールを作成
できます。
イメージスキャンのソリューションでは、コンテナイメージの脆弱性やイ
メージの依存関係を検出できます。セキュリティチームは、コンテナやイ
メージの依存関係をスキャンしてから事前承認済みのリソースを公開する
ことができるため、デベロッパーは安心してこれらのリソースを使用でき
ます。

11

ネットワークと接続

ネットワークと接続

アプリケーションを実行したら、トラフィックが常にコンテナ全体で分散
されるようにし、エンドユーザーが中断なくアプリを使用できるようにす
る必要があります。

aElastic Load Balancing は、AWS コンテナサービスとネイティブに統

合された高度なロードバランシングアルゴリズムを使用して、
ユーザー
が簡単にアプリケーションにアクセスできるよう支援します。

aAmazon Global Accelerator は、アプリケーションのパフォーマンス
が高く、アプリケーションが世界中のユーザーがアクセス可能で、ユー
ザーに最も近い AWS リージョンから提供されるよう支援します。

aAWS App Mesh は、コンテナサービス間の通信を管理し、きめ細かな
セキュリティと高い可視性を実現します。

12

オートメーション

オートメーション

これから 2024 年までは、ほとんどの形態の PaaS サービスの競合増加に連動して、ハイブリッド統合
機能の需要が高まるでしょう 2。Amazon EKS Anywhere と Amazon ECS Anywhere を導入すれば、シン
プルで使い慣れたツールを使用しながら、お客様のインフラストラクチャ上でワークロードを実行し
て、コンプライアンス、データグラビティ、その他のビジネス要件を満たすことができます。ローカ
ルコントロールプレーンをインストールして運用する代わりに、同じハイパースケールで、信頼され
たフルマネージドのコントロールプレーンを、オンプレミスコンテナワークロード用に使用できます。
お客様独自のハードウェア上のエッジロケーションでコンテナ化されたデータ処理ワークロードを実
行し、エンドカスタマーに近い場所から対応して、低いレイテンシーを維持できます。
オートメーション環境では、コードを手動でデプロイする必要がありません。インフラストラクチャに
無数のコンテナが含まれている場合、継続的インテグレーションと継続的デリバリー (CI/CD) を使用し
て自動化することで、人的ミスのリスクを最小限に抑えつつ、迅速にスケーリングや措置対応を行う
ことができます。AWS CodeCommit、AWS CodePipeline、そして AWS CodeBuild はソースコードリポ
ジトリの作成、CI/CD パイプラインの設定、コンテナイメージの構築を可能にします。

AWS App Runner は、デベロッパーが、コンテナ化されたウェブアプリケーションと API の大規模な
デプロイおよび実行をわずかなクリック操作で簡単に行えるようにする、フルマネージドアプリケー
ションサービスです。App Runner により、インフラストラクチャの設定と管理の必要がなくなります。
ソースコード、コンテナイメージ、またはデプロイパイプラインを提供するだけで、App Runner は
ウェブアプリケーションの構築とデプロイ、ネットワークトラフィックのロードバランシング、需要に
応じたキャパシティーの拡大と縮小、アプリケーションヘルスのモニタリング、デフォルトでのトラ
フィックの暗号化を行います。App Runner を使用し、コンテナの可搬性、効率性、コスト削減効果を
活用するために、過去のコンテナの経験は必要ありません。
2

Gartner Forecast による分析、 2021 年 2 月

13

観測とモニタリング

可観測性とモニタリング

コンテナを使ってマイクロサービスをデプロイしたら、コンテナのヘルスをモニタリングし、各サー
ビス間で確実に期待どおりのコミュニケーションが行われるようにする必要があります。

a AWS App Mesh は、さまざまなタイプのコンピューティングインフラストラクチャにまたがり構

築されたサービスに対し、一貫した可視性およびネットワークトラフィック管理を提供すること
で、サービスの実行を容易にします。また、監視データの収集方法やサービス間のトラフィックの
ルーティング方法を変更する際にアプリケーションコードを更新する必要はありません。App
Mesh は、各サービスが監視データをエクスポートするように設定し、アプリケーション全体に
一貫したコミュニケーション制御ロジックを実装します。これにより、エラーの起きた場所をす

ばやく正確に特定し、障害がある場合やコード変更のデプロイが必要な場合には、ネットワーク
トラフィックを自動で再ルーティングすることを簡単にできるようにします。App Mesh はオー
プンソースの Envoy Proxy を使用しているため、AWS パートナーやオープンソースのツールに幅
広く対応しています。

a Docker コンテナイメージを使用すると、コンテナやアプリケーションが正常かどうかを検証で

きます。簡単なヘルスチェックコマンドを実行するだけで、Docker ファイルがコンテナをチェッ
クし、正常に機能しているかを確認します。ウェブサーバーが無限ループに陥り、サーバープロ
セスが実行されているのに新しい接続に対処できない場合は、これを検出することも可能です。

a Amazon CloudWatch Application Insights は コ ン テ ナ の モ ニ タ リ ン グ を サ ポ ー ト し ま す。

Amazon ECS、Amazon EKS、AWS で実行中の Kubernetes on EC2 コンテナにデプロイされた
アプリケーションのモニタリング、アラーム、ダッシュボードを簡単にセットアップできます。
AWS 上のコンテナで実行中のアプリケーションのメトリクス、テレメトリー、ヘルスと正常性の
モニタリングログを取得するためのモニタリング階層オプションが利用可能になりました。

14

終わりに

今すぐ、コンテナを活用してみま
せんか。
AWS と圧倒的な規模のパートナーエコシステムが、ニーズに応
じたツールで、モダナイゼーションのどの段階にあるお客様を
もサポートします。

AWS 日本担当チームまたは AWS パートナーに、いつでもお気
軽にご相談ください »

コンテナの詳細については、
aws.amazon.com/containers
をご参照ください。

© 2021, Amazon Web Services, Inc. or its aﬃliates. All rights reserved.

15

OCTOBER 27, 2021

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon Elastic Kubernetes Service
(Amazon EKS) で 信頼できる
アプリケーションデリバリーを実現する
林 政利

アマゾン ウェブ サービス ジャパン株式会社
ソリューションアーキテクト
画面に映る資料の撮影などによる本セッション資料の転用を禁止しております
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションのデリバリー

アジリティを高めるために、コンテナや KUBERNETES だけではなく、CI/CD でデリバリーを最適化したい

モダンアプリケーションの現場、多くのお客様がアプリケーションをコンテナ化し、
Kubernetes の環境で運用している
しかし、コンテナ化や Kubernetes の導入だけでモダンアプリケーション開発に求められる
アジリティが実現できるわけではない
重要になるプラクティスの一つが CI/CD

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

CI/CD によるデリバリーのイメージ
信頼できる自動化されたデリバリープロセスにより、開発に集中できる状況を作る

デリバリープロセス
コードリポジトリ
メインライン

コードのチェックイン

開発者がコードを随時リポジトリの
メインラインにチェックイン
チェックインしたら信頼できる
自動化プロセスが本番環境へデリバリー
開発者はすぐに開発に戻り、
コードをチェックインしつづける

開発者
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

CI/CD によるデリバリーの特長
モダンアプリケーション開発のアジリティ向上に寄与する

デリバリープロセス
コードリポジトリ
メインライン

コードのチェックイン
開発者

自動化

人手が入るところが少なく、迅速で
安定したデリバリーが可能

信頼性

バグや障害がビジネスに影響しない
影響が広がる前にロールバック可能

フィードバック

チェックインの結果がすぐに検証可能
フィードバックの反映が迅速に可能
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

CI - 継続的インテグレーション

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

継続的インテグレーションとは

継続的にメインのコードラインにコードをマージ(インテグレーション)し続けるプラクティス

デリバリープロセス

コードリポジトリ
メインライン

コードのチェックイン

開発者
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

継続的インテグレーションではない開発の例
フィーチャーブランチ運用によるマージの低頻度化

機能開発用ライン
(フィーチャーブランチ)
コードリポジトリ
メインライン

フィーチャーブランチ

機能開発用に、メインとは別のライン
(フィーチャーブランチ) を長期で維持
新機能の開発が終わった段階でマージ
してデリバリー

開発者
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

継続的インテグレーションではない開発の課題
自動化が難しく、信頼性が低く、かつフィードバックが遅い

機能開発用ライン
(フィーチャーブランチ)

QA

QA

デリバリー

コードリポジトリ

マージやコンフリクト対応など
人の判断、手作業が多く自動化が困難

信頼性

コンフリクト

開発者

自動化

別ラインの QA 後、コンフリクト対応
など手作業を経てデリバリー

フィードバック

チェックインしたコードのデリバリー
や本番環境での動作確認が遅くなる
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

継続的インテグレーションの導入
デプロイとリリースの分離

機能開発用ライン
(フィーチャーブランチ)

QA

QA

デリバリー

コードリポジトリ
コンフリクト

デプロイ = リリース

デプロイとともに、開発中の
機能がリリースされてしまう

開発者
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

継続的インテグレーションの導入
デプロイとリリースの分離

デリバリー
コードリポジトリ

開発者

リリース

必要な環境・ユーザーにのみフラグを
有効にして機能をリリース

if (FEATURE_A) {
...
}

デプロイ

開発中の機能をフラグでガード
コードはメインラインに継続的に
インテグレーション

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

継続的インテグレーションの効果
デリバリー
コードリポジトリ

自動化

マージやコンフリクト対応など
手作業が少なく自動化が容易

信頼性

多くのコードラインに向けた複雑な
QA や検証環境が不要

開発者

if (FEATURE_A) {
...
}

フィードバック

本番環境で機能が検証しやすい
開発へのフィードバックが早い
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

CD - 継続的デリバリー

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

継続的デリバリーとは

継続的インテグレーションを拡張しデリバリーをパイプライン形式で自動化する

Source

Build

Test

Production

デリバリープロセス
本番環境へのデリバリーを自動化

コードリポジトリ
メインライン

コードのチェックイン

開発者

必要なプロセスをパイプラインで定義
パイプライン実行を自動化

自動的に品質が担保された
コードがデリバリーされつづける

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

継続的デリバリーの典型的なパイプライン
自動化する必要があるプロセス

Source
コードの
チェックイン

コードレビュー

Build
コンパイル

ユニットテスト
静的解析

Test
他システムとの結合
テスト
負荷テスト
UIテスト

コンテナイメージ
のビルド
セキュリティテスト

Production
本番環境デプロイ
本番環境監視

エラー検知でロール
バック

承認作業

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

継続的デリバリーに求められる信頼性
モダンアプリケーション開発に必要なアジリティ向上を CI/CD で達成したい

デリバリープロセス
コードリポジトリ
メインライン

コードのチェックイン
開発者

開発者はデリバリーを気にせず、
コードをチェックインしつづける

チェックインしたら信頼できる
パイプラインが本番環境へデリバリー

開発者がパイプラインを信頼するためには
複数の環境を利用した自動テスト

本番環境デプロイへのユーザー影響が少ない
ロールバックが可能

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon / AWS のデプロイメントパイプライン例
Alpha

Beta

Gamma

検証環境

コードリポジトリ
メインライン
コードのチェックイン

本番環境

メトリクスの監視と自動ロールバック

複数の検証環境
後半ほど結合度が高い「重い」自動テスト
メトリクス監視、アラートで自動ロールバック
本番環境へのデリバリー
複数環境に分割、Progressive にデリバリー
メトリクス監視、アラートで自動ロールバック

Amazon Builders' Library

https://aws.amazon.com/jp/builders-library/automating-safe-hands-off-deployments/

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon EKS における CD の例

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon EKS とは

マネージドの KUBERNETES 環境を提供する AWS サービス

Tenet 1

EKS は本番ワークロードを実行するための
プラットフォームであること
Tenet 2

EKS がネイティブかつアップストリームの
Kubernetes を提供すること
Tenet 3

Amazon Elastic Kubernetes Service
(Amazon EKS)

他の AWS サービスとシームレスな連携を
提供すること。そしてその利用は強制さ
れないこと
Tenet 4

積極的に Kubernetes プロジェクトと
コミュニティに貢献していくこと
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon EKS とは

マネージドの KUBERNETES 環境を提供する AWS サービス

Tenet 2

EKS がネイティブかつアップストリームの
Kubernetes を提供すること
Tenet 3

Amazon Elastic Kubernetes Service
(Amazon EKS)

他の AWS サービスとシームレスな連携を
提供すること。そしてその利用は強制さ
れないこと

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon EKS でのデプロイメントパイプライン
AWS サービスと OSS の活用

Kubernetes コミュニティの OSS や
方法論、AWS サービスを柔軟に活用して
パイプラインを構築できる

Amazon Elastic Kubernetes Service
(Amazon EKS)
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

デプロイメントパイプラインの例 / Build

AWS マネージドサービスを活用してコンテナイメージの単体テスト、ビルドを行いレジストリにPUSHする

Source

Build

Git リポジトリ

アプリケーション
コード

チェックイン

開発者

コードの取得

Test

Production

AWS Cloud
単体テスト
イメージのビルド

AWS
CodeBuild

イメージの Push

Amazon Elastic
Container Registry
(Amazon ECR)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

デプロイメントパイプラインの例 / Test
GITOPSを利用して検証環境へのデプロイを自動化する

Source

Build

Git リポジトリ

Kubernetes マニフェスト

Test

Production

AWS Cloud

Deployment, ConfigMap, ..

チェックイン

開発者

マニフェスト
取得

Amazon EKS
Flux

ArgoCD

GitOps ツール

apply
(デプロイ実行)

Kubernetes クラスター (検証用)

Kubernetes
API Server

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

GitOps の特長

アプリケーションとは別に、アプリケーションの状態を管理する GIT リポジトリを使用

Git リポジトリ

デプロイ設定
(マニフェスト)

Git リポジトリ

アプリケーション
コード

Single Source of Truth

アプリケーションのあるべき状態が明確
Kubernetes の宣言的 API と相性が良い
セキュリティ

apply
(デプロイ実行)
Flux

ArgoCD

GitOps ツール

Kubernetes
API Server

Kubernetes クラスタ

Kubernetes クラスターの管理権限を
外部に渡す必要が無い
開発者との相性

慣れたツールでアプリケーションの更新、
レビュー、承認が可能
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

デプロイメントパイプラインの例 / Test
PROGRESSIVE にデリバリーを行いながら、メトリクスを参照してロールバックをトリガー

Source

Build

Test

Production

AWS Cloud

Kubernetes クラスター (検証用)

Metrics
Amazon CloudWatch
Prometheus
Datadog
...

Amazon EKS

Service v1

Deployment v1

Service v2

Deployment v2

Ingress

Flagger
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

継続的デリバリーの典型的なパイプライン
自動化する必要があるプロセス

Source
コードの
チェックイン

コードレビュー

Build
コンパイル

ユニットテスト
静的解析

Test

Production

他システムとの結合 本番環境デプロイ
テスト
本番環境監視
負荷テスト
エラー検知でロール
バック
UIテスト

コンテナイメージ
のビルド
セキュリティテスト
承認作業

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

デプロイメントパイプラインの例 / Source
自動化を進めていくと、SOURCE ステージが自動化されない最後のステージになる

Source

Build

Test

Production

コードレビューテンプレートの例
•
•
•
•
•
•

ユニットテスト、結合テストが含まれているか
既存の監視システムで、この変更がカバーできるか
CPU やメモリ、AWS のリソースの利用量に影響しないか
アラームを発生させずに本番環境にデプロイできるか
依存する全ての変更は本番環境にデプロイ済みか
本番環境デプロイ後、ロールバックできるか
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まとめ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

信頼できるアプリケーションデリバリーを実現する
CI/CD のプラクティスで、信頼性の高いデリバリーを実現し、アプリケーション開発のアジリティを向上させる

デリバリープロセス
コードリポジトリ
メインライン

コードのチェックイン
開発者

自動化

人手が入るところが少なく、迅速で
安定したデリバリーが可能

信頼性

バグや障害がビジネスに影響しない
影響が広がる前にロールバック可能

フィードバック

チェックインの結果がすぐに検証可能
フィードバックの反映が迅速に可能
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ご清聴ありがとうございました

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Modern Applications Resource Hub にアクセス
豊富な日本語ガイドで皆様のモダナイゼーションの促進をサポート
•
•
•
•
•

AWS でモダンアプリケーションを構築する
モバイルアプリ、ウェブアプリを迅速に構築するには

AWS のコンテナサービスでモダナイゼーションを促進
サーバーレステクノロジーによる総所有コスト（TCO)
モダン Dev + Ops モデルの導入

その他にも ユースケースやアナリストレポートを豊富にラインアップ

https://bit.ly/3oVdKPV

Resource Hub はこちら »
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

OCTOBER 27, 2021

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Backends for Frontends こそ
サーバーレスで楽をしよう!!
~本来の目的に集中するために~
金森政雄

アマゾン ウェブ サービス ジャパン株式会社
ソリューションアーキテクト
画面に映る資料の撮影などによる本セッション資料の転用を禁止しております
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

自己紹介

• 金森 政雄
 所属/役職 :

DevAx (Developer Acceleration) チーム
ソリューションアーキテクト

 好きなサービス

Amazon Elastic Container
Service (Amazon ECS)

AWS Step Functions

AWS Fault Injection
Simulator

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

内容についての注意点
•

本資料では2021年9月時点でのサービス内容および価格に基づいたスライドや説明になっています。最新の

•

資料作成には十分注意しておりますが、資料内の価格とAWS公式ウェブサイト記載の価格に相違があった場

•

情報はAWS公式ウェブサイト(http://aws.amazon.com)にてご確認ください。
合、AWS公式ウェブサイトの価格を優先とさせていただきます。

AWS does not offer binding price quotes. AWS pricing is publicly available and is subject to change in
accordance with the AWS Customer Agreement available at http://aws.amazon.com/agreement/. Any
pricing information included in this document is provided only as an estimate of usage charges for AWS
services based on certain information that you have provided. Monthly charges will be based on your
actual use of AWS services, and may vary from the estimates provided.

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

本日のアジェンダ

1. Backends for Frontends (BFF) と その課題
2. サーバーレスの紹介

3. BFF をサーバーレスで構築する意義

4. サーバーレスで BFF を構築するパターン
5. まとめ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Backends for
Frontends (BFF) とは

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

従来のシステム

クライアント
(フロントエンド)

サーバー
(バックエンド)
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

マイクロサービス
サービスA

サービスB

クライアント
(フロントエンド)

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

課題① データ取得に複数回の API 呼び出しが必要
配達状況の表示

クライアント
(フロントエンド)

①注文情報の取得

注文
サービス

②注文に関連する
顧客情報の取得

顧客
サービス

③配達状況の取得

配達
サービス

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

課題② バックエンドとの密結合
サービスA =
https://aaa.com
サービスB =
https://bbb.com
サービスC =
https://ccc.com
……

「サービスD」
が追加されたら？

サービスA

リトライ?
代替メッセージ?

クライアント
(フロントエンド)
クライアント v2?

サービスB

サービスC

サービスC
v2

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

解決策: API ゲートウェイ パターン
サービスA

サービスB

クライアント
(フロントエンド)

API ゲートウェイ

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

解決策: API ゲートウェイ パターン
データ取得のためのAPI呼び出しがシンプルに

①注文情報の取得

配達状況の表示

API合成

クライアント
(フロントエンド)

API ゲートウェイ

②注文に関連する
顧客情報の取得
③配達状況の取得

注文
サービス
顧客
サービス

配達
サービス

内部のネットワークは一般にインターネットより安定し高速
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

解決策: API Gateway パターン
フロントエンドとバックエンドが疎結合に
API ゲートウェイ =
https://api.com

エラー
ハンドリング

画面描画など
本来の処理に集中

クライアント
(フロントエンド)

サービスA

サービスB

サービスC

API ゲートウェイ

サービスD

バックエンドの変更はフロントエンドに影響しない
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

実はクライアントも1つではない
ネイティブアプリ
(iOS,Android,etc)

サービスA

Web

サービスB

デスクトップ

サービスC

API ゲートウェイ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

全てに対応するAPI は難しい

デバイスごとに使いたいプロトコルから違うことも
ネイティブアプリ
(iOS,Android,etc)

GraphQL

アプリ用API

Web

REST

Web用API

デスクトップ

SOAP+独自

デスクトップ
用API

API ゲートウェイ

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

API ゲートウェイ は誰が作って運用する??
バックエンドチームの共有物になりがち
ネイティブアプリ
(iOS,Android,etc)

Web

デスクトップ

サービスA

アプリ用API

サービスB

Web用API
デスクトップ
用API

API ゲートウェイ

？

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

API Gateway は誰が作って運用する??
バックエンドチームの共有物になりがち
ネイティブアプリ
(iOS,Android,etc)

Web

デスクトップ

サービスA

アプリ用API

ゲートウェイが提供するAPI の
Web用API
サービスB
本来のニーズを知っているのは
フロントエンドチーム
デスクトップ
用API

API Gateway

？

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Backends for Frontends (BFF)
ネイティブアプリ
(iOS,Android,etc)

アプリ用BFF

サービスA

Web

Web用BFF

サービスB

デスクトップ

デスクトップ
用BFF

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

デバイスごとに最適化したAPI を提供
プロトコルや通信のデータ量を柔軟に
ネイティブアプリ
(iOS,Android,etc) GraphQL

Web

デスクトップ

アプリ用BFF

サービスA

REST

Web用BFF

サービスB

SOAP+独自

デスクトップ
用BFF

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

BFF は誰が作って運用する??
使う側が作って運用する
ネイティブアプリ
(iOS,Android,etc)

アプリ用BFF

サービスA

Web

Web用BFF

サービスB

デスクトップ

デスクトップ
用BFF

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

一般的にBFF が提供する機能

プロトコル変換

API 合成

エッジ機能

キャッシュ、流量制御 、
認証認可、メトリクス、ロギング etc…

クライアント最適化

SSR

(Server Side Rendering)
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

BFF 構築で注意すること

①ビジネスロジックを持たせない

• BFF はあくまでフロントの一部、画面描画などUX に関わる機能に集中する
• ドメインに関わる処理はバックエンドのチームとコミュニケーションし、

実装を依頼する

②多くの開発者に向けた公開API ではない

• BFF は限られた開発者/デバイスに向けて最適化するアプローチ

• 多くの開発者に向けた公開API は汎用的すぎて使い物にならないことが多い

③実装の重複を過度に恐れない

• BFF 間で多くの似た処理が実装される可能性はあるが受け入れることも選択肢
• 共通化は将来的な負債になる可能性( 一般的な機能はサービスを活用 )

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

BFF 構築における課題

スキルギャップと構築運用コストの増加

運用に関わるコスト

• オブザーバビリティ、モニタリング
• スケーラビリティ
• 可用性/信頼性
etc …

フロントエンド
動作環境:
モバイル、ブラウザ、デスクトップ
etc …
利用技術:
html, JavaScript, デバイス毎のプ
ラットフォーム etc …

BFF

スキルギャップ

動作環境:
サーバー

利用技術:
Web App用フレームワーク/ミドル
ウェア、データベース etc ...
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスとは

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

There is no server better
than no server
Werner Vogels
CTO Amazon Web Services Inc.

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレス

サーバについて何も考えることなく
アプリケーションをビルドして実行すること
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスとは

サーバ管理が不要

柔軟なスケーリング

アイドル時のリソース確保が不要

組み込まれた高可用性
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アプリの本質に集中する
コンピュートインフラストラクチャの
インストール、設定、管理
はゴール達成には不可欠

標準的で柔軟でオンデマンドで利用
できるコンピュート環境により、
ゴール達成がより近づく

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスのためのビルディングブロック
Compute

Storage

AWS Lambda
AWS Lambda＠Edge
API Proxy

Streaming

Amazon S3
Messaging and Queues

Amazon Kinesis
Database

Amazon API Gateway

Amazon SQS

Amazon DynamoDB

AWS AppSync

Amazon SNS

Amazon RDS

Authentication, WAF

Monitoring and Debugging

Amazon Cognito

Amazon CloudWatch

AWS WAF

AWS X-Ray

Amazon Aurora
Orchestration and State Management

AWS Step Functions

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サービスを組み合わせることで
素早くアプリケーション構築が可能

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

BFF をサーバーレスで
構築する意義

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

BFF 構築における課題

スキルギャップと構築運用コストの増加

運用に関わるコスト

• オブザーバビリティ、モニタリング
• スケーラビリティ
• 可用性/信頼性
etc …

フロントエンド
動作環境:
モバイル、ブラウザ、デスクトップ
etc …
利用技術:
html, JavaScript, デバイス毎のプ
ラットフォーム etc …

BFF

スキルギャップ

動作環境:
サーバー

利用技術:
Web App用フレームワーク/ミドル
ウェア、データベース etc ...
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

BFF 構築における課題

スキルギャップと構築運用コストの増加

運用に関わるコスト

• オブザーバビリティ、モニタリング
• スケーラビリティ
• 可用性/信頼性
etc …

フロントエンド
動作環境:
モバイル、ブラウザ、デスクトップ
etc …
利用技術:
html, JavaScript, デバイス毎のプ
ラットフォーム etc …

BFF

スキルギャップ

動作環境:
サーバー

利用技術:
Web App用フレームワーク/ミドル
ウェア、データベース etc ...
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

スキルギャップをサーバーレスで緩和する
exports.handler =
async function(event, context) {
// implement your logic
…………
…………
return result
}

Amazon API Gateway
Endpoint

ソースコードのみでアプリケーションが実行できる
(OS のセットアップやミドルウェアのインストール不要)

Lambda function

$amplify add api

AWS Amplify を使うと、AWS の知識は最小限で、
コマンドラインからREST やGraphQL のAPI を構築することも可能

AWS AppSync

•
•
•

キャッシュ
流量制御(スロットリング)
認証 etc…

Amazon API Gateway

一般的な機能はマネージドサービスを活用
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

BFF 構築における課題

スキルギャップと構築運用コストの増加

運用に関わるコスト

• オブザーバビリティ、モニタリング
• スケーラビリティ
• 可用性/信頼性
etc …

フロントエンド
動作環境:
モバイル、ブラウザ、デスクトップ
etc …
利用技術:
html, JavaScript, デバイス毎のプ
ラットフォーム etc …

BFF

スキルギャップ

動作環境:
サーバー

利用技術:
Web App用フレームワーク/ミドル
ウェア、データベース etc ...
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

運用も可能な限りAWS にオフロードする
exports.handler =
async function(event, context) {
// implement your logic
…………

スケーリングがプラットフォームに
組み込まれている

Amazon API Gateway

console.log(message)
…………
return result
}

メトリクス
- 呼び出し数
- メモリ量
- エラー率 etc…

AWS Lambda

Logs

Amazon CloudWatch

…
AWS X-Ray

モニタリングのための仕組みが
デフォルトで用意 or 簡単に設定可能

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

BFF をサーバーレスで構築すると
• スキルギャップをサーバーレスの仕組みで緩和できる

• マネージドサービスを活用することで、実装量自体を削減
• 運用もAWS のサービスにオフロード

→ BFF 構築/運用の労力を最小限にし、

フロントエンドの開発に集中しやすくなる

BFF を導入することで実現したかったこと

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスによる
BFF 構築パターン

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

パターン① Amazon API Gateway + AWS Lambda
AWS Serverless
Application Model
(SAM)

HTTP統合

Lambda 統合

クライアント
Amazon API Gateway

Lambda function

{…}
{…}

AWS Step Functions
Express workflow
(Synchronous )

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

パターン① Amazon API Gateway + AWS Lambda
AWS Serverless
Application Model
(SAM)

HTTP統合

Lambda 統合

クライアント
Amazon API Gateway

RESTのエンドポイントと、エッジ機能
（キャッシュ、流量制御、認証認可、
ロギング etc)を提供

Lambda function

{…}
{…}

AWS Step Functions
Express workflow
(Synchronous )

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

パターン① Amazon API Gateway + AWS Lambda
AWS Serverless
Application Model
(SAM)

プロトコル変換

HTTP統合

Lambda 統合

クライアント
Amazon API Gateway

RESTのエンドポイントと、エッジ機能
（キャッシュ、流量制御、認証認可、
ロギング etc)を提供

Lambda function

{…}
{…}

AWS Step Functions
Express workflow
(Synchronous )

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

パターン① Amazon API Gateway + AWS Lambda
AWS Serverless
Application Model
(SAM)

プロトコル変換

HTTP統合
プロトコル変換
(より柔軟に)

Lambda 統合

クライアント
Amazon API Gateway

RESTのエンドポイントと、エッジ機能
（キャッシュ、流量制御、認証認可、
ロギング etc)を提供

Lambda function

{…}
{…}

AWS Step Functions
Express workflow
(Synchronous )

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

パターン① Amazon API Gateway + AWS Lambda
AWS Serverless
Application Model
(SAM)

プロトコル変換

HTTP統合
プロトコル変換
(より柔軟に)

Lambda 統合

クライアント
Amazon API Gateway

RESTのエンドポイントと、エッジ機能
（キャッシュ、流量制御、認証認可、
ロギング etc)を提供
API 合成

Lambda function

{…}
{…}

AWS Step Functions
Express workflow
(Synchronous )

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

パターン① Amazon API Gateway + AWS Lambda
Serverless のアプリケーション
の開発、デプロイを簡単に

AWS Serverless
Application Model
(SAM)

プロトコル変換

HTTP統合
プロトコル変換
(より柔軟に)

Lambda 統合

クライアント
Amazon API Gateway

RESTのエンドポイントと、エッジ機能
（キャッシュ、流量制御、認証認可、
ロギング etc)を提供
API 合成

Lambda function

{…}
{…}

AWS Step Functions
Express workflow
(Synchronous )

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

パターン① Amazon API Gateway + AWS Lambda
Serverless のアプリケーション
の開発、デプロイを簡単に

AWS Serverless
Application Model
(SAM)

プロトコル変換

HTTP統合
プロトコル変換
(より柔軟に)

Lambda 統合

クライアント
Amazon API Gateway

RESTのエンドポイントと、エッジ機能
（キャッシュ、流量制御、認証認可、
ロギング etc)を提供
API 合成

Lambda function

{…}
{…}

AWS Step Functions
Express workflow
(Synchronous )

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

パターン②: AWS Amplify + AWS AppSync
HTTP リゾルバー
AWS Lambda リゾルバー

クライアント
AWS AppSync

AWS Amplify

Lambda function

Lambda function

{…}
{…}

AWS Step Functions
Express workflow
(Synchronous )

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

パターン②: AWS Amplify + AWS AppSync
GraphQLのエンドポイント
と、エッジ機能（認証認可、
ロギングなど)を提供

クライアント
AWS AppSync

AWS Amplify

Lambda function

HTTP リゾルバー
AWS Lambda リゾルバー
Lambda function

{…}
{…}

AWS Step Functions
Express workflow
(Synchronous )

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

パターン②: AWS Amplify + AWS AppSync
プロトコル変換

(例: GraphQL -> REST)

GraphQLのエンドポイント
と、エッジ機能（認証認可、
ロギングなど)を提供

クライアント
AWS AppSync

AWS Amplify

Lambda function

HTTP リゾルバー

AWS Lambda リゾルバー
Lambda function

{…}
{…}

AWS Step Functions
Express workflow
(Synchronous )

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

パターン②: AWS Amplify + AWS AppSync
プロトコル変換

(例: GraphQL -> REST)

GraphQLのエンドポイント
と、エッジ機能（認証認可、
ロギングなど)を提供

クライアント
AWS AppSync

AWS Amplify

Lambda function

HTTP リゾルバー

より柔軟な制御

AWS Lambda リゾルバー
Lambda function

{…}
{…}

AWS Step Functions
Express workflow
(Synchronous )

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

パターン②: AWS Amplify + AWS AppSync
プロトコル変換

(例: GraphQL -> REST)

GraphQLのエンドポイント
と、エッジ機能（認証認可、
ロギングなど)を提供

クライアント
AWS AppSync

AWS Amplify

Lambda function

API 合成

HTTP リゾルバー

より柔軟な制御

AWS Lambda リゾルバー
Lambda function

{…}
{…}

AWS Step Functions
Express workflow
(Synchronous )

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

パターン②: AWS Amplify + AWS AppSync
プロトコル変換

(例: GraphQL -> REST)

GraphQLのエンドポイント
と、エッジ機能（認証認可、
ロギングなど)を提供

クライアント
AWS AppSync

AWS Amplify

CLI によるバックエンド
の構築、SDK による
API 呼び出しの簡略化

Lambda function

API 合成

HTTP リゾルバー

より柔軟な制御

AWS Lambda リゾルバー
Lambda function

{…}
{…}

AWS Step Functions
Express workflow
(Synchronous )

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

パターン②: AWS Amplify + AWS AppSync
プロトコル変換

(例: GraphQL -> REST)

HTTP リゾルバー

GraphQLのエンドポイント
と、エッジ機能（認証認可、
ロギングなど)を提供

より柔軟な制御

AWS Lambda リゾルバー

クライアント

Lambda function

AWS AppSync

AWS Amplify

CLI によるバックエンド
の構築、SDK による
API 呼び出しの簡略化

Lambda function

API 合成

{…}
{…}

AWS Step Functions
Express workflow
(Synchronous )

サービスA

サービスB

サービスC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

番外編: S3 Object Lambda
Web
S3 Bucket

ネイティブアプリ向けのデータ操作
ex ) 画像のリサイズ、不要なデータ削除 etc

ネイティブアプリ
(iOS,Android,etc)
S3 Object Lambda
Access Points

Access points

Lambda function

ネイティブアプリ向けの
エンドポイントを提供
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まとめ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

BFF が本当に必要か考える
最初の問題の別の解決方法の例

サービスB
サービスA

クライアント
(フロントエンド)

サービスC

• BFF は構築し運用するものが増える = コストが高めの選択肢

• 自分たちのシステムにとってコストを超えるメリットはあるか?
ex)デバイス毎に API を変える必要性は本当にあるか?全て REST で解決できないか?

• バックエンドのサービスチームとのコミュニケーションは常に重要
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

BFF が本当に必要か考える
最初の問題の別の解決方法の例

サービスB

プロセスやツールよりも個人と対話を
サービスA

サービスC
クライアント
「アジャイルソフトウェア開発宣言」より
(フロントエンド)

https://agilemanifesto.org/iso/ja/manifesto.html

• BFF は構築し運用するものが増える = コストが高めの選択肢

• 自分たちのシステムにとってコストを超えるメリットはあるか?
ex)デバイス毎に API を変える必要性は本当にあるか?全て REST で解決できないか?

• バックエンドのサービスチームとのコミュニケーションは常に重要
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

BFF を導入する場合のネクストステップ
①実際に動かして学んでみる
•

AWS Hands-on for Beginners Serverless #2
AWS SAM を使ってテンプレートからサーバーレスな環境を構築する

https://pages.awscloud.com/event_JAPAN_Ondemand_Hands-on-for-Beginners-Serverless-2_LP.html

•

Amplify SNS Workshop
https://amplify-sns.workshop.aws/ja/

②オブザーバビリティの実現方法を知る
•

One Observability デモ ワークショップ

https://catalog.us-east-1.prod.workshops.aws/v2/workshops/31676d37-bbe9-4992-9cd1ceae13c5116c/ja-JP/

③自動化の方法を知る
•

AWS Hands-on for Beginners
AWS Code サービス群を活用して、CI/CD のための構成を構築しよう！

https://pages.awscloud.com/JAPAN-event-OE-Hands-on-for-Beginners-cicd-2020-reg-event-LP.html
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まとめ
Backends for Frontends (BFF ) はフロントエンドとマイクロサービスのバックエンド
との連携と、多様なクライアントへの対応の際に、最適な API 連携を実現するための
デザインパターン
BFF にサーバーレスを活用することで本来実現したかった、アプリケーション開発や
コアドメインの開発に集中できる
BFF で全てを解決するのではなく、パターンの目的と効果を理解し、適切に活用して
いきましょう！！

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ご清聴ありがとうございました

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Modern Applications Resource Hub にアクセス
豊富な日本語ガイドで皆様のモダナイゼーションの促進をサポート
•
•
•
•
•

AWS でモダンアプリケーションを構築する
モバイルアプリ、ウェブアプリを迅速に構築するには

AWS のコンテナサービスでモダナイゼーションを促進
サーバーレステクノロジーによる総所有コスト（TCO)
モダン Dev + Ops モデルの導入

その他にも ユースケースやアナリストレポートを豊富にラインアップ

https://bit.ly/3oVdKPV

Resource Hub はこちら »
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

OCTOBER 27, 2021

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS 上でのコンテナワークロードの運用
~Production 運用に向けて
浅野 佑貴

アマゾン ウェブ サービス ジャパン株式会社
シニアソリューションアーキテクト
画面に映る資料の撮影などによる本セッション資料の転用を禁止しております
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Who are you?
名前：浅野 佑貴（あさの ゆうき）
所属：アマゾンウェブサービスジャパン株式会社
シニアソリューションアーキテクト
ロール：製造業のお客様を中心に、技術的なご支援を担当
好きなAWSサービス：

AWS Cost &
Usage Report

AWS Fargate

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

これから Production 運用！でも何か不安。。。
何を使って
モニタリングしよう？

どういう項目を
モニタリングする？

セキュリティ。。。

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

想定聴講者
• AWS 上でコンテナワークロードを構築してみようと考えている
• コンテナワークロードに活用できる 主要な AWS サービスは知っているが、

Production 運用していく上で、活用できる AWS サービスが分からない

• これからProduction 運用に向けての検討を行おうとしている

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

本セッションの狙い
自身のコンテナワークロードの Production 運用に向けて、
• 典型的な考慮事項を理解する

• 活用可能な AWS サービスや情報リソースを把握する
• Production 運用開始に向けて自信を持つ!

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Agenda
• AWS のコンテナ関連サービス

• Production 運用に向けての考慮事項

• まとめ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

コンテナワークロードでの利用サービス例
Source

Build/Test

AWS CodeCommit

Deploy

AWS CodeDeploy

CI/CD
pipeline
AWS CodePipeline

AWS CodeBuild

Control plane

AmazonEC2
Registry
Data plane
AWS Secrets
Manager

Developer

Parameter Store

Secrets/Configs

Amazon Aurora

Amazon S3
Backing service
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

コンテナワークロードを支えるサービス群
Source

Build/Test

Deploy

AWS CodePipeline

AWS CodeDeploy

Production 運用に向けて
足りない要素は何でしょうか？

AWS CodeCommit

CI/CD
pipeline

AWS CodeBuild

デプロイ後にも必要なことは？

Control plane

AmazonEC2

Registry

Developer

AWS Secrets
Manager
Parameter Store

Secrets/Configs

Amazon Aurora

Data plane

Amazon S3
Backing service
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

本日の主要テーマ
• 可観測性 (Observability)
•
•
•

このワークロードはどの様な状態なのか？

設計したスループットを実現できているか？

Task or Pod は適切にリソースを利用しているか？

• コンテナワークロードのセキュリティ
•
•

利用する AWS サービスに依存しないこと

利用する AWS サービス/環境に合わせて対応すること

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Agenda
• AWS のコンテナ関連サービス

• Production 運用に向けての考慮事項
•
•

• まとめ

可観測性 (Observability)
コンテナワークロードのセキュリティ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Production 運用に向けて必要な要素
可観測性 (Observability)

Log

Metrics

Trace

アクセスログ
アプリケーションログ …

CPU 使用率/エラー率 …

複数システムに跨った
トランザクション情報

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

3つの観測ポイント
VM ベースのワークロード

コンテナベースのワークロード

アプリケーション層
(Service 単位 / Service 間)

アプリケーション層
(Service 単位 / Service 間)

コンテナ層
(Service / Task / Pod)

インフラストラクチャ層
(Instance)

インフラストラクチャ層
(Cluster / Instance)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Production 運用に向けて活用したいマネージドサービス

Log

Metrics

Trace

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

FireLens とは？
• コンテナ環境でのカスタムログルーティングを実現する
•

FireLens for ECS (EC2 & AWS Fargate)

•

FireLens for EKS (AWS Fargate)

• プラグインを同梱した Fluent Bit イメージを公開
•

AWS for Fluent Bit

• コンテナ環境のログを AWS サービスやAPN パートナー

のログサービスに送信することが可能

• アプリケーションからログルーティングの設定を分離す

ることができる

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

FireLens for ECS (EC2 & Fargate)
AWS Cloud

ECS Task
Task ロール
コンテナ1

コンテナ2

データプレーン

Fluentd/Fluent
Bit コンテナ

コンテナランタイム

Amazon CloudWatch Logs
ENI

Amazon Simple Storage
Service (Amazon S3)

Amazon Kinesis
Data Firehose

etc

外部サービス
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

FireLens for EKS (Fargate)
AWS Cloud

Fargate Pod
Amazon CloudWatch Logs
ENI
コンテナ1

コンテナ2

データプレーン

Amazon Simple Storage
Service (Amazon S3)
Pod 実行ロール

コンテナランタイム

Amazon Kinesis
Data Firehose
AWS for Fluent Bit

etc

外部サービス
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

• コンテナ化されたアプリケーション

のメトリクスとログを収集・可視化
するマネージドサービス

• 異なる粒度でのメトリクスを可視化
•

•
•

•
•

Service/ Task / Pod 単位

Service 内のTask 数
Task/Pod メモリ使用状況

ECS/EKS Cluster 単位

Cluster 内の CPU/メモリ使用状況
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS X-Ray とは？
• 分散アプリケーションの分析と調査のための分散トレーシングサービス

総処理時間

呼び出し順

何かエラーが
発生ている？
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

CloudWatch と AWS X-Ray を統合し、アプリケーションのエンドツーエン
ドのビューを提供

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

3つの 観測ポイントとの対応関係

コンテナベースのワークロード
アプリケーション層
(Service 単位 / Service 間)

コンテナ層
(Service / Task / Pod)

インフラストラクチャ層
(Cluster / Instance)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Agenda
• AWS のコンテナ関連サービス

• Production 運用に向けての考慮事項
•
•

• まとめ

可観測性 (Observability)
コンテナワークロードのセキュリティ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Production 運用に向けて必要な要素
~ セキュリティ
イメージの
開発/ビルド/展開

オーケストレーター
の保護

コンテナホスト
の保護

実行時の保護

Identity and Access Management
ネットワーク
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Production 運用に向けて必要な要素
~ セキュリティ

環境にあわせた対応が必要なもの

共通的なもの

イメージの
開発/ビルド/展開

オーケストレーター
の保護

コンテナホスト
の保護

実行時の保護

Identity and Access Management
ネットワーク
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Production 運用に向けて必要な要素
~ セキュリティ
共通的なもの

イメージの
開発/ビルド/展開

オーケストレーター
の保護

コンテナホスト
の保護

実行時の保護

Identity and Access Management
ネットワーク
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

イメージの開発/ビルド/展開
• セキュリティに関する Dockerfile ベストプラクティス
 信頼できるレジストリの信頼できるイメージを使う
 実行時にパッケージをインストールしない
 イメージを小さく保つ

 rootユーザで実行しない

 コンテナイメージに秘匿情報を埋め込まない

• 管理するビルド環境を小さくする

 ビルドマシンを攻撃された場合、ビルドプロセスに介入される脅威がある
 マネージドサービスである AWS CodeBuild が活用できる

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

イメージの開発/ビルド/展開
• Amazon ECRは scan-on-pushによる脆弱性キャンをサ

ポート

定期実行
Event
(time-based)

AWS Lambda
再スキャン

された脆弱性にも対応することができる

• 脆弱性スキャンは万能のツールではない
 既知ではない脆弱性は検出できない

push

AWS CodeBuild

• 定期的に再スキャンを実施することで、 push 後に検出

Amazon Elastic Container
Registry (Amazon ECR)

 OSパッケージのスキャンが中心

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Production 運用に向けて必要な要素
~ セキュリティ

環境にあわせた対応が必要なもの

イメージの
開発/ビルド/展開

オーケストレーター
の保護

コンテナホスト
の保護

実行時の保護

Identity and Access Management
ネットワーク
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

私の環境では何をしたらいいの？
基本的な対策には何があるの？

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まずはここから 〜 ECS の場合
Amazon Elastic Container Service Best Practices Guide

https://docs.aws.amazon.com/AmazonECS/latest/bestpracticesguide/security-shared.html
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まずはここから 〜 EKS の場合
Amazon EKS Best Practices Guide for Security

https://aws.github.io/aws-eks-best-practices/security/docs/
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まずはここから 〜 EKS の場合
• Amazon EKS Best Practices Guide for Security

https://aws.github.io/aws-eks-best-practices/security/docs/
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

セキュリティ関連の記載形式
Amazon EKS Best Practices
Guide for Security

Amazon Elastic Container Service
Best Practices Guide
項目に関する
解説・説明

推奨事項

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

本セッションの狙い(再掲)
自身のコンテナワークロードの Production 運用に向けて、
• 典型的な考慮事項を理解する

 可観測性
 コンテナワークロードのセキュリティ

• 活用可能な AWS サービスや情報リソースを把握する
 可観測性の向上に利用可能なマネージドサービス・ツール
 オーケストレーターに合わせたベストプラクティスガイド

• Production 運用開始に向けて自信を持つ!

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ご清聴ありがとうございました

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Modern Applications Resource Hub にアクセス
豊富な日本語ガイドで皆様のモダナイゼーションの促進をサポート
•
•
•
•
•

AWS でモダンアプリケーションを構築する
モバイルアプリ、ウェブアプリを迅速に構築するには

AWS のコンテナサービスでモダナイゼーションを促進
サーバーレステクノロジーによる総所有コスト（TCO)
モダン Dev + Ops モデルの導入

その他にも ユースケースやアナリストレポートを豊富にラインアップ

https://bit.ly/3oVdKPV

Resource Hub はこちら »
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Windows 環境の
モダナイゼーション
ガイド

はじめに

長年にわたって、各業界の企業はビジネスの成
功を促進するテクノロジーソリューションを導入
してきました。クラウドが利用できる時代になっ
てから創業した企業もありますが、大半の企業は、
Microsoft、SAP、Oracle が構築したテクノロジーな
ど、2000 年代初期に主流だったテクノロジーを使
用するオンプレミスデータセンター向けに設計され
たアプリケーションに投資しています。
初めからデジタルを利用するボーンデジタルのビジネスが急増するとと
もに、競争を勝ち抜くために絶えずイノベーションが求められる状況で、
企業は既存のテクノロジーポートフォリオを変革して今日の顧客が期待する
デジタル化を実現するという重大なタスクに直面しています。

AWS は、13 年以上にわたり、このような既存の Windows ベースのワーク
ロードを変革する企業の支援をしています。AWS は、Expedia、Pearson、
Xero、SeatGeek、DraftKings などのお客様が Windows ベースのアプリ
ケーション、データ、アイデンティティソリューションのモダナイズを成
功させるために一般的に使用している技術や技法に注目してきました。これ
らのお客様は、モダナイゼーションを通じて、コストの削減、スケーラビリ
ティの拡大、機能配信の高速化、開発と運用の俊敏性の向上などの利点を実
現しています。今や、これらの成果を達成するように組織を支援し、モノリ
シックなレガシーシステムを維持する作業からチームを解放するときです。
この日本語ガイドでは、Windows ベースのアプリケーションをモダナイズ
するためにお客様が使用している一般的なアプローチと、お客様のモダナ
イゼーションを支援するために AWS が用意しているツール、サービス、
サポートを紹介します。

2

用語

モダナイゼーションアプローチに
関する用語集

各モダナイゼーションアプローチについて詳しく紹介する前に、このガイド全体で使用
する一般的な用語を定義し、共通の理解を得られるようにします。リホスト、リプラッ
トフォーム、リファクタリング、リアーキテクトの定義は、ガートナーの「7 Options to

Modernize Legacy Systems」の定義に基づいています。

一般的な用語
モダナイゼーション
リホスト

定義

モダナイゼーションは、既存のアプリケーションやインフラストラクチャを徐々に変革して、より価値の高いクラウドネイティブ

のサービスに拡張することで、新しいビジネス能力を利用可能にし、イノベーションを加速させて、技術的負債を低減するプロセス
です。

コードや機能を変更することなく、アプリケーションコンポーネントを他のインフラストラクチャ ( 物理、仮想、またはクラウド )

に再デプロイします。

リプラットフォーム

新しいランタイムプラットフォームに移行し、コードに最小限の変更を行うだけで、コード構造、または機能は変更しません。

リファクタリング

外部の動作を変えることなく、既存のコードを再構築および最適化して、技術的負債をなくし、機能しない属性を改善します。

リアーキテクト
リツール

コードを実質的に変更して新しいアプリケーションアーキテクチャに移行し、新しい改善された機能を活用します。
新しいオートメーションやツールを導入して、ソフトウェアの配信、構築、テスト、デプロイの各プロセスを強化します。

3

.NET アプリケーション

.NET アプリケーションの
モダナイゼーション

.NET ( 当初は .NET Core と呼ばれていましたが現在
では単に .NET と呼ばれています ) のクロスプラッ
トフォームバージョンが導入されて以来、Windows
オペレーティングシステムを超えて .NET アプリ
ケーションを拡張する新しいチャンスが生まれてい
ます。

この .NET エコシステムの進化は、Windows のライセンスコストをなくし、
モダンアプリケーション用の軽量のモジュラープログラミングエコシステ
ムをもたらすため、ビジネスおよび経営者にとって歓迎すべき傾向です。

アプリケーションを .NET のクロスプラットフォームバージョンにリファク
タリングする実現可能性を評価しやすくするため、AWS は Porting Assistant
for .NET ツール (英語) を開発し、オープンソースとしてリリースしました。
何百というお客様やパートナーがこのツールをきっかけにモダナイゼーショ

ン評価を開始し、Windows から Linux への移行を目標として、.NET のクロ
スプラットフォームバージョンにリファクタリングする適切な候補となるア
プリケーションを特定しています。この評価は .NET Framework ベースのア
プリケーションのポートフォリオを持つ組織の一般的なスタート地点です
が、モダナイゼーションプロジェクトで同時に実装されることが多い他のア
プローチもあります。これらの各アプローチについて以下のセクションで詳
しく説明します。

4

.NET アプリケーション

リホスト
オンプレミスから Amazon Elastic Compute Cloud (Amazon EC2) Windows
に移行する

オンプレミスのデータセンターからクラウドに移行する際に、Emirates、
Macmillan Learning、Infor、MyTeam11 などの多くのお客様は、アプリケー
ションを一切変更せずにクラウドに「リフトアンドシフト」することを選択
しています。

これは、他のモダナイゼーションアプローチと比べて、最小限のコード変
更で最も迅速にクラウドに移行できるため、一般的なアプローチとなって
います。AWS は、Windows 仮想マシンを Amazon Elastic Compute Cloud
(Amazon EC2) で 提 供 し、 さ らに AWS で Windows ワークロードを実行
するための 柔軟なライセンスオプション を提供しています。また、AWS
には、クラウドに移行する際の Windows ワークロードが適切なサイズであ
ることを確認するための AWS Optimization and Licensing Assessments、
およびクラウドの導入を容易にするためのベストプラクティス、ツール、
専門知識、経済的インセンティブ、パートナーエコシステムを提供する
AWS Migration Acceleration Program があります。

Infor

Infor は、アマゾン ウェブ サービス
(AWS) を全面的に採用して、同社
の顧客向けのアプリケーションを
AWS クラウドに移行することを選
択しました。「当社のビジネスはア
ジアやヨーロッパなどで成長して
おり、これらの地域の顧客のため
に、より迅速にアプリケーション
を立ち上げられるようにしたいと
考えていました」と Infor のクラウ
ドオペレーション部門ディレク
ターの Randy Young 氏は述べてい
ます。

「そのためにはより迅速な対応が必
要でしたが、顧客やビジネスの状況
から、データセンターを構築しても
意味はありませんでした。当社は所
有しているハードウェアの管理、調
達、プロビジョニングから解放され
たいと考えていました」

5

.NET アプリケーション

リプラットフォーム
AWS Elastic Beanstalk でウェブベースのアプリケーションをマネージド
サービスに移行する

ウェブベースのアプリケーションをお持ちのお客様の場合、これらのアプリ
ケーションをマネージドサービスに移行することで TCO と管理上の負担を
軽減できます。お客様は、アプリケーションをマイクロサービスや .NET の
クロスプラットフォームバージョンに簡単にリファクタリングできない
場合、通常、このアプローチを負担の軽減策として選択します。AWS が
提供する AWS Elastic Beanstalk は、管理業務のデプロイ、パッチ、ス
ケーリングを処理する、使いやすいサービスです。アプリケーションを
AWS Elastic Beanstalk に移行するプロセスを自動化するために、AWS は、
Windows ウェブアプリケーション移行アシスタントをオープンソースの
インタラクティブな Microsoft.PowerShell.Utility としてリリースしています。
このサービスを使用すると、ASP.NET および ASP.NET Core ウェブアプリケー
ションを、オンプレミスの Windows サーバーや別のクラウドにある IIS から
AWS Elastic Beanstalk にシームレスに移行できます。
AWS コ ン テ ナ サ ー ビ ス で ア プ リ ケ ー シ ョ ン を Windows コ ン テ ナ に
パッケージ化する

コンテナは、アプリケーションをパッケージ化するテクノロジーのデファ
クトスタンダードになりつつあります。2016 年の Docker Windows コンテ
ナの導入と 2019 年の Kubernetes Windows ワーカーノードのサポート以来、
.NET アプリケーションの Windows コンテナへの移行が増えています。
Autodesk やSeatGeek などのお客様は、このアプローチを選択して、既存の
ワークロードのリソース使用率の最適化、複数の環境間での一貫性の確保、
アプリケーションの境界の制御、一般的なツールセットを使用した DevOps
プラクティスの導入の促進を行っています。このアプローチは、ソースコー
ドを使用できないためにリファクタリングの対象外となる商用市販アプリ
ケーションでも一般的に使用されます。

SeatGeek

SeatGeek は ラ イ ブ イ ベ ン ト の チ
ケ ッ ト プ ラ ッ ト フ ォ ー ム で あ り、
クライアントが世界中に配信する
コ ン サ ー ト、 ス ポ ー ツ イ ベ ン ト、
その他のライブイベントのチケッ
トの配信効率を向上させるため、テ
クノロジースタック全体で一貫した
総合的な変更を行う必要がありま
した。全体として、同社のチームは
コンテナ化とマルチテナンシーに
よって 2 桁台のコスト削減率を達成
しました。
「まだまだやれる部分が
あります。必要な箇所でいくつかの
追加のホストをスピンアップしてク
ライアントを再編成できます」と
Grasso 氏は述べています。

AWS は、Windows コンテナをセルフマネージするためのサポー
トを Amazon EC2 で提供し、フルマネージドのオーケストレー
シ ョ ン オ プ シ ョ ン を Amazon Elastic Container Service (Amazon
ECS) と Amazon Elastic Kubernetes Service (Amazon EKS) で 提
供しています。また、仮想マシンやベアメタルベースのアプリ
ケーションをコンテナに移行するプロセスを加速させるために、
AWS は AWS App2Container を構築しています。これにより、実
行中のアプリケーションを分析し、AWS コンテナサービス用のデ
プロイテンプレートを備えたコンテナイメージを自動的に生成で
きます。
6

.NET アプリケーション

リファクタリング
このセクションのはじめで述べたように、お客様は通常、各自の .NET
Framework アプリケーションと .NET の最新のクロスプラットフォームバー
ジョンとの互換性を評価することで、.NET モダナイゼーションアプリケー
ションの評価を開始します。通常、リファクタリングの主な対象とな
るのは、社内で開発され、ビジネスに不可欠な機能 ( 収益の創出、差別化の
実現 ) を果たしているアプリケーションです。対象のアプリケーション
を特定したら、分解と移植を組み合わせながら .NET や Linux のクロスプ
ラットフォームバージョンへの移行プロセスを進めます。これにより、モ
ノリシックなアプリケーションの各部分を解消して、各部分を反復的に
マイクロサービスや Linux に移行できます。これらの各概念について、以
下のセクションで詳しく説明します。
モノリシックなアプリケーションをマイクロサービスに分解する

マイクロサービスは、ソフトウェア開発に対するアーキテクチャおよび組
織的なアプローチであり、ソフトウェアは、複数の小さい独立したサービ
スで構成され、サービス間は明確に定義された API を介して相互に通信し
ます。これらのサービスを所有するのは、独立した小規模のチームです。
Gilt、Lyft、Pearson などのお客様は、チームがすばやく革新および実験す
る自由が得られる、開発およびリリースサイクルが俊敏化される、ドメイン
ごとに伸縮自在にスケールできるという理由で、このアプローチを採用し
ています。

Pearson

教育業界のリーダーである Pearson
は、 世 界 中 の 学 習 者、 教 育 機
関、雇用主、政府、パートナーに
コンテンツ、評価、デジタルサー
ビスを提 供 し て い ま す。 長 年 に
わ た り、 Pearson はオンプレミス
のテクノロジーを管理してきました
が、これはスケーラブルでも効率的
でもありませんでした。Pearson
のデジタルトランスフォーメーショ
ンの多くは、モノリシックなアプ
リケーションをマイクロサービス
に再設定できるようにすることでし
た。Pearson は、大規模なモノリ
シックアプリケーションを小さな複
数のコンポーネントに分解すること
で、プロセスをモダナイズし、同
社の機能面での柔軟性を改善してい
ます。

AWS は、チームがマイクロサービスベースのアーキテクチャを
導入する際に役立つさまざまなサービス、ツール、プログラ
ムを提供しています。これらには、Containers on AWS、AWS
で の サ ー バ ー レ ス 関 連 サ ー ビ ス、AWS Proton、AWS App
Mesh や Amazon API Gateway な ど の ネ ッ ト ワ ー ク テ ク ノ ロ
ジー、Amazon Kinesis などのストリーミングサービス、AWS
CloudTrail、Amazon CloudWatch、AWS X-Ray などのモニタリン
グサービスが含まれます。
7

.NET アプリケーション

リファクタリング
アプリケーションを .NET Framework から Linux の .NET Core/.NET 5+ に
移植する

.NET Framework アプリケーションを使用している DraftKings、SF Match、
AgriDigital、Fileforce などのお客様は、多くの場合、.NET の最新のクロ
スプラットフォームバージョンにリファクタリングすることで、Windows
の ラ イ セ ン ス コ ス ト を 排 除 し、.NET コ ミ ュ ニ テ ィ の 最 新 の イ ノ ベ ー
ションを利用しています。このアプローチは Microsoft が推奨しています。
Microsoft は、今後のすべての機能拡張はこの .NET のクロスプラットフォー
ムバージョンで行われ、.NET Framework は現在メンテナンスモードであ
ると説明しています。

DraftKings

「1 年より少し前になりますが、私たちはコ
ストの削減、スケーラビリティとアプリケー
ションの柔軟性の向上、デベロッパーの効率の
改善に向けた計画を策定しました。.NET
Coreへの変換という最初のステップととも
に、レガシー .NET アプリケーションをモダ
ナイズすることで、この計画を開始する機会
を特定しました」

AWS が Porting Assistant for .NET (英語) を作成したのは、リ
ファクタリングのためであり、.NET の最新バージョンへの変換を
簡素化するとともに、CoreWCF などのオープンソースライブラ
リに貢献することで、一般的に使用されている WCF との互換性
を .NET の最新バージョンで提供することが目的です。.NET のクロ
スプラットフォームバージョンに移行することで、AWS Graviton2
インスタンスなど、AWSの最新のイノベーションも利用できます。
AWS Graviton2 インスタンスは、インテル x86 インスタンスと比
べて、1 時間あたりのコストは 20% 低く、パフォーマンスは最大
40%優れています。AWS Graviton2 を使用すると、.NET を実行し
ているお客様は、すべての .NET 5 Linux サポートのディストリ
ビューション (Alpine Linux、Debian、Ubuntu) で ARM64 のパ
フォーマンス向上を実現できます。AWS Graviton2 で .NET 5
ウェブアプリケーションの実行を開始するには、セルフペースラ
ボ (英語) に従ってください。

8

.NET アプリケーション

リアーキテクト
AWS Lambda を使用してイベント駆動型およびサーバーレスのアーキテク
チャを導入する

サーバーレスコンピューティングでは、容量のプロビジョニングやパッチな
どのインフラストラクチャ管理タスクを AWS が処理するため、顧客に役立
つコードの記述だけに専念できます。The Coca-Cola Company や Thomson
Reuters などのお客様は、このアプローチを使用して、今後の積極的な開発、
改善、スケールの対象となる、ビジネスに最も不可欠なアプリケーションを
モダナイズしています。通常、このアプローチには、既に説明したモダナ
イゼーションアプローチのどれよりも多くの負担が伴います。開発チー
ムはサーバーレステクノロジーに慣れていないことが多く、既存のモノリ
シックなアプリケーションをサーバーレスに変換するには、コードとアーキ
テクチャの大々的な変更が必要になるためです。サーバーレスコンピュー
ティングを運用可能にするために、AWS は、サーバーをプロビジョニング
または管理せずにコードを実行可能にするサービスとして AWS Lambda を
提供しています。AWS Lambda では、実質的にあらゆるタイプのアプリ
ケーションやバックエンドサービスで管理上の負担なしにコードを実行
できます。AWS は、実行時間の長いアプリケーション用に AWS Fargate も
提供しています。AWS Fargate は、コンテナ用のサーバーレスコンピュー
ティングエンジンであり、
Amazon ECS と Amazon EKS の両方と連携します。
AWS Fargate は、適切な量のコンピューティングを割り当てることで、イン
スタンスを選択してクラスター容量をスケールする必要性をなくします。

9

.NET アプリケーション

リツール
オートメーション、DevOps、継続的インテグレーションと継続的デプロイ
(CI/CD) に投資する

モダナイゼーションで開発すべき最も重要な機能の 1 つは、開発および運用
ライフサイクルのオートメーションです。リリースパイプラインの構築、デ
プロイ、テスト、運用の各ステージを自動化すると、新しい機能の配信が高
速および高品質になるとともに、チームは新しい機能の構築に専念できるよ
うになります。AWS は、ソフトウェアのリリースワークフローを定義するた
めの AWS CodePipeline、新しい変更ごとにコードを構築してテストするた
めの AWS CodeBuild、変更をターゲット環境に継続的にデプロイするための
AWS CodeDeploy など、包括的なサービススイートを提供しています。これ
らのサービスは、前述した Amazon ECS、Amazon EKS、AWS Lambda と統
合されているため、モダナイズしながらアプリケーションのパイプラインを
自動化できます。さらに、AWS は、AWS CloudFormation や AWS Cloud
Development Kit (AWS CDK) for .NET などの Infrastructure as Code ツールを
提供しているため、モダンアプリケーションをサポートするリソースをプロ
グラムで定義してデプロイできます。これらの機能を組み合わせることによ
り、チームはインフラストラクチャやソフトウェアを配信する方法を標準化
できます。

AWS Development Tools for .NET を 使 用 し て 開 発 と オ ペ レ ー
ションの負担を軽減する

2020 年の AWS� s .NET 5 readiness で示されたように、AWS
は .NET デベロッパーに最上級のエクスペリエンスを提供しよ
うと努めています。AWS は、.NET のツールやライブラリに対
する適切なサポートを提供することが、デベロッパーの生産
性を高める鍵になると考えています。AWS は、デベロッパー
が AWS のサービスとのネイティブなやり取りをアプリケー

ションで行うための AWS SDK for .NET、デベロッパーが選択し
た IDE を離れることなく AWS で動作するアプリケーションを
記 述 で き る AWS Toolkit for Visual Studio 、デベロッパーが使
い慣れたコマンドラインインターフェイス (CLI) を使用できる
Windows PowerShell 用 AWS Tools を 提 供 し て い ま す。Azure
DevOps を希望するデベロッパーには、AWS はシームレスな統合
のために AWS Toolkit for Azure DevOps を提供しています。
AWS での .NET に関する最新情報を入手するには、Twitter の
@dotnetonAWS と YouTube プ レ イ リ ス ト の Microsoft on
AWS を ご 参 照 く だ さ い。AWS で の .NET 開 発 が 初 め て の 場
合は、「Getting Started with .NET on AWS」トレーニング (英
語) と、 Coursera、edX、Udemy で利用できる AWS での .NET
コース をお試しください。

10

WINDOWS ベースのアプリケーション

SQL Server データモダナイゼーション

デ ー タ モ ダ ナ イ ゼ ー シ ョ ン は、 お 客 様 が
Windows ベースのアプリケーションをモダナイ
ズする場合の中心となる要素です。既存の .NET
Framework アプリケーションをお持ちのお客様の
場合、最も一般的なデータベースは SQL Server
です。Expedia、ASP、Jobvite などのお客様は、
SQL Server のデプロイをモダナイズすることで、
ライセンスコストを削減して、トラフィック需
要のスケールやパフォーマンスの要件を満たし、
新しいマイクロサービスアーキテクチャを確保し
ています。
お客様が使用している最も一般的なアプローチの 1 つは、データベー
ス を Amazon Aurora に リ フ ァ ク タ リ ン グ す る こ と で す。 ア プ リ ケ ー
ションを SQL Server に結合すると、このアクションは複雑になります
が、Amazon Aurora は MySQL や PostgreSQL との互換性を商用データ
ベース並みのセキュリティ、可用性、信頼性で提供し、コストは 10 分の
1 に削減できます。

Expedia

Expedia Group (Expedia) では業界をリードするオンライン
旅行プラットフォームとして拡大するに従って、グローバ
ル決済のイノベーションも増大しています。同社のレガ
シーシステムの一部は、Amazon Aurora に移行しました。
Amazon Aurora は、クラウド用に構築された、MySQL お
よび PostgreSQL との互換性があるリレーショナルデータ
ベースであり、オープンソースデータベースのシンプル
さとコスト効率性、および商用データベースのパフォー
マンスを兼ね備えています。Expedia は Amazon Aurora と
AWS の他のサービス 20 件以上を利用して、コストを削減
するとともに、マニュアルプロセスを自動化することでス
タッフがコアビジネスに専念できるようにしました。また、
Expedia はほぼリアルタイムでデータをユーザーや内部
チームに提供できるようになり、その結果、支払い処理を
合理化し、サプライパートナーへの可視性とインサイトを
向上させることができました。

リファクタリングに伴う負担が多すぎる場合、通常、お客様はセルフマネー
ジドの SQL Server デプロイを Amazon RDS for SQL Server にリプラット
フォームすることで、ハードウェアのプロビジョニング、データベースの
セットアップ、パッチ、バックアップなどの時間がかかる管理タスクを
Amazon RDS にオフロードし、TCO を削減できます。

11

WINDOWS ベースのアプリケーション

リホスト
オンプレミスから Amazon EC2 Windows での SQL Server に移行する

.NET アプリケーションと同様に、お客様は SQL データベースをクラウドに
「リフトアンドシフト」することで、変更を最小限に留め、すばやくクラウ
ドに移行しています。IDC および Principled Technologies によると、SQL
Server のワークロードを AWS に移行することで、お客様は多大な利点を享
受できます。

96%

予定外の
ダウンタイムの削減

71%

デプロイの高速化

AWS は、Azure と比べて料金 /

パフォーマンスが 62% 割安
(1,000 NOPM の料金 )

28.62
USD

( 顧客あたりの平均 CPU コア )

36%
割安

1億
4,500 万
USD

9,000 万
USD

26%

デベロッパーの
生産性向上

AWS はオンプレミスと
比べてコストが 36% 割安

62%
割安

10.99
USD

AWS

Azure

出典 : Principled Technologies のベン
チマークレポート

AWS

オンプレミス

出典 : Migration evaluation blog

また、お客様は AWS Optimization and Licensing Assessments、
AWS Migration Acceleration Program、および AWS Database
Migration Service を使用して SQL Server のワークロードを AWS に
効率的に移行することもできます。

12

WINDOWS ベースのアプリケーション

リプラットフォーム
SQL Server を Amazon EC2 Windows から Amazon EC2 Linux に移行する

自社の Linux 管理リソースをお持ちのお客様の場合、SQL Server を Amazon
EC2 Linux にリプラットフォームするのが最適です。Amazon EC2 Linux 上
の SQL Server では、Windows 管理者が慣れ親しんだ環境を使用できる
とともに、Windows ライセンスコストを排除してコストを削減できます。
デベロッパーや DBA が Windows プラットフォームの SQL Server で使用
している大半のツールは、そのまま Linux でも使用できます。このアプ

ローチを採用することで、お客様は Ubuntu、Red Hat Enterprise Linux、
SUSE、Amazon Linux 2 など、さまざまな Linux ディストリビューション
から柔軟に選択できます。また、お客様は Microsoft SQL Server データベー
ス用のAWS Windows から Linux へのリプラットフォームアシスタントを使
用できます。このアシスタントは、PowerShell スクリプティングユーティ
リティであり、SQL Server 2017 Linux の一般的な非互換性をチェック
し、ソースの Windows Server マシンからターゲットの Amazon EC2 Linux イ
ンスタンスへのデータベースのバックアップと復元を開始します。このアプ
ローチをSQL Server のデプロイに対して検討する場合は、SQL Server Linux
ディストリビューションのサポートされない機能のリストをご確認くださ
い。

OutSystems

OutSystems は、顧客がアプリケー
シ ョ ン を 構 築、 統 合、 デ プ ロ イ、
管理できるプラットフォームを提
供する多角的ソフトウェア企業で
す。Amazon RDS for SQL Server な
ど の AWS の サ ー ビ ス を 使 用 す る
ことで、OutSystems は 25 か国の
顧 客 に サ ー ビ ス を 提 供 し な が ら、
6 か月間でクラウドベースの事業部
門を 2 倍に拡大することができま
した。OutSystems のグローバル製
品マーケティング部門の責任者で
あ る Jerry Zeephat 氏 は、
「当社は
Amazon RDS の大口ユーザーです。
Amazon RDS は、当社の事業とお客
様の事業にとって非常に重要です。
Amazon RDS は、セキュリティと可
用性に優れ、デプロイも非常に高速
です。当社のお客様はデータベース
のメンテナンスについて心配する必
要がなく、それぞれのニーズ、つま
り当社が提供するのはサービスだけ
を切り出せます」と述べています。

Amazon RDS SQL Server を使用してマネージドに移行する

Hearst Corporation、OutSystems、Unilever などのお客様は、多くの場
合、セルフマネージドの SQL Server デプロイをフルマネージドの Amazon
RDS for SQL Server にリプラットフォームすることで、プロビジョニン
グ、設定、パッチ、バックアップ、高可用性のデプロイなどの運用タスク
をオフロードしています。

このアプローチは、実装するコードの変更が最小限で済むため、
リファクタリングと比べて負担が少ないオプションです。Amazon
RDS SQL Server は、
「ライセンス込み」のライセンスモデルもサ
ポートしているため、Microsoft SQL Server のライセンスを別個に
購入する必要はありません。また、前払いや長期契約の義務もな
く、時間単位の料金を支払うことができます。リザーブド DB イン
スタンスを 1 年間または 3 年間の予約期間で購入するオプション
もあります。これにより、最大 65% の正味コストの削減を達成で
きます。
13

WINDOWS ベースのアプリケーション

リファクタリング
SQL Server を Amazon Aurora にリファクタリングする

SQL Server をモダナイズする最も一般的なアプローチの 1 つは、データの
アクセスコードおよび使用を Amazon Aurora MySQL または PostgreSQL に
リファクタリングすることです。このアプローチを選択することで、SQL
Server のライセンスコストを削減し、Amazon Aurora のスケール、パフォー
マンス、シンプルさを活用できます。AWS re:Invent 2020 において、AWS
は Babelﬁsh for Amazon Aurora PostgreSQL のプレビューリリースを発
表しました。これは、SQL Server 向けに記述されたアプリケーションのコ

マンドを Amazon Aurora で理解できるようにする新しい翻訳レイヤーです。
Babelﬁsh を使用すると、本来 SQL Server 向けに記述されていたお客様のア
プリケーションが、より少ないコードの変更で Aurora で使用できるように
なります。また、AWS は AWS Schema Conversion Tool も提供しています。
これは、SQL Server のスキーマ、関数、ステートメントを Amazon Aurora
の対応する項目に自動的に変換し、リファクタリングを加速させます。

14

WINDOWS ベースのアプリケーション

リアーキテクト
SQL Server をオープンソースの目的別 NoSQL データベースに
リアーキテクトする

マイクロサービスアーキテクチャの増大傾向に伴って、各サービスのユー
スケースに最適な個別のデータベースが使用されるようになっていま
す。このアプローチをお客様が選択するのは、モノリシックなアーキテ
クチャをマイクロサービスに細分化したり、従来のリレーショナルデータ
ベースでは対応できないクエリパターン、スケール、またはパフォーマン
スの要件に対応したりする場合です。AWS は、アプリケーションニーズを
満たすさまざまなフルマネージドの目的別データベースを提供していま
す。これには、トラフィック量の多い key-value ワークロード用の Amazon
DynamoDB、カタログ、ユーザープロファイル、コンテンツ管理ワークロー
ド用の Amazon DocumentDB (MongoDB 互換 )、時系列ワークロード用の
Amazon Timestream、リレーションシップ駆動型のグラフワークロード
用の Amazon Neptune が含まれます。

15

Active Directory

Active Directory の
アイデンティティ
モダナイゼーション
Active Directory (AD) は、1999 年に導入されて以
来、Windows ベースのワークロード用の主要なア
イデンティティソリューションとなっています。
多くのお客様は、組織のアイデンティティおよび
アクセスコントロールのニーズに合うようにオ
ンプレミスの AD デプロイを構築してチューニン
グすることに多大な時間とリソースを費やしてい
ます。

AD は、中央ディレクトリとしての役割、ユーザーとコンピュータの認証、
インフラストラクチャのリソースとアプリケーションのアクセス管理、
サーバーとワークステーションの設定管理など、複数のユースケースをカ
バーする複雑なサービスのセットです。ただし、お客様がワークロードを
クラウドに移行してリモートワークのスタイルを採用するに従って、古い
プロトコルやネットワーク概念に依存しているオンプレミスの AD デプロ
イは、オンプレミスおよびクラウド環境においてフェデレーションアクセ
スを行う際に障害となります。このため、お客様は既存の AD デプロイと
統合する新しいアイデンティティソリューションが必要となり、デプロイ
先を問わず、サービスとリソースを接続するための単一のシングルサイン
オン (SSO) インターフェイスを提供する必要があります。以下のセク
ションでは、お客様のビジネスがクラウドに移行し、場所を問わずに勤務
できる新しいスタイルが定着化した場合に、AD デプロイをモダナイズする
ための一般的なアプローチを紹介します。

16

Active Directory

AWS は、Windows ベースのワークロードを移行してモダナイズするお客様向けに、以下の一連のアイデンティティサービスを用意しています。

サービス
AWS Directory Service

AWS Single Sign-On
AWS Identity and Access Management (IAM)
AWS Resource Access Manager
AWS Organizations
Amazon Cognito

説明
既存の AD を統合したり、マネージド AD をクラウドにデプロイしたりするためのマネージド型の Microsoft
Active Directory サービスおよび Active Directory Connector です。

AWS アカウントおよびサービスへのクラウドベースのシングルサインオンサービスおよびシームレスアクセス
です。

AWS のサービスとリソースへのアクセスを安全に管理します。
AWS アカウント全体でリソースを安全に共有できるようにします。
AWS アカウント全体でガバナンスと管理を一元化します。
ウェブおよびモバイルアプリケーション用のクラウドネイティブのアイデンティティプロバイダーサービス
です。

17

Active Directory

拡張

既存のオンプレミス AD を AWS リソースに接続する

多くのお客様には既存のオンプレミスの AD デプロイがあり、それを AWS
でデプロイするリソースとして使用する必要があります。このようなお客
様がオンプレミスの AD デプロイを引き続き使用する場合のために、AWS は
AWS Active Directory Connector (AD Connector)、AWS Managed Microsoft
AD、およびクラウド内の AD を Amazon EC2 Windows でセルフマネージす
る機能を提供しています。AD Connector を使用すると、お客様は既存の
セルフマネージド AD ドメインと既存の認証情報を使用して、Amazon
WorkSpacesや Amazon WorkDocs などの AWS アプリケーションにログ
オンしたり、 AWS マネジメントコンソールで AWS リソースを管理した
り、Amazon EC2 インスタンスをドメインに参加させたりできます。ただ
し、複数のリージョンやアカウントにまたがる複雑なトポロジを持つお
客様の場合は、AWS Managed Microsoft AD を使用するほうが簡単な場合
が多く見受けられます。お客様は、AWS Managed Microsoft AD をリソース
フォレストとしてクラウド内にデプロイしてワークロードを実行できま
す。同時に、既存のオンプレミス AD デプロイをユーザーやワークス
テーションの管理に使用することで複雑な移行を回避できます。一方向
または双方向 ( 入力方向、出力方向、双方向 ) の外部およびフォレストの
信頼を使用して、オンプレミスのユーザーが AWS マネジメントコンソー
ルや AWS マネージドサ ー ビ ス (Amazon Relational Database Service for
SQL Server、Oracle、 PostgreSQL、MySQL、Amazon FSx など ) にアクセ
スするための接続を確立できます。

18

Active Directory

リホスト
既存の AD を Amazon EC2 に移行する

AD リソースの高可用性を要件とするお客様の場合、一般的なパターン
は、クラウドに追加のドメインコントローラーをデプロイし、新しい
Amazon Virtual Private Cloud (VPC) をインフラストラクチャの 1 つ以上
のデータセンターとして扱うことです。

この手段を使用すると、オンプレミスネットワークとクラウドネットワー
ク間で接続問題が発生した場合でも、AD リソースを引き続き使用できま
す。高可用性を確保するために、各リージョンに最低 2 つのドメインコン
トローラーをデプロイし、それぞれを異なるアベイラビリティーゾーンに配
置することをお勧めします。ベストプラクティスとしての設定は、VPC を
単一の AD サイトとしてリージョンに配置し、最も近いドメインコントロー
ラーをクライアントが選択できるようにサブネットを適切に定義すること
です。AWS は、複数のリージョン間で高可用性のプライベート接続を実現
する VPC ピアリングを提供するとともに、中央のハブを通じて複数の VPC
とオンプレミスネットワークを相互接続する AWS Transit Gateway も提供
しています。迅速にオンボーディングができるよう、AWS は Active
Directory のクイックスタートを提供し、お客様が新しいセルフマネージド

AD をクラウド内にデプロイしたり、既存のオンプレミスドメインを
AWS に拡張したり、AWS Managed Microsoft AD をデプロイしたりする際
の支援を行っています。いずれのシナリオでも、�しい VPCを使用する
か、��の VPC を使用するかを�択でき、1 �もしくは 2 �のMicrosoft
パブリックキーインフラストラクチャ ( �開���基� ) をデプロイするか
を�択できます。

国際航空運送協会
(IATA)

国際航空運送協会 (IATA) は、世界の
航空会社で構成される業界団体で
す。250 社の航空会社が IATA に加
盟し、これらの航空会社が世界の定
期運航の 84% を占めています。
「最
高品質のクラウドプラットフォーム
が必要であったため、AWS を選択
しました」と Buchner 氏は述べて
います。さらに Buchner 氏は「ま
すます高速化する世界で生き残ろ
うとした場合、AWS に移行する以
外の選択肢はありませんでした」と
も述べています。AWS での IATA ソ
リ ュ ー シ ョ ン は、Amazon Virtual
Private Cloud (Amazon VPC) で実行
され、IATA の既存の Active Directory
サービスと完全に統合していま
す。AWS は現在 ISO 27001認証を
受けています。BI プラットフォー
ムは非常に機密性の高い情報を管
理するため、この認証は IATAにとっ
て必須要件でした。

19

Active Directory

リプラットフォーム
AWS Managed Microsoft AD を使用してマネージドに移行する

お客様は、多くの場合、AWS Managed Microsoft AD を使用して既存の AD
インフラストラクチャをリプラットフォームし、AD デプロイの運用に伴
うオーバーヘッドを排除するとともに、必要なコード変更の数を制限して
います。
は、1

つ以上のリージョンに完全にデプロイされた
Microsoft AD であり、モニタリング、バックアップ、パッチ、リカバリなど
の一般的なタスクを自動的に処理します。AWS Managed AD では、複数のア
ベイラビリティーゾーンをまたいで各ディレクトリをデプロイし、ドメイン
コントローラーで障害が発生した場合は、モニタリングで自動的に検出し切
り替えます。データのレプリケーションと自動化された毎日のスナップ
ショットを、お客様に代わって設定します。ソフトウェアをインストールす
る必要はなく、AWS がすべてのパッチとソフトウェア更新を処理します。
AWS Single Sign-On との統合により AWS Managed AD を使用すること
で、Salesforce、Box、Oﬃce 365 などの一般的なビジネスアプリケーション
へのアクセスをフェデレートできます。また、AWS Managed ADは、Federal
Risk and Authorization Management (FedRAMP)、Payment Card Industry
Data Security Standard (PCI DSS)、US Health Insurance Portability and
Accountability Act (HIPAA)、または Service Organization Control (SOC)へのコ
ンプライアンスが義務付けられたデプロイで使用する場合の監査と承認を
受けています。
AWS

Managed

AD

Capital One

Capital One は、アメリカの大手銀
行およびクレジットカードイシュア
発行会社であり、収益は 280 億 USD
を超えます。Capital One は、多く
のリージョンやアプリケーションを
またいで AWS Managed AD を使用
しており、これは Amazon RDS な
どのマネージドサービスと統合して
います。同社は、まず Windows を含
む Microsoft ワークロードを Amazon
EC2 に移行することで、データセン
ターのフットプリントを大幅に削減
するとともに、俊敏性と柔軟性を高
めました。技術力の高い AWS のお
客様である Capital One は、新しい
ワークロードをクラウド内で実行す
る方法として複数のリージョンで
マネージド AD インスタンスを実行
し、セキュリティとコンプライアン

スの懸念に対処できました。さらに、
AWS Managed AD の導入によって、
Capital One は Amazon RDS for SQL
Server も利用できるようになった
ため、Amazon EC2 での独自の SQL
Server ワークロードの管理から解
放されて、クラウド向けに設計され
たオーバーヘッドの少ないソリュー
ションへと移行できました。

20

Active Directory

リアーキテクト
ワークロードを移行して Amazon Cognito でモダンアイデンティティ
サービスを使用する

より高度に AD モダナイゼーションへと向かうには、モダンアイデンティ
ティサービスとプロトコルを使用してアプリケーションをリアーキテクト
します。�くのお��にとって、AD はモダンウェブおよびモバイルアプリ
ケーションのスケール、パフォーマンス、可用性の�件を�たすものではあ
りません。これらのユースケースには、場所、時間、デバイスを問わず、ア
プリケーションにアクセスできること、人気の高いアイデンティティプロ
バイダーとシームレスに統合できること、オンラインとオフラインの両方
でログインできることなど、お客様が期待する新しい標準があります。こ
れらの��の需�に��できるように、AWS は AWS Cognito を提供して
います。これは、ウェブおよびモバイルアプリケーションへのユーザーサ
インアップ、サインイン、アクセスコントロールを提供するクラウドネイ
ティブのアイデンティティサービスです。Amazon Cognito は、数百万人の
ユーザーをスケールし、ソーシャルアイデンティティプロバイダー (Apple、
Facebook、Google、Amazon など ) とエンタープライズアイデンティティプ
ロバイダーへの SAML 2.0 および OpenID Connect を介したサインインをサ
ポートします。AWS Cognito ベースのアプリケーションへのアクセスを提供
するとともに、ユーザー認証のために既存の AD 機能を保持する必要がある
お客様は、Active Directory フェデレーションサービス (AD FS) を使用
し、SAML 2.0 アイデンティティソースとして Amazon Cognito と統合するこ
とができます。

21

Active Directory

リツール
新しいクラウドベースのツールを導入してアイデンティティ管理を簡素化
する

お客様がワークロードをオンプレミスからクラウドに�行する場合における
主な�題の 1 つは、リソースとインフラストラクチャの�大に対処すると
同時に、セキュリティおよびコンプライアンスのベストプラクティスを�
用することです。AWS は、クラウド内での組織のセキュリティ体制を定
義、モニタリング、分析、維持するために役立つ AWS Systems Manager、
Amazon CloudWatch、Amazon Kinesis などのツールを数多くご用意してい
ます。

例えば、お客様は AWS Systems Manager を使用して Amazon EC2 Windows
インスタンスへのリモートアクセスの簡素化、設定ベースラインの管理、セ
キュリティとコンプライアンスの維持、IT サービス管理システムとの接続を
行うことができます。システムレベルのメトリクス、ログ、イベントを収集
する場合、AWS は Amazon CloudWatch や、Amazon EC2 やオンプレミスで
リソースからメトリクスを生成する Windows エージェントを提供していま
す。Autodesk などのお客様は、これらのサービスを Amazon Kinesis Agent
for Microsoft Windows と組み合わせて、Windows イベント、ログ、メトリ
クスの大規模な収集、解析、変換、ストリーミングを行っています。AWS
のネイティブサービスを使用して管理およびモニタリングの�品を再ツール
することは、モダンアプリケーションの�件を�たす一�的なアプローチで
あり、それによりこれらの管理タスク用のツールを購入または開発する必�
がなくなります。

Autodesk

「Autodesk は、 設 計 や 制 作 を 支 援
す る ソフトウェアツールやサービス
を構築しています。これらのツー
ルやサービスは、お客様の仕事に
役立つように、信頼性が高くなけれ
ばなりません。クラウドに接続され
た信頼できるソフトウェアの基本的
な要素は可観測性であり、これは
ログデータの収集から始まりま
す。�しい Amazon Kinesis Agent
for Microsoft Windows で相 互 接 続
さ れ た 複 雑 な システムやツール
が不�となり、ストリーミングログ
のワークフローを簡素化できます。
このエージェントは、セットアップ、
設定、更新が容易です。Amazon
Kinesis
Agent
for
Microsoft
Windows によりログの��や管理の
複雑さを大幅に削減できます」
– Autodesk、クラウドエンジニア
リング�門、シニアディレクター、
Ben Cochran �

22

まとめ

Windows ワークロードをモダナイズして開発および運用における最新
のベストプラクティスを活用するためのオプションは数多くあります。
お客様がクラウド導入プロセスにおいてどの��にいるかにかかわらず、
AWS は実績あるサービス、サポート、パートナーを�じて、お客様のア
プリケーションの進化を�押しします。AWS ではモダナイゼーション
アプローチについていつでもご相談を�っています。このページの
フォームに記入し、AWS にお問い合わせください。

AWS でのモダナイゼーションアプリケーションについての詳
細はこちら (英語) ›
Windows のモダナイゼーションについて AWS に問い合わせ
る›

© 2021, Amazon Web Services, Inc. or its aﬃliates. All rights reserved.

23

アプリケーションと
オペレーションを
モダナイズする
モダンアプリケーションを
AWS で構築、管理、運用する

企業のグローバル化はますます進んでお
り、製品のデジタル化もより一層進んで
いる

あらゆる業界の組織はその規模を問わず、業務にアプリケーション利用しています。顧客向けのアプ
リケーションと内部アプリケーションのパフォーマンスは、顧客満足度、ロイヤルティ、従業員の生
産性、および効率に大きく影響する可能性があります。アプリケーションの動作が不十分、または機
能しない場合は、カスタマーエクスペリエンスや収支に取り返しのつかない影響を与える可能性があ
ります。クラウドネイティブの利点を得られるようにアプリケーションを構築すると、効果的にス
ケールして需要の増加に対応できます。今日、競争力と影響力を維持する圧力により、組織は確実に
新しいアプリケーションの機能を、迅速に提供する必要があります。

の CEO は、デジタルビ
ジネスでの進展を取締役
会から要求されていると
回答しました
出典 : Gartner
2

の CIO は、デジタルビジ
ネスにより、自分たちの
IT 組織が変化に十分に備
えていると考えています

のビジネスリーダーは、
競争力を維持するために
はデジタル化のペースを
上げる必要があると考え
ています

モダンアプリケーションは
ビジネスの成長を促進する

モダンアプリケーション、別名モダンアプリは、クラウドネイティブのアーキテクチャを活用し、
マイクロサービス、コンテナ、サーバーレステクノロジーを使用して構築されています。アプリケー
ションをモダナイズして、迅速にイノベーションを行い、動きの速い市場での競争力を維持します。
モダンアプリケーションは、グローバルに利用可能で、スケールして世界中の何百万人ものユーザーを
サポートし、ミリ秒単位のレイテンシーでペタバイトのデータを処理します。モダンアプリケーション
は、総保有コストを削減し、デベロッパーの効率性を高め、ビジネスの俊敏性を向上するのに役立ち
ます。

ほぼ
機能を AWS の使用で実現

3 倍の

25% 以上

37% 迅速な

343% の

市場への投入
出典 : IDC、AWS、AWS
3

アプリケーション開発チームの生産性を
向上

コードデプロイ頻度増加

モダンアプリケーションに
モダンオペレーションが
必要な理由

モダンテクノロジーは、アプリケーション
環境に複雑性を加え、オペレーションの点
で新しい課題を生み出しています。例えば、
従来のオペレーションツールとプロセス
では、モダン環境で生成されｒるオペレー
ションデータのボリュームを十分に処理で
きないことが頻繁にあります。従来のワー
クロードが混在すると、動的 IT 環境の管
理およびガバナンスが複雑化します。モダ
ンオペレーションがこの問題を解決します。
モダンオペレーションにより、デベロッ
パーは可視性と制御を得られ、オペレー
ションと開発が近づきます。このアプロー
チでは、コード、オートメーション、統合
を活用して、デベロッパーの生産性を向
上させ、イノベーションを加速させます。

4

モダンオペレーションは
俊敏性をスケールする
モダン Ops により、企業は以下が可能になります。

場所を問わない運用

実用的なインサイトを見つけて獲得
アプリケーションの回復力を向上
ガバナンスとコンプライアンスを自動化
これらの利点を、それぞれ探っていきましょう 。
5

モダンオペレーション

場所を問わない運用

単一のインターフェイスとダッシュボードからクラウドとハ
イブリッド環境でアプリケーションとリソースを管理
• 可視性と制御のワークフローを自動化および調整

• 自動化された方法でアプリケーション、リソース、変更を管理し、ソフ
トウェア開発ライフサイクル全体でオペレーション効率を向上
• 開発チームとオペレーションチームが互いに緊密に連携できる自動化お
よび統合されたオペレーションにより、組織全体で一貫性を推進して、
DevOps 文化を促進

「AWS により、私たちの DevOps チームは、クラスター
とインフラストラクチャレベルのデバッグの管理と容
量監査にかかる時間を 50％ 短縮しています」

―MakeMyTrip India Pvt. Ltd.、
テクノロジー部門シニアバイスプレジデント、Jaipal Deswal 氏

6

AWS Systems Manager

インフラストラクチャを大規模に運用
および管理

AWS CloudFormation

Infrastructure as Code でクラウドの
プロビジョニングを高速化

AWS Proton

コンテナおよびサーバーレスデプロイ
の自動化された管理

AWS OpsWorks

Chef と Puppet でオペレーションを自
動化

モダンオペレーション

アプリケーションの
回復力を向上

強力なオペレーションスタンスによりアプリケーションの
可用性と回復力を向上し、アプリケーション開発を加速

AWS CodeStar

• アップタイム、平均修復時間 (MTTR)、目標復旧時間 (RTO)、目標復旧時
点 (RPO) などのアプリケーション KPI を一元的に追跡、管理、検証

Amazon DevOps Guru

• モダンアプリケーションにより、高可用性、回復力、スケーラビリティ
というクラウドの利点を享受することで、大規模なアプリケーションの
可用性を一貫して確保。運用スタンスの整合性を継続的に検証すること
が重要
• 統合および自動化された継続的インテグレーションと継続的デリバリー
(CI/CD) によりコード品質、パフォーマンス、セキュリティを向上

• 継続的なテストにより回復力を確保し、機械学習によるコードのインサ
イトでエラー率を低減

「日本で構築した環境を欧州、タイ、インドの法規要
件に合わせて各エリアの AWS リージョンに横展開する
ためには、CI/CD や Infrastructure as Code の仕組みが
必須でした」

―本田技研工業株式会社、
グローバルプラットフォーム課チーフ、梅原啓佑氏

7

AWS でアプリケーションを短期間で開
発、構築、デプロイ

Amazon CodeGuru

機械学習によるレコメンデーションを
使用して、コードレビューを自動化し
アプリケーションのパフォーマンスを
最適化
機械学習によるクラウドオペレーショ
ンサービスによりアプリケーションの
可用性を向上

AWS Fault Injection Simulator
制御された実験により回復力とパ
フォーマンスを向上

AWS X-Ray

製品や分散アプリケーションの分析と
デバッグ

Amazon CloudWatch

AWS とオンプレミスにおける AWS のリ
ソースとアプリケーションの可観測性

モダンオペレーション

実用的なインサイトを
見つけて獲得

アプリケーションとインフラストラクチャの健全性およびパ
フォーマンスを理解して、高性能アプリケーションを構築し
てデプロイ
• アプリケーションとリソースから数十億のメトリクス、ログ、トレース
データが生成されるが、継続的な可観測性によりこの複雑なデータから
インサイトを獲得
• DevOps チームは平均復旧時間 (MTTD) を向上するためにアプリケー
ションの動作に注目する必要があるので、共有のメトリクスに対して
一元的な可観測性があることは、デベロッパーの生産性とオペレー
ション効率を高めるための鍵となる

• AI と機械学習を活用して異常を検出し、レコメンデーションと自動化
された修復を推進して、アプリケーションの健全性と可用性を向上

「DevOps チームがコンテナのインフラストラクチャ全
体での問題を迅速に見つけられるため、私たちにとっ
ての最大の利点は、MTTR ( 平均修復時間 ) の短縮です」
―CloudPassage、
共同設立者兼エンジニアリング部門バイスプレジデント、Vitaly Geraymovych 氏

8

Amazon CloudWatch

AWS とオンプレミスにおける AWS のリ
ソースとアプリケーションの可観測性

AWS X-Ray

製品や分散アプリケーションの分析と
デバッグ

Amazon Managed Service
for Granfana

ビルダー、オペレーター、ビジネスリー
ダー向けの強力でインタラクティブな
データ可視化

Amazon Managed Service
for Prometheus

可用性とセキュリティに優れた、コン
テナのマネージドモニタリング

AWS Distro for
OpenTelemetry

収集された相関メトリクスとトレース

モダンオペレーション

ガバナンスとコンプライ
アンスを自動化

アプリケーションの健全性とパフォーマンスを追跡してログ
に記録し、予期しないアプリケーションの動作の通知を受信
して、修復を自動化するガードレールを実装

• AWS インフラストラクチャの API アクティビティを継続的にロギングお
よび保存することで、オペレーション、セキュリティ、または監査分析の
リソースアクティビティに関する完全で正確な履歴レコードを確保
• 容易にリソースを大規模に設定して、組織のポリシーを反映するルール
を作成し、機械学習を使用して設定を自動的に監査および修復し、アプ
リケーションの可用性とアップタイムを保持

• 疑わしいアクティビティや異常なトレンドなど、問題が検出されたと
き、プロアクティブにアラートを発しアクションを自動化して、リスク
を管理し、コンプライアンスを維持

「私たちは、チームが迅速に動き、大規模なセルフサー
ビスガバナンスを達成することに役立つデベロッパー
ファースト手法を提供しました」

―GoDaddy、
エンジニアリング部門バイスプレジデント、Demetrius Comes 氏

9

AWS Control Tower

新しくセキュアな複数のアカウントが
ある AWS 環境を設定および管理

AWS CloudTrail

ユーザーアクティビティと API 使用状
況の追跡

AWS Conﬁg

AWS リソースの設定を記録および評価

AWS Security Hub

統合セキュリティおよびコンプライ
アンスセンター

Amazon CloudWatch

AWS とオンプレミスにおける AWS のリ
ソースとアプリケーションの可観測性

AWS Systems Manager

インフラストラクチャを大規模に運用
および管理

AWS Audit Manager

AWS の使用量を継続的に監査し、リス
クとコンプライアンスの評価方法を簡
素化

モダンアプリケーションによる俊敏性は、
スケーラブルなビジネスの成長を推進する

組織は、顧客の期待とエンドユーザーエクスペリエンスを維持するため、モダンアプリケーションが
一貫して高パフォーマンスを実現できるようにする必要があります。モダンオペレーションは、モ
ダンアプリケーションの新しい課題に対応するオートメーションと機械学習機能により、組織を支
援するものです。

数週間から 1 日に
ソフトウェアサービスの提供
時間を短縮

3 か月で
株式取引検証システムを構築

運用コストを
40% 削減

1 時間あたり 50 以上のデプロイ
を実行

10

モダンオペレーションと
モダンアプリケーションの
融合

AWS を活用すれば、安全に大規模での構築、管理、
統制を実現できるクラウドオペレーションモデルに
より自信をもってアプリケーションをモダナイズす
ることが可能になります。

AWS でのモダンオペレーションに関する詳細はこちら
お問い合わせ

アプリケーション
モダナイゼーションを
促進する
サーバーレス、コンテナ、マイクロサービスをベースとした
アーキテクチャで永続データと共有データを扱うには

1

2

アプリケーションの
モダナイゼーション »

永続的な共有データで
可能性を広げる »

3

ソリューション »

4

エグゼクティブ
サマリー»

1 | アプリケーションのモダナイゼーション

市場投入までの時間を短縮し、イノベーションを促進し、信頼性と TCO を向上させ、ワークロー
ドごとに適切なツールを使用することができる

モダンアプリケーションは、モダンテクノロジー、アーキテクチャ、ソフトウェアデリバリープラクティス、運
用プロセスを組み合わせたものであり、より迅速に、より頻繁に、より一貫した価値提供を実現します。モダンア
プリケーションは、分散型テクノロジーを活用し、アジャイルでイベント駆動型のサーバーレスコンポーネントに

重点を置いています。これにより、コンピューティングインフラストラクチャのプロビジョニングや管理など
の、付加価値を生まない手間のかかる作業を減らす代わりに、顧客への価値提供により多くの時間を費やすことが
できます。

組織は、マイクロサービス、サーバーレス、およびコンテナ化されたアプリケーションを用いてアプリケーションを
モダナイズし、顧客のニーズに応え、何百万人ものユーザーにスケールしています。これにより、インフラストラ
クチャ管理が不要になり、よりアジャイルなプロセスの実装や DevOps 文化の導入が可能になります。その結
果、アプリケーションや機能をより迅速に提供し、カスタマーエクスペリエンスを継続的に向上させることがで
きます。

» 戻る

次へ »

サーバーレス »
AWS Lambda »

コンテナ »

データ »

2

アプリケーションのモダナイゼーション

サーバーレス

コンテナ

データ

» 戻る

次へ »

AWS Lambda

なぜサーバーレスなのか?

企業や組織は、開発チームがイノベーションに集中し、スピード
を持って動くことを望んでいます。しかし実際には、ほとんどの
時間がオペレーションとメンテナンスに費やされています。
サーバーレス戦略は、サーバー管理が不要、結果に対して支払う

サービス、ほぼ継続的なスケーリング、耐障害性が組み込まれて
いるといった考えに基づいています。サーバーレスサービスを採
用したり、サーバーレスアーキテクチャを構築したりする場合、
これらの考えがアプリケーション開発戦略の基礎となります。
AWS は、ベストプラクティスをサービスに組み込むことで、構築と
反復を迅速化します。これにより、時間の経過とともに管理すべ
きことが少なくなっていきます。AWS では、サービスをできるだ
けシンプルに使いやすく、管理しやすいように設計しているため、
お客様はより顧客へのサービスに集中することができます。

ケ ーススタディ

サーバーベーステクノロジーとサーバーレス
テクノロジーの TCO を比較する

サーバーレステクノロジーは、ユーザーのリクエストに基づ
いてコンピューティングとメモリを動的かつ自動的に割り当
てることで、市場投入までの時間を短縮します。また、サー
バーレステクノロジーはインフラストラクチャ管理の手間を
減らしてコストを削減します。これにより、企業は IT 予算
と人的資本を運用からイノベーションに向け直すことができ
ます。サーバーレスへの需要が高まっているのも不思議では
ありません。
サーバーレスでアプリケーションを実行すると、サーバー
ベースのアプローチと比較して大幅にコストを削減できる理
由について学びましょう。
ホワイトペーパーを読む »

3

アプリケーションのモダナイゼーション

サーバーレス

コンテナ

データ

» 戻る

次へ »

AWS Lambda

AWS Lambda
AWS の主要なサーバーレスコンピューティングサービスの 1 つ
である AWS Lambda について見てみましょう。モダナイゼー
ションを始める際に、最初に導入されるサービスの 1 つです。
AWS Lambda は、サーバーレスのコンピューティングサービスで、
サーバーのプロビジョニングや管理、ワークロードを意識したク
ラスタースケーリングロジックの作成、イベント統合のメンテナ
ンス、ランタイムの管理などを行わずにコードを実行できます。
AWS Lambdaを使用することで、ほぼどのようなタイプのアプリ
ケーションやバックエンドサービスに対してでも、コードを実行で
きます。管理タスクを実行する必要はありません。

コードを .zip ファイルやコンテナイメージとしてアップロード
するだけで、AWS Lambda はあらゆる規模のトラフィックに対
して、自動的かつ正確にコンピューティングの実行能力を割り
当て、受信したリクエストやイベントに基づいてコードを実行
します。コードは、200 を超える AWS のサービスと SaaS アプリ
ケーションから自動的にトリガーする、もしくはウェブアプリ
ケーションやモバイルアプリケーションから直接呼び出すよう設
定することができます。AWS Lambda 関数は、好きな言語
(Node.js、 Python、Go、Java など ) で記述することができ、AWS
Serverless Application Model (SAM) や Docker CLI などのサーバー
レスツールとコンテナツールの両方を使って、関数の構築、テス
ト、デプロイを行うことができます。

ケーススタディ

Asurion は AWS Lambda と Amazon Elastic File
System (Amazon EFS) を 使 用 し て オ ン デ マ ン
ドの機械学習を構築

Asurion は、デバイスの保険、保証、サポートサービスを
提供する大手企業であり、同社のエキスパートは、消費
者のもとで技術的な問題が起きたとき修理、交換、解決
を行うことができます。Asurion は、さまざまな AWS のテ
クノロジーを活用し、AWS Lambda で機械学習を使用して
サポート通話におけるカスタマーエクスペリエンスのリ
アルタイム分析を行っていましたが、それらの通話記録
を AWS Lambda の /tmp ディレクトリに収めることに苦
労していました。Asurion は、Amazon EFS を使用して、
AWS Lambda で実行する機械学習機能に拡張ストレージ
容量を与えることで、この問題を解決しました。現在
Asurion では、機械学習の推論インフラストラクチャが通
話のボリュームに応じて伸縮自在にスケールするため、イ
ンスタンスの維持やオートスケーリングに比べて運用オー
バーヘッドを削減することができています。

「当社は、 AWS Lambda で機械学

習の推論を伸縮自在なものにした

いと考えていましたが、処理に必

要なデータの大きさからできない

だろうと考えていました。 Amazon
EFS を使用することで、その機能に

必要なすべてのストレージ容量を

簡単に確保することができました」
Asurion、
元シニアプリンシパル
ソフトウェアエンジニア、
Jeﬀ Tougas 氏

AWS の re:Invent セッションを視聴する »

4

アプリケーションのモダナイゼーション

サーバーレス

コンテナ

データ

» 戻る

次へ »

AWS Lambda

永続的データで
コンテナを進化させる

アプリケーションのコンテナ化は、ソフトウェアを作成し
て、パッケージ化し、異なるコンピューティング環境にデプロイ
するための、予測可能なシンプルな方法です。
コンテナ内で実行されているアプリケーションが終了すると、その
アプリケーションから関連するデータにアクセスできなくなりま
す。これは、ある時点から次の時点までの状態に関する情報を読み
取ったり保存したりしないステートレスアプリケーションにとって
は問題ありませんが、ステートフルアプリケーションの場合は問題
になります。ステートフルアプリケーションは、実行するたびに状
態に関するいくつかの事柄を記憶することがあります。

状態に関する情報を必要とするアプリケーションをコンテナ化す
ることは、永続的ストレージに接続することを意味します。
また、単一のスケールアウトアプリケーションの同時実行イン
スタンス間や、複数のアプリケーション間でデータを共有する
必要がある場合もあります。永続的な共有ファイルストレージ
は、機械学習モデルのようなステートフルなワークロード
や、GitLab、Jenkins、Elasticsearch などのDevOps ワークロード
のコンテナ化を可能にします。

ケーススタディ

Acquia は Amazon Elastic Kubernetes Service
(Amazon EKS) および Amazon EFS でウェブホ
スティングをモダナイズ

Acquia のソフトウェアとサービスは Drupal を中心に構築
されており、エンタープライズ企業がウェブサイト、アプ
リケーション、その他のデジタルエクスペリエンスを構築、

運用、最適化するサービスを提供しています。同社は可能
な限り運用効率を高めながらカスタマーエクスペリエンス
を向上させるため、ウェブホスティング環境の継続的な改
善に取り組んでいます。Acquia では、ホスティングアプリ
ケーションを Amazon EKS でコンテナ化して実行し、永続
的ストレージに Amazon EFS を使用することで、顧客環
境をダイナミックにスケールすることができました。ま
た、 AWS のフルマネージドサービスを活用することで、
ストレージとコンピューティングの利用率を向上させて
TCO を削減し、管理負荷をさらに軽減しました。
AWS の re:Invent セッションを視聴する »

「当�はホスティングアプリ

ケーションをコンテナ�し、

Amazon EKS と Amazon EFS で

�行することで、インフラス

トラクチャと�用保�のオー

バーヘッドを大幅に削減しな

がら、カスタマーエクスペリ

エンスを向上させることがで
きました」

Acquia、エンジニアリング部門
シニアディレクター、
Jake Farrell 氏

5

アプリケーションのモダナイゼーション

サーバーレス

コンテナ

データ

» 戻る

次へ »

AWS Lambda

データを活用したモダン
アプリケーションの推進

データ集約型のモダンアプリケーションでは、大量の共有データ
への高速アクセスが必要となります。コンテナは一時的なものであ
るため、長時間稼働するアプリケーションでは、耐久性のあるスト
レージに状態を保存することが有効です。また、機械学習トレーニ
ング、ウェブサービス、コンテンツ管理システムなどの分散型アプ
リケーションでは、共有ストレージレイヤーに永続的ストレージを
置くことが有効です。

AWS Lambda では、大規模でミッションクリティカルなサーバーレ
スアプリケーションを実行することができます。Amazon EFSは、
これらのアプリケーションに高可用性と耐久性のあるサーバーレス
ストレージを提供し、AWS Lambda 関数と AWS Fargate タ ス
クの実行後、および実行間で維持する必要のあるデータを簡単に共
有します。この強力な組み合わせは、機械学習アプリケーションの構
築のほか、大規模なモデルやライブラリ、およびその他のリファレ
ンスデータのロード、さらには大量のデータの処理とバックアップ、
ウェブコンテンツのホスティング、および内部ビルドシステムの開
発などに最適です。

ケーススタディ

モダンアプリケーションの永続的ストレージを
データに関する導入事例の小見出し
簡素化
reritam repreic
先進的な組織によるマイクロサービスやコンテナ化された
アプリケーションの活用が進むにつれ、コンテナで使用す
る永続的ストレージの必要性はますます高まっています。
本ホワイトペーパーでは、エフェメラル (一時的) からパー
システント (持続的) へのコンテナの進化をたどり、デベ
ロッパーと DevOps のチームが、従来型のプロビジョニン
グおよびサーバーレスのコンテナに対して AWS のスケー
ラブルで高性能、そして経済的なストレージソリューショ
ンを世界中で活用する方法について説明しています。

データケースのロゴ
および画像

ホワイトペーパーを読む (英語) Persistent File Storage for
Modern Applications

6

2 | 永続的な共有データで
可能性を広げる
アプリケーションのモダナイゼーションにおけ
る永続的な共有データのユースケース

アプリケーション開発のモダナイズ
機械学習トレーニングやステートフルなマイクロサー
ビスなど、 分 散 型 の モ ダ ン ア プ リ ケ ー シ ョ ン で は、 共
有ストレージレイヤーの利点を活用できます。Amazon
Elastic File System (Amazon EFS) では、モダンアプリケー
ションを構築し、AWS コンテナやサーバーレスアプリケー
ションからデータを永続化して共有することができ、しか
も管理の必要はありません。Amazon EFS を使用すれば、
インフラストラクチャの管理に煩わされることなく、アプ
リケーションに集中することができます。
DevOps の簡素化
スケーラブルで可用性の高いソリューションで、顧客の
ニーズにより俊敏に対応しましょう。Amazon EFS は、開
発環境に共通のストレージリポジトリを提供するため、
コードやその他のファイルを安全かつ系統立った方法で共
有することができます。数回のクリックで、テスト環境、
開発環境、本稼働環境のプロビジョニング、複製、スケー
ル、アーカイブを行うことができます。

コンテンツ管理システムのモダナイズ
コンテンツ管理システムをモダナイズすることで、製品や
サービスをより迅速に、より確実に、より安全に、より低
コストで市場に投入することができます。AWS コンテナ、
AWS Fargate、および Amazon EFS は、ウェブサイト、
オンライン出版物、およびエンタープライズコンテンツ
管理のモダナイゼーションを支援する、シンプルで伸縮自
在、かつ可用性の高い安全なソリューションを提供します。
ステートフルなマイクロサービスのデプロイ
ス テ ー ト フ ル な モ ダ ン ア プ リ ケ ー シ ョ ン に 対 し て、
Amazon EFS はデータ基盤を提供し、AWSへのデプロイの
確実性と一貫性を持つコンテナおよびサーバーレステクノ
ロジーと連携して動作し、アプリケーションの状態を永続
データとして保持します。

データサイエンスの加速
Amazon EFS は、機械学習およびビッグデータ分析のワー
クロードに必要な使いやすさ、スケーラビリティ、パ
フォーマンス、一貫性を持ったサービスです。データサ
イエンティストは Amazon EFS を使用して、ノートブッ
クのファイル、トレーニングデータ、およびモデルの
アーティファクトを保存するためのホームディレクトリ
を備えた、パーソナライズされた環境を構築できま
す。Amazon SageMakerは、トレーニングジョブのため
に Amazon EFS と統合し、データサイエンティストが迅速に
イテレーションをできるようにします。

» 戻る

次へ »

モダンアプリケーションの
利点 »

Amazon Elastic File System
(Amazon EFS) » »

7

ファイルデータで可能性を広げる

モダンアプリケーションの�点

モダンアプリケーション
の�点

Amazon EFS を使用してアプリケーションをモダナイズして
い る 組 織 は、 通 常、 ア プ リ ケ ー シ ョ ン の 移 行、 ア プ リ ケ ー

ションの拡張に関心があります。移行には、既存のアプリケー
ションでコンテナイメージを構築するための構築プロセス
の更新、または AWS Lambda のような機能ベースのコン
ピューティング環境で実行するためのアプリケーションの更
新が含まれます。拡張に関心がある組織は、既存のアプリ
ケーションを移行するよりも、共有データや既存のアプリ
ケーションの状態にアクセスする新しい機能を持つマイクロ
サービスを開発しています。どちらの場合も、セルフマネー
ジドストレージから Amazon EFS のようなサーバーレスの

AWSデータサービスに移行する機会となります。

Amazon Elastic File System (Amazon EFS)

» 戻る

次へ »

ケーススタディ

T-Mobile はコンテナでパフォーマンスの向上とコス
ト削減を実現

大手グローバル電気通信会社の T-Mobile は、時間帯によって、
また月によって使用量が大幅に急増する顧客対応アプリケー
ションに悩まされていました。T-Mobile は、既存のインフラス
トラクチャでは必要とされる拡張性に対処できず、ピーク時の
需要に対応するためにオーバープロビジョニングするしかあり
ませんでした。

同�はアプリケーションをモダナイズしてマイクロサービス手
�を採用しました。また、Amazon EFS を�用するコンテナを
デプロイすることで、ストレージ�理のオーバーヘッドを一�
生じさせることなく、永�的ストレージと動的な��を�現
しました。同�は現在、Amazon EFS で 16,000 のコンテナを
�理し、ストレージ�理のオーバーヘッドを削減しながらスト
レージコストを 70% 削減し、�しいアプリケーションサービ
スのデプロイサイクルを��しています。
T-Mobile の導入事例を読む »

「当社は、さまざまなレベルの
可用性とパフォーマンスの要
件がある多数のアプリケー

ションを抱える大組織です。
(Amazon) EFS はこれらの要

件を全面的に満たす共通のス

トレージプラットフォームを
提供してくれます」

T-Mobile、
元シニアエンタープライズ
アーキテクト、
Amreth Chandrasehar 氏

8

ファイルデータで可能性を広げる

モダンアプリケーションの�点

シンプルでサーバーレス、
一度設定したらそのまま使える、
伸縮自在なファイルシステム

Amazon Elastic File System (Amazon EFS)

» 戻る

次へ »

A MA Z ON EF S の仕組み

Amazon EFS では、モダンアプリケーションを構築し、AWS コンテナやサーバー
レスアプリケーションからデータを永続化して共有することができ、しかも管
理の必要はありません。ストレージのプロビジョニングや管理をすることなく、
ファイルデータを共有することができます。また、Amazon EFS は、アプリケー
ションを中断することなく、オンデマンドでペタバイトまでスケールできるよ
うに構築されています。ファイルの追加や削除に合わせて、ファイルシステムを
自動的に拡大、縮小させるので、成長に合わせて容量をプロビジョニングしたり
管理したりする必要がありません。
Amazon EFS は、レイテンシーの��を受けやすいアプリケーションから、�い
スループットを必�とする��に並��されたスケールアウトジョブまで、大�
�のファイルワークロード向けに��されており、�械��、ウェブサービス、
コンテンツ�理、およびそれらの中間にあるすべての用�に��です。Amazon
EFS は、99.999999999% ( イレブンナイン ) の耐久性を実現するように設計さ
れており、可用性が高く、AWS Backup とネイティブに統合されているため、必
要なときにいつでもデータを利用することができます。

Amazon EFS についての動画を視聴する (英語) »

Amazon EFS は、Amazon Elastic Computing (Amazon EC2) インスタンス、
コンテナ、および AWS Lambda 関数の数万の接続に対して同時アクセスを提
供します。�用したストレージの�だけ�用が発生し、�小ストレージ�件は
ありません。

9

3 | ソリューション

モダンアプリケーションの永続的共有ファイル
ストレージ
AWS Lambda では、大規模でミッションクリティカルな

サーバーレスアプリケーションを実行することができま
す。Amazon は、これらのアプリケーションのために高
可用性と耐久性のあるサーバーレスストレージを提供し、
AWS Lambda 関数と AWS Fargate タスクの実行後、お
よび実行間で持続する必要のあるデータの共有を簡素化し
ます。
Amazon Elastic File System (Amazon EFS) のアタッチ
メントは、Amazon Elastic Container Service (Amazon
ECS) のタスク定義や Kubernetes の永続ボリュームなど
のアプリケーションメタデータに、接続性を含めて設定
されているため、デベロッパーはインフラストラクチャ
ではなく、アプリケーションに集中することができます。

AWS コンテナ、AWS Lambda、Amazon EFS はすべて、
アプリケーションに�わせて��自在にスケールアップお
よびスケールダウンし、��的インテグレーション
と��的デリバリー (CI/CD) の DevOps パイプラインをサ
ポートするための�用オーバーヘッドを削減することがで
きます。

» 戻る

アプリケーションのモダナイゼーションは、信頼性の

向 上 に も 役 立 ち ま す。AWS コ ン テ ナ、AWS Lambda、
Amazon EFS は す べ て、 複 数 の ア ベ イ ラ ビ リ テ ィ ー
ゾーンで自動フェイルオーバーされるたリージョン内
サービスです。

AWS でアプリケーションをモダナイズすると、コストを
最適化できます。ストレージやコンピューティングに対
し、利用した分のみ支払います。Amazon EFS は、ゼロか
らペタバイトまで、中断することなくオンデマンドでス
ケールでき、ファイルの追加や削除に応じて自動的に拡大
および縮小します。Amazon
ECS、Amazon
Elastic
Kubernetes Services (Amazon EKS)、 お よ び AWS
Fargate の ク ラ ス ターのオートスケーリングも、需要に
応じて容量を拡大および縮小できます。

次へ »

Discover Financial Services は AWS
を活用して��とインサイトを得る
までの時間を短縮 »

仕組み »

今すぐ開始する »
AWS のサービス »

10

ソリューション

Discover Financial Services

Discover Financial
Services は AWS を活用し
て��とインサイトを得る
までの時間を短縮
Discover Financial Services は、顧客の資産目標の達成を�援する
バンキング�品や信用商品を提供しています。長年にわた
り、Discover では、チームやビジネスユニットごとに分析が実践さ
れてきました。全部で 12 のチームに約 8 ～ 10 のツールセットが

ありました。それぞれの実践には、異なるスキルセットと多様な
ツールが必要でした。そのため、同社の開発チームは、社内の
データサイエンティストたちが共通の環境でコラボレーション
するための、一元化されたプラットフォームとして AIR9 と呼ばれ
る社内向けデータサイエンスワークベンチの構築を任されまし
た。

Discover ですでに使用していたデータサイエンスツールの多くが
コンテナ化に適していたため、同社は Kubernetes が AIR9 をホス
トするのに適していると判断しました。専用のコンテナを持つ
ことで、ワークロードを分離することができ、ユーザーはマルチ
テナント環境では管理が困難なカスタムパッケージのインストー
ルや環境の変更を行えるようになっています。

仕組み

今すぐ開始する

» 戻る

AWS のサービス

次へ »

ケーススタディ

50%

ホームディレクトリに
Amazon EFS Infrequent
Access を使用し、またバッ
クアップに Amazon Simple
Storage Service (Amazon S3)
を使用することで削減した
ストレージコストの��

構築

Discover のデータサイエン
ティストの 85% が�用す
るコラボレーションプラッ
トフォームを構築

10 ～ 20 倍

多くのユースケースにおい
てオンプレミスシステムと
比較した実行時間の向上

「以前は、ユーザーが必要と

するツールの取得に何週間も

かかっていました。今ではそ

れが数時間でできるようにな

90%

ストレージ管理にかかる
時間を 90% 削減

り、ユーザーはすぐにインサ

イトを得て、顧客に価値を提

供できるようになりました」
Discover Financial Services、
データサイエンステクノロジー�門
ディレクター、
Brandon Harris 氏

Discover Financial Services の導入事例を読む »

11

ソリューション

Discover Financial Services

仕組み

今すぐ開始する
AWS のサービス

» 戻る

次へ »

仕組み

アプリケーションのモダナイゼーションの
プロセスを示します。

12

ソリューション

Discover Financial Services

今すぐ始めましょう

AWS Lambda と Amazon EFS

�下のリソースを�用して、アプリケーションのモダナイゼー
ションプロセスを開�しましょう。

AWS Lambda と Amazon EFS
AWS Lambda にはコード用に 512MB の一時ファイルシステ

ムが用�されていますが、これは耐久性のあるストレージを
目的としたものではなく、エメフェラルスクラッチリソース
です。

AWS Lambda に Amazon EFS を使用すると、関数の呼び出し
間で簡単にデータを共有できます。また、大規模なリファレン
スデータファイルを読み取り、関数の出力を永続的共有スト
アに書き込むこともできます。ブログ記事「Using Amazon

EFS for AWS Lambda in your serverless applications」(英
語) では、AWSアカウントで Lambda に対して Amazon EFS
を有効にする方法を示し、いくつかの一般的なユースケース
についても説明しています。
動画を視聴する Modernizing Serverless Applications with AWS
Lambda and Amazon EFS »

仕組み

今すぐ開始する

» 戻る

AWS のサービス

AWS コンテナ と Amazon EFS

Amazon EFS と AWS コンテナサービスとのネイティブな統
合により、長時間稼働するステートフルなアプリケーション
や共有データセットを持つアプリケーションのコンテナ化が
容易になります。

Amazon EFS を利用した Amazon ECS と AWS Fargate
Amazon ECS は、Amazon Elastic Compute Cloud (EC2) と
AWS Fargate の両方でコンテナのデプロイをサポートしていま
す。3 部構成のブログシリーズ「Amazon EFS を Amazon ECS

と AWS Fargate で使用するための開発者ガイド」では、必要と
される情報を提供しています。パート 1 では、統合の必要性の

背景、その範囲、ユースケース、および統合がもたらすシナ
リオについて説明します。パート 2 では、Amazon ECS と
AWS Fargate に基づきコンテナをデプロイする際の Amazon
EFS の セ キ ュ リ テ ィ の仕組みの詳細と、リージョンごとの
デプロイのベストプラクティスに関する考慮事項について
深く掘り下げます。パート 3 では、再利用可能なコードとコ
マンドを含む実践的な例を取り上げます。

次へ »

Amazon EFS を利用した Amazon EKS と AWS Fargate
Amazon EKS で は、Kubernetes ポ ッ ド を Amazon EC2 イ ン
スタンスまたは AWS Fargate で実行するという選択肢があり
ます。AWS Fargate では、コンテナ向けサーバーレスコン
ピューティングエンジンで、サーバーの作成や�理、データ
プレーンのスケーリング、Amazon EC2 インスタンスの��
なサイズ��、もしくはワーカーノードのアップグレード
などを行うことなく、Kubernetes のワークロードを�行す
ることができます。Amazon EFS は、AWS Fargate でステー
トフルな Kubernetes ワークロードを実行するために必要な、
永続的共有ストレージを提供します。ブログ記事

「Amazon EFS を利用して AWS Fargate 上の Amazon EKS で
ステートフルなワークロードを実行する」では、Amazon EFS
を使用して AWS Fargate でステートフルな Kubernetes ワーク
ロードを実行する方法について説明しています。
デモを��する Amazon EFS Secure data persistence with Amazon
ECS and AWS Fargate »

13

解決策

Discover Financial Services

仕組み

今すぐ開始する

» 戻る

AWS のサービス

次へ »

AWS のサービス
Amazon EFS »

AWS Lambda »

Amazon EFS は、シンプルでサーバーレス、
また一度設定したらそのまま使える、クラウ
ドネイティブなファイルシステムです。モ
ダンアプリケーションを構築し、AWS コンテ
ナやサーバーレスアプリケーションからデー
タを永続化して共有することができ、管理の
必要はありません。

AWS Lambda は、サーバーレスのコンピュー
ティングサービスで、サーバーのプロビジョ
ニングや管理、ワークロード対応のクラスター
スケーリングロジックの作成、イベント統
合のメンテナンス、ランタイムの管理などを
行わずにコードを実行できます。

Amazon EKS »

AWS Fargate »

Amazon EKS は、AWS クラウドまたはオンプ
レミスで Kubernetes アプリケーションを開
�、�行、およびスケールする柔�性を提供
します。

Amazon ECS »

Amazon ECS は、フルマネージドコンテナ
オーケストレーションサービスで、コンテ
ナ化されたアプリケーションを簡単にデプ
ロイ、管理、およびスケールするのに役立
つちます。

AWS Fargate は、コンテナ向けサーバーレス
コンピューティングエンジンであり、Amazon
ECS と Amazon EKS の両方と連携します。

14

4 | エグゼクティブサマリー
マイクロサービスアーキテクチャのための
クラウドファイルストレージ

モダンアプリケーション開発は、組織がイノベーションを
加速させ、顧客のニーズに応え、数百万のユーザーにス
ケールすることを可能にします。モダンアプリケーション
は、互いに補完し合うコンテナとサーバーレスアーキテク
チャで構築されています。このモダンアーキテクチャによ
り、デベロッパーは設定や互換性に関する懸念や、管理の
オーバーヘッドから解放され、アプリケーションの構築に
集中できます。

コンテナ化されたアプリケーションやサーバーレス機
能が終了しても、データを永続化できるクラウドファ
イルシステムが必要です。このようなモダンアプリ
ケーションでは、クラウドネイティブなファイルシス
テムがデータ基盤となり、コンテナやサーバーレステ
クノロジーと連携して動作することで、AWSに確実かつ
一貫してデプロイし、必要に応じてアプリケーションの
状態のデータを永続化し、アプリケーション間でデータを
共有することができます。

» 戻る

次へ »

リソース »

新しいアプリケーションをこれらの最新技術で構築するこ
とは現在では一般的になっており、既存のアプリケーショ
ンも、コンテナやサーバーレスアーキテクチャでデプロイ
するためにリパッケージされています。しかし、そこには
データの問題があります。

15

» 戻る

AWS コンテナ、サーバーレス、Amazon EFS で
アプリケーションをモダナイズする

アプリケーションのモダナイゼーションプロセスに役立つその他のリソースをご紹介します。

モダンアプリケー
ションの永続的ファ
イルストレージ »

管理の必要なく、データを永続化
し共有する

AWS のモダンアプリ
ケーション »

イノベーションを加速させ、顧客
のニ ー ズ に 応 え、 何 百 万 人 も の
ユ ー ザーにスケールする

Amazon Elastic
File System »
シンプルでサーバーレス、一度
設定したらそのまま使える、伸
縮自在なファイルシステム

AWS コンソールで
Amazon EFS の使用を
開始する »

AWS コンソールで数回クリックし
て、数秒でファイルシステムを作
成する

16

OCTOBER 27, 2021

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アプリケーション開発者向け
機械学習周辺でのサーバーレス利用方法
下川 賢介

アマゾン ウェブ サービス ジャパン株式会社
シニア サーバーレス ソリューションアーキテクト
画面に映る資料の撮影などによる本セッション資料の転用を禁止しております
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

下川 賢介

アマゾン ウェブ サービス ジャパン株式会社
技術統括本部 レディネスソリューション本部
シニア サーバーレス ソリューションアーキテクト

AWS のサーバーレスサービスを担当
好きな AWS サービス: AWS Lambda

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

このセッションでお話しすること
• アプリケーション開発者と機械学習
•
•
•
•

機械学習のスキル不要で手軽に使えるAI サービス
サーバーレスで ML Ops
サーバーレスで 推論エンドポイント構築
推論 Lambda関数 のチューニング

• まとめ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS のミッション

全てのデベロッパーの方々の手に機械学習を

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

あらゆる規模や業界のお客様が
AWS 上で機械学習を実行しています
数万ものお客様が機械学習のワークロードに AWS を選択

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アプリケーション開発者と機械学習

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アプリケーション開発者のマインド
ビジネスにとって機械学習は効果的か？

どこに機械学習を適用すれば良いかを知るには、
プロダクトの本質的な価値を考える必要がある。

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アプリケーション開発者と機械学習

データを元に継続的に改善していくプロダクト設計が重要

• 機械学習は改善手法のひとつ
• 改善はイノベーションに繋がり、ビジネスを加速させる

プロダクトだけでなく、企業活動全体に広げられると良い
• サービス運用 / 障害対応
• 営業活動
• 採用 / 評価 etc…

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習の流れ

再学習へ

データ収集

モデルの学習

推論結果の考察

データ前準備

モデルの評価

推論

特徴量の作成

モデルのデプロイ

データ管理 / ETL

学習

まずは、ここからが
始めやすい！
予測
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習のスキル不要で
手軽に使えるAI サービス

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AI サービス

• データを用意するだけ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習の流れ

再学習へ

データ収集

モデルの学習

推論結果の考察

データ前準備

モデルの評価

推論

特徴量の作成

モデルのデプロイ

データ管理 / ETL

学習

まずは、ここからが
始めやすい！
予測
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習の流れ

再学習へ

データ収集

モデルの学習

推論結果の考察

データ前準備

モデルの評価

推論

特徴量の作成

モデルのデプロイ

データ管理 / ETL

学習

AI サービスで実装！
予測
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

API で手軽に使える機械学習

AI サービスを使えば、機械学習の深いスキルなしに 機械学習をアプリケーションに組み込める

VISION

Amazon
Rekognition

SPEECH

Amazon
Polly

TEXT

Amazon
Transcribe

Amazon
Comprehend

+Medical

+Medical

画像・映像系

Amazon
Translate

Amazon
Textract

SEARCH

CHATBOTS

PERSONALIZATION

FORECASTING

FRAUD

Amazon
Kendra

Amazon
Lex

Amazon
Personalize

Amazon
Forecast

Amazon
Fraud Detector

CONTACT CENTERS

Contact Lens
Voice ID
For Amazon Connect

自然言語系

時系列予測

レコメンド
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスサービスと組み合わせる

Amazon API Gateway

Amazon Comprehend

Amazon Textract

Amazon Lex

Amazon Transcribe

Amazon Polly

Amazon Translate

Amazon Rekognition

Amazon Kendra

AWS Lambda

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習 API を用いた、画像と動画分析
Amazon Rekognition を使用すると、数分以内に数百万の画像や動画を分析するなど、
手動では実行できないタスクに取り組むことができます

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習 API を用いた、商品の需要予測
Amazon Forecast は、機械学習を使用して精度の高い需要予測が可能

商品の需要

実際の需要 vs 予測の需要 ($ Millions)
過大な見積もりはリソースの無駄遣いに

過小見積もりは機会損失に

実際の需要

予測の需要

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習 API を用いた、音声 テキスト相互変換
Amazon Transcribe

Amazon Polly

Welcome to Tokyo.

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習 API を用いた、言語翻訳

Amazon Translate は、高速で高品質な言語翻訳を提供する機械翻訳サービス

Amazon Translate is a neural machine
translation service that delivers fast,
high-quality, and affordable language
translation. Neural machine translation is
a form of language translation
automation that uses deep learning
models to deliver more accurate and
more natural sounding translation than
traditional statistical and rule-based
translation algorithms. Amazon
Translate allows you to localize content such as websites and applications - for
international users, and to easily
translate large volumes of text
efficiently.

Amazon Translate は、高速、高品質、低
コストの言語翻訳を提供するニューラル
機械翻訳サービスです。ニューラル機械
翻訳は、ディープラーニングモデルを使
用して、従来の統計やルールベースの翻
訳アルゴリズムよりも正確で自然な翻訳
を提供する言語翻訳自動化の一形態です。
Amazon Translate では、ウェブサイトや
アプリケーションなどのコンテンツを海
外ユーザー向けにローカライズし、大量
のテキストを効率的に簡単に翻訳できま
す。
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon Translate による言語翻訳
記事を即座に多様な言語に翻訳してパブリッシュ

英語ニュース記事

入力

日本語記事

Amazon S3

AWS Lambda

Amazon Translate

アップロードされた
ドキュメントは
ストレージに保存

Lambda 関数が
トリガーされ、
Amazon Translate
APIを呼び出して
ドキュメント翻訳

記事を即座に多様な
言語に翻訳

アラビア語ニュース記事

中国語ニュース記事

…

出力

英語サイト

Amazon S3
翻訳結果を静的
ホスティング

アラビア語サイト

中国語サイト

…

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習 API を用いた、手書き文字の抽出
Amazon Textract は、スキャンされたドキュメントから
テキスト、手書きの文字、データを自動抽出

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon Textract による文字抽出と検索

入力

Amazon S3

納税申告書、クレジッ
ト明細、医療メモなど
のアップロードされた
ドキュメント画像

アップロードされた
ドキュメントは
ストレージに保存

AWS
Lambda

Lambda 関数が
トリガーされ、
Amazon Textract
API を呼び出して
ドキュメント分析
が開始

Amazon
Textract

出力

キーと値のペアや
テーブルなどの
テキストを自動的に
抽出

抽出データを任意の
ドキュメント管理
システムに統合

Amazon OpenSearch
Service *
抽出されたデータと
信頼スコアが、
ドキュメント検索を
可能にするために
インデックス付与
される

* Amazon Elasticsearch Service の後継サービス
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスで ML Ops

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習の流れ

再学習へ

データ収集

モデルの学習

推論結果の考察

データ前準備

モデルの評価

推論

特徴量の作成

モデルのデプロイ

データ管理 / ETL

学習

予測
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS での ML Ops の 構築例
Pull

Git Push

データサイエンティスト
開発者

AWS CodeCommit

学習・推論のコードが
含まれるコンテナを
レポジトリに置く

Image

AWS CodeBuild

Amazon Elastic Container
Registry (Amazon ECR)

推論エンドポイント作成

AWS Step Functions workflow

Amazon S3

生データは S3 に保存

AWS Glue

学習用データ

ワークフローの管理

Amazon S3

学習

デプロイ

Amazon SageMaker

前処理・変換後の
学習用のデータも S3 に保存

Model

学習済みのモデルは
S3 に保存される
Amazon S3
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ML Ops で必要になるワークフローロジック
Choice

Sequence

AWS Step Functions workflow

Parallel

AWS Step Functions workflow

AWS Step Functions workflow

Start

Start

Start

Upload RAW
file

Select image
converter

Process Photo

RAW to
JPEG

RAW to
PNG

Extract
metadata

Delete RAW file
Load in
Database

End

Unsupported
Type

End

Resize
image

Facial
recognition

Load in
Database

End

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ワークフローから直接 AWS サービスを利用
Compute

AWS Lambda

Application Integration

AWS Batch

Amazon Simple Notification
Service (Amazon SNS)

Data Science

Amazon EMR

Amazon SageMaker

Database

Amazon DynamoDB

CI/CD

AWS Fargate

Amazon Elastic Container
Service (Amazon ECS)

Amazon Simple Queue
Service (Amazon SQS)

Amazon Glue
AWS CodeBuild

Amazon Elastic Kubernetes
Service (Amazon EKS)

AWS Step Functions

Amazon Athena

APIs

Amazon API Gateway
Amazon EventBridge
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Step Functions Workflow Studio による
ワークフローの構築

Workflow Studio は、ビジュアルツールを
使用してワークフローをより迅速に開発

Data Science

Amazon EMR

Amazon SageMaker

Amazon Glue

Amazon Athena
https://aws.amazon.com/jp/blogs/news/new-aws-step-functions-workflow-studio-a-low-code-visual-tool-for-building-state-machines/
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS Step Functions Data Science SDK による
ワークフローの構築

AWS Step Functions Data Science SDK により、Pythonで前処理 - 学習 - デプロイ のワークフローを構築

https://aws.amazon.com/jp/about-aws/whats-new/2019/11/introducing-aws-step-functions-data-science-sdk-amazon-sagemaker/
https://github.com/aws/amazon-sagemaker-examples/
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスで 推論エンドポイント構築

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習の流れ

再学習へ

データ収集

モデルの学習

推論結果の考察

データ前準備

モデルの評価

推論

特徴量の作成

モデルのデプロイ

データ管理 / ETL

学習

予測
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習の流れ

再学習へ

データ収集

モデルの学習

推論結果の考察

データ前準備

モデルの評価

推論
推論

特徴量の作成

モデルのデプロイ
モデルのデプロイ

データ管理 / ETL

学習
学習

予測
予測
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習モデル構築の選択肢
•

•

•

AWS Marketplace でモデルを購入する
• SageMaker で利用できる 学習可能なモデル、推論用のエンドポイント
を時間単位で購入・利用できる

自前の学習用スクリプトを使う
• TensorFlow, MXNet, PyTorch, Chainer, scikit-learn の 学習・推論用
コンテナを提供
Amazon SageMaker ビルトインアルゴリズムを使う
• XGBoost，Factorization Machine, Object Detection, Semantic
Segmentation など

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS Marketplace から機械学習モデルを購入する
SageMaker上で使う機械学習モデルの
売買が可能。小売、メディア向けなど
200 以上のアルゴリズムが公開済み
アルゴリズム購入者：

Amazon SageMaker で学習ジョブおよび、
推論エンドポイント（バッチ推論ジョブも）

アルゴリズム販売者：

モデルの中身を秘匿してモデルの出品が可能

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon SageMaker による推論 API 構築

• ニーズにあわせて独自の機械学習サービスを実装する場合
Amazon SageMaker
Amazon SageMaker

モデル

Amazon API Gateway

https://aws.amazon.com/blogs/machine-learning/creating-a-machine-learning-poweredrest-api-with-amazon-api-gateway-mapping-templates-and-amazon-sagemaker/

学習

Jupyter
Notebook

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習でのコスト
ディープラーニングを用いたアプリケーションでは、
推論によって、計算コストの90％が発生。

https://aws.amazon.com/blogs/machine-learning/model-serving-with-amazon-elastic-inference/

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

推論エンドポイントのコスト効率について

• 推論エンドポイントを常時起動する場合のコストが気になる
• なぜ、AWS Lambda がコスト効率が良いか？

• 自動的にゼロへのスケール
• 1 ms 単位の課金
• サーバーのパッチ当てなどの管理はクラウドにおまかせ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習フレームワークのインストールサイズ
機械学習フレームワーク
Tensorflow
Pytorch
Scikit-learn
XgBoost

インストールサイズ
1.02 GB
559 MB
268 MB
238 MB

Zip形式の Lambda 関数のアーティファクト最大サイズは、250 MB

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS Lambda のコンテナサポート
• 10 GB デプロイパッケージ (最大、コンテナイメージのみ)
• 10 GB メモリ(最大)
• 6 vCPU(最大)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS Lambda による推論 API 構築

• Amazon SageMaker で学習したモデルやAWS Marketplaceで
購入したモデルを用いる
• AWS Lambda のアーティファクト内にモデルを入れ込む
•
•
•
•
•

リクエストに応じた課金
流量制限
自動的なスケール
WAFの適用
インフラの管理不要

AWS Lambda

モデル

モデル
モデル

Amazon API Gateway

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

推論 Lambda関数 のチューニング

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS Lambda の AVX2 拡張命令 (x86) サポート
•

計算集約型関数のパフォーマンス向上:

•
•
•
•

•

機械学習の推論

マルチメディア処理
HPC

金融モデル計算

AVX2 拡張命令セット

•

利用するためには自身のコードやライブラリが
AVX2 命令セットに最適化されている必要がある
ため注意

https://unsplash.com/photos/IMXhx6qhvf0
. Photo credit: Daniel Seßler.

Filter

Standard

With AVX2

Performance
Improvement

1. Bilinear

105 ms

71 ms

32%

2. Bicubic

122 ms

72 ms

40%

3. Lanczos

136 ms

77 ms

43%

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS Lambda のコールドスタート抑制
コンテナ
生成

デプロイ

パッケージ
ロード

パッケージ
展開

ランタイム
起動
初期化

暖機処理
(Provisioned
Concurrency)
Cold Start

関数・メソッド
起動

Warm Start

※ 追加費用がかかります

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まとめ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

機械学習の流れ
データ収集

再学習へ

モデルの学習

推論結果の考察

AWS Step Functions

AWS Lambda

データ前準備

モデルの評価

特徴量の作成

モデルのデプロイ

データ管理 / ETL

学習

推論

Amazon Translate

Amazon Rekognition

予測
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まとめ

• AI サービスで、AWS の機械学習を簡単に試すことが可能
• ビジネス課題から出発し、AWS の様々なサービスを組み
合わせて、顧客の価値に貢献する

• サーバーレスサービスを機械学習サービスと組み合わせる
とスケーラブルで高可用なサービスを構築できる
• プロダクトを改めて考え、価値を生む箇所に機械学習を

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ご清聴ありがとうございました
Kensuke Shimokawa

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Modern Applications Resource Hub にアクセス
豊富な日本語ガイドで皆様のモダナイゼーションの促進をサポート
•
•
•
•
•

AWS でモダンアプリケーションを構築する
モバイルアプリ、ウェブアプリを迅速に構築するには

AWS のコンテナサービスでモダナイゼーションを促進
サーバーレステクノロジーによる総所有コスト（TCO)
モダン Dev + Ops モデルの導入

その他にも ユースケースやアナリストレポートを豊富にラインアップ

https://bit.ly/3oVdKPV

Resource Hub はこちら »
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

OCTOBER 27, 2021

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

エンタープライズにおける
モダナイゼーションプロジェクトの進め方
松山 雄一郎

アマゾン ウェブ サービス ジャパン株式会社
マイグレーション＆モダナイゼーション事業開発本部
本部長

画面に映る資料の撮影などによる本セッション資料の転用を禁止しております
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

本セッションのゴール


AWS の考える既存システムのモダナイゼーションについて理解する



モダナイゼーションをサポートするプログラムを理解する

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

加速する業界の再定義

書店?

ホテル?

タクシー?

DVD?

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

組織の俊敏性を高め、迅速にビジネスの意思決定、
実行する能力がより重要な時代に
デジタルを駆使しスタートアップ企業が新たな市場を創造し、
計画を実行までの時間がさらに短くなっている。
• より伝統的な大企業も、組織の俊敏性を高め、変化に対応し、
新たな方向性を決め、迅速に実行する能力を構築する必要が
生じている。
•

迅速に意思決定、実行するためには、問題を分割し、
一つ一つの問題を頻度高く意思決定する必要がする
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

企業における ビジネス の変化はより”高頻度”に

変化しないことが基本

変化し続けることが当たり前

頻度
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

変化の頻度が少ない時代は、綿密に作成された
長期にわたる計画を作成することが重要

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

綿密、長期的な計画は、外部環境が時間とともに
変化しないことが前提だが。。。

プロジェクトの
スコープ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

変化の頻度が高い時代においては、自身も“高頻度”で
計画の立案、実行を継続する必要がある

TO

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

高頻度な意思決定を実現するためには、
高頻度な変化をサポートできるようにする必要がある

全てのIT環境を同一の環境(=クラウド)に用意することで、
より効率的に高頻度の意思決定をサポートすることが可能になる
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ビジネス視点からの進め方
〜または前提となる知識

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

DXするその動機は？
新規ビジネス？

DXしたい

はじめからクラウドで
Design/Build

ビジネスモデル/プロセス

クラウドメリット

クラウドらしい

の変化がある？

最大限享受

Design/Build

決まってないなら
対応が容易なものから
IT負債なんとかしたい

実施

対象は明確？
決まってない？

14

決まっているなら
個別対応（MF/商用Unix/
オフコン等）

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダナイゼーションで重要な評価ポイント
ビジネスの俊敏性とは

ビジネス俊敏性の評価項目

 「ビジネスプロセスを簡単に

 デプロイサイクル

変更可能」

 「ビジネス機能を簡単に追加/

変更/削除が可能」

 ビジネスデータの増減量
 ビジネス機能間の通信量
15
※各企業の経営戦略によって評価項目も異なる

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モノリス vs モダナイズ を表す特徴
職場で仕事

リモートワーク

 密結合

 疎結合

 オフィス、会議室

 自宅、カフェ、旅先

 管理職による指示命令

 社員の判断による職務遂行

 中央制御

 自立分散

 データ集中管理

 データ分散

モダナイゼーションとは、「コンテナやサーバーレスなどの最新技術も
使いながら、クラウド特性を活かしたアプリケーションにすること」
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダナイゼーションで重要な評価ポイント
ビジネスの俊敏性とは

ビジネス俊敏性の評価項目（例）

 「ビジネスプロセスを簡単に変

 デプロイサイクル

更可能」

 「ビジネス機能を簡単に追加/変

更/削除が可能」

 ビジネスデータの増減量
 ビジネス機能間の通信量
17
※各企業の経営戦略によって評価項目も異なる

マクロではビジネス視点、ミクロではプログラムコードのレベル
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダナイゼーション２つのアプローチ
ビジネス視点（マクロ）

技術視点（ミクロ）

① ビジネスモデル/プロセス/組織構造

① プログラム仕様書、プログラムコード

② ビジネス機能/ビジネスドメインを

② データ連携、インターフェイス部分に

などから開始

ブレークダウン

③ UML、DFD、BPMN、EA等の利用
④ 依存性の低い部分/容易な部分から

着手

などから開始

着目したブレークダウン

③ アプリケーションモニタリングツール

や、開発ツールが持つコードのリファ
クタリング機能などの利用

④ コンテナ化、サーバーレス化等、個々

の実装に関した考慮と検討を実施

⑤ 依存性の低い部分/容易な部分から着手

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モノリスとマイクロサービス

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ビジネスプロセス（モノリシック）
製造業の一般例

受注

お客様

製品使用

製品使用
修理等
サポート依頼

企業
複数工場
物流
サポート
営業支援系
基幹系

•
•
•
•
•

受注情報
生産依頼
生産手配
生産活動
配送

•
•
•
•
•

サポート依頼
部品配送
工場作業
修理配送
配送





20

工場を海外展開する、閉鎖する、
アウトソースする、などに簡単に
対応できますか？
物流会社を変えたいときに対応で
きますか？
サポートセンターの拠点変更や仕
組みの変更に耐えられますか？
製造する製品変更や生産管理の変
更は可能ですか？

保守系

 １箇所で問題が発生すると全停止
 プロセス・機能が１つ変わるだけで全停止と修正・検証が必要
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ビジネスプロセス（モダナイズレベル１）
組織で分割した場合

お客様

製品使用
受注

企業
複数工場

受注情報

生産活動/配送

修理等
サポート依頼

配送

工場作業

配送

物流
部品配送

サポート
サポート
依頼情報

営業支援系
基幹系
保守系

修理配送

生産依頼

生産手配

 ビジネスプロセスと組織構造が類似で、変化対応が
困難
 プロセス/機能が変わると関連処理、同一組織の機能
を停止して対応

サポート
依頼情報

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ビジネスプロセス（モダナイズレベル2）
業務機能で分割した場合

お客様

製品使用

受注

修理等
サポート依頼

企業

修理作業

複数工場

生産管理

物流
サポート
営業支援系
基幹系

配送

受注
生産依頼

配送

物流

修理配送
部品配送

生産手配
生産活動

受発注/CRM
サポート
依頼情報

保守系

CRM／保守

 問題発生時に影響範囲は業務ドメインに限定
 プロセス/機能が変わっても影響範囲を限定可能
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ビジネスプロセス（モダナイズレベル3）
単一業務機能で分割した場合

製品使用

お客様

受注

企業
複数工場

受注情報

生産活動

配送

配送

修理等
サポート依頼

工場作業
配送

物流
部品配送

サポート
サポート
依頼情報

営業支援系
基幹系

修理配送

生産依頼

生産手配
サポート
依頼情報

保守系

 機能単位が小さく、追加/変更/削除が容易
 プロセス/機能も柔軟な変更が容易
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モノリス vs モダナイズ
モノリス

困難
大きい

モダナイズレベル１

モダナイズレベル２

24
機能変更の容易さ（デプロイ頻度・速さ）

機能変更の影響（テスト範囲・工数）

長い

障害停止の合計時間

広い

障害の影響範囲(BIA)

モダナイズレベル３

容易
小さい
短い
狭い
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダナイゼーション進め方（一例）
マクロなビジネス視点からの進め方

Step1

Step2

Step3

Step4

Step5

• ビジネスプロセス、企業組織構造の調査
• ある程度のレベルの深さまで分析
• ビジネスドメイン/サービス境界を定める
• インターフェイス方式を決めて分離
• 必要に応じてStep2~4を繰り返す

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

移行プロセスにおけるModernize
Modernize（主にRefactor/Re-architecture）
モダナイズは、Migrate & Modernize のフェーズにおいて、移行作業または移行後の一
部として実行されます。モダナイズ・プロジェクトは、アプリケーションごとに次の領
域で構成されます。
作業領域

内容

設計

アプリケーションを最新化するための動機の要因を理解します。モダナイズするた
めの労力、時間、コストの量を評価します。最新化オプション（リプラットフォー
ム、リファクタリング、再購入など）によるコスト削減の評価

移行

移行パターン、ターゲットアプリケーションアーキテクチャとAWSサービス、運用、
カットオーバー計画とプロセス、移行ツールと検証テスト計画

統合

AWS管理プラットフォームを使用するようにアプリケーションを開発または変更し
ます。

検証

機能、パフォーマンス、信頼性、セキュリティ、コンプライアンス

カットオーバー

ロールバック計画と共にRTOとRPOを満たしていること
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

クラウド移行プロセス

アセスメント

 現行とクラウドのTCO比較
 クラウド移行準備状況のアセスメント
 アプリケーション移行パスの整理

移行計画立案









詳細移行計画
クラウドチーム組成
人材育成
ガイドライン
運用モデル
セキュリティ、コンプライアンス
PoC / パイロット移行

マイグレーション
＆
モダナイゼーション





コスト最適化
移行
モダナイゼーション
コスト最適化

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ITトランスフォーメーションパッケージ 全体像
現行システムの
クラウドへの
移行実現性を評価

CCoE コアメンバ (＝目利き) の育成と組織立ち上げ
→利用を推進するためのガイドラインを作成
→パイロットプロジェクトの移行で成功体験を

①評価
経済合理性
評価
(TCO 評価)

移行
準備状況
評価

移行方法
の検討

移行完了後は
次のステップへ

②移行計画立案
CCoE
立ち上げ
支援
技術
トレーニング
組織
立ち上げ
支援

③移行

評価

企画

切替

立案

発見

設計
運用
モデル

ビジネス 情報収集 移行難易度 システムごと 移行
システム間
価値の定義 と分析 /パターン
の分析 タイミング
連携

RFP 作成
(支援)

パイロット
移行

利用ガイドライン作成 (支援)
インフラ
標準化

移行計画
立案

セキュリ
ティ

運用
モデル

Party

体験型
ワーク
ショップ

移行実施

検証

統合

構築

コスト最適化支援
モダナイゼーション支援
MAP クレジットによるコスト削減

CSMによるプロジェクト推進サポート

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

移行方式（移行戦略） 7”R”

構成の決定

vMotion

インストール

自動化

リプラットフォーム
ディスカバー／アセスメント
／アプリケーションの優先順位
付け

(Lift & Reshape)

移行先プラット
フォームの決定
（OS version, DBエ
ンジン等）

リテイン
そのまま保持

パッケージや
SaaS の購入や
ライセンス契約

リタイヤ／廃止
アプリケーションや
インフラアーキテクチャの再設計

設定

デプロイ

移行ツール
の使用

妥当性
確認

基盤となる
インフラの
変更

移行

運用

手動インストール
セットアップ

アプリ ライフサイクル管理 インテグ
ケーション
ALM / SDLC
レーション
開発
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ExperienceｰBased Acceleration
ExperienceｰBased Acceleration（EBA）は、AWSへのマイグレーションとモダナイゼーショ
ンをハンズオン、アジャイル、集中作業型のワークショップで組織能力を高め、加速する変革
手法です。

組織力の強化
サイロ化した組織の壁を打破、
自律した作業モデルを体得。

マイグレーションと
モダナイゼーションの高速化
分析中心からアクション中心の行動
へ移行。

マイグレーションと
モダナイゼーションに必要な
能力を強化

徐々に複雑なプロジェクト遂行を経
験。

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

「型」に応じたワークショップの実施

EBAではワークショップを「パーティ」と呼びます

マイグレーション
パーティー

クラウド基盤構築

アプリケーション
のクラウド移行

「型」の分類

プラットフォーム
パーティー

モダナイゼーション
パーティー

アプリケーション
モダナイゼーション

ポートフォリオ
パーティー

ピープル
パーティー

移行全体計画
費用効果算定

クラウドネイティブ
対応組織への変革

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

EBAの流れ
EBA(Experienced Based Acceleration)はマイグレーション体験ワークショップです。
お客様と AWS から組閣されるグループ(パーティ)で実際の移行を体験することで、移行の推進能
力や組織変革の能力を身につけて頂くことができます。
EBAの流れ
全体計画
目標設定
C-レベル

EBA

MRA

Executive
Alignment

Migration
Party

Party

モダナイゼー
ションの実行

Modernization
Party

移行ポートフォ
リオ全体の計画

Portfolio
Party

成果

4週間〜

4週間〜
スプリント

準備

4週間〜

4週間〜
スプリント

準
備

スプリント

新しい働き方
と組織の計画

マスマイグレーションの
計画と承認

ビジネスケースの策定

スプリント
3～5日
経験

準備・参加者
・範囲の特定

より複雑なアプ
リの移行

Platform

全体アセ
ス

エグゼクティ
ブのコミット

お客様社内

クラウド活用基
盤の構築・簡単
なシステムの移
行

People
Party

Executive
Decision

本
格
展
開

準
備

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まとめ
• 組織の俊敏性を高め、変化の早い時代に対応するためにモダナイゼーションが

浸透しつつある

• モダナイゼーションは技術のみならずビジネス的な側面の考慮が必要
• モダナイゼーションはマイグレーションの一部であり、評価、移行計画立案、

移行＆モダナイゼーションというステップですすめる

• それらのステップを AWS ITXパッケージが包括的にサポート

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ご清聴ありがとうございました
Yuichiro Matsuyama
yuichima@amazon.co.jp

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Modern Applications ResourceHub にアクセス
豊富な資料で皆様のモダナイゼーション ジャーニーをサポート
•
•
•
•
•

日本語ガイド : AWS でモダンアプリケーションを構築する

日本語ガイド : モバイルアプリ、ウェブアプリを迅速に構築するには
AWS のコンテナサービスでモダナイゼーションを促進
サーバーレステクノロジーによる総所有コスト（TCO)
モダン Dev + Ops モデルの導入

など その他にも ユースケース資料やデータ資料がラインアップ

https://bit.ly/3oVdKPV

ResourceHub はこちら »
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

オンプレミスでも ECS！
Amazon ECS Anywhere で
ハイブリッドなコンテナワークロードを実現する
濱 真一

アマゾン ウェブ サービス ジャパン株式会社
ソリューションアーキテクト
画面に映る資料の撮影などによる本セッション資料の転用を禁止しております
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

自己紹介

Shinichi Hama
Twitter/@track3jyo
Solutions Architect
Amazon Web Service Japan
西日本のお客様の支援 & コンテナ技術のあれこれ
<最近好きな AWS サービス>
AWS App Runner

AWS Lambda

Amazon DynamoDB

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

本セッションは…
想定聴講者
•

コンテナ技術や Amazon ECS の特性をなんとなく理解している・触ったことがある

•

オンプレミスと AWS のハイブリッドなワークロードが今後必要になってくる方

•

Amazon ECS Anywhere の仕組みや、どういうユースケースで活用できるのかを知りたい

ゴール
•

Amazon ECS Anywhere が解決する課題や特性を知り、導入手順を知る

•

AWS とオンプレミスでコンテナアプリケーションをハイブリッドに動かすユースケースや設計
をイメージできるようになる

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アジェンダ
• Amazon Elastic Container Service (ECS) 概要
• Amazon ECS Anywhere とは
• ECS Anywhere を活用するユースケース例
• ECS Anywhere 以外のオンプレミスで実行できるオプション

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon Elastic Container Service (ECS) 概要

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

なぜ多くの企業がコンテナ活用に
向かっているのか
• Run Anywhere
• Portability
• Isolated processes

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS のコンテナ関連サービス
オーケストレーション

イメージレジストリ

ホスティング

フルマネージド

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

イメージレジストリ

オーケストレータ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon ECS: Powerful simplicity

Amazon ECS

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon ECS と各種 AWS サービスの高度な連携
Amazon VPC AWS Cloud Map

Amazon Simple
AWS
AWS Systems Manager
Parameter Store
Storage Service(S3)
Secrets Manager

Elastic Load AWS App Mesh
Balancing(ELB)

ネットワーキング

Secrets/Configs

Amazon EventBridge
Amazon
CloudWatch

AWS Step Functions

Job実行

AWS X-Ray

モニタリング

Amazon ECS
NFS

AWS CodePipeline AWS CodeCommit

AWS Identity and
Amazon GuardDuty
Access Management（IAM）
AWS CloudFormation

セキュリティ

IaC
AWS CloudTrail

Amazon Elastic
File System(EFS)

AWS CodeBuild

CI/CD

AWS CodeDeploy

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ワークロードに応じたデプロイオプション
Customer Data Center
Region

Amazon EC2

AWS Fargate

AWS Outposts

Customer managed infrastructure

AWS Wavelength

AWS Local Zones

ECS Anywhere

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon ECS Anywhere とは

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ECS Anywhere に対するお客様のニーズ
オンプレミスでコンテナを管理したい理由

一貫性のある
オペレーション

設備投資の回収

コンプライアンス
要件

データに近接した
ワークロード

オンプレミスとクラ
ウドのそれぞれでア
プリケーションを運
用する際にオペレー
ションモデルを分け
たくない

クラウドへ移行す
る前に償却する必
要があるデータセ
ンターに設備投資
を行なっている

市場や業界の規制に
より、インフラスト
ラクチャの大部分を
自身で所有する必要
がある

大規模なデータセッ
トを低レイテンシで
処理するために、
データの近くにアプ
リケーションをデプ
ロイする必要がある

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ECS Anywhere: あらゆる場所でコンテナを実行

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ECS Anywhere: ゲームチェンジャー
クラウド上のフルマネージドな
コントロールプレーン

Amazon ECS

オンプレミスでコンテナ
オーケストレーターの実行や
アップデート、メンテナンスが不要

ツールやガバナンスの一貫性

運用している環境によらず、
すべてのコンテナアプリケーションに
同じツールや API を使用

オンプレミス

お客様管理の
仮想マシン、
ベアメタルサーバー

Amazon EC2
AWS Outposts

Amazon EC2:

AWS Fargate

AWS リージョン
AWS Local Zones
AWS Wavelength

ハイブリッドフットプリントの管理

オンプレミス環境でアプリケーションを
実行し、移行の際はクラウドへの拡張が容易に

オンプレミス

クラウドでの管理

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ECS Anywhere の主なユースケース

ハイブリッド

モダナイゼーション

IoT

クラウドとオンプレミスで
一貫したワークロードを実行する

オンプレミスの
既存アプリケーションを
コンテナ化

エッジロケーションでの
データ処理

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

「このコンテナを外部インスタンス上に
「このコンテナを EC2 で
10個デプロイしてください」

オンプレミスデータセンター
サーバー/VM

※ 一部互換性のないパラメータはあり
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

必要に応じたデプロイオプションの使い分け
オンプレミスデータセンター

AWS Cloud

サーバー/VM

Region

Amazon ECS

ECS Agent

SSM Agent
OS

AWS Fargate

Amazon EC2
AWS Outposts

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

オンプレミスにデプロイする際の基本的な制限
2021/09/09 現在の制限

• bridge、host、none ネットワークモードを使用可能
• awsvpc ネットワークモードは未サポート
• ECS Service Discovery は未サポート
• サービスのロードバランシング機能は未サポート
• タスク定義での GPU 要件の指定は未サポート
• …etc
https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/ecs-anywhere.html#ecs-anywhere-considerations
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

オンプレミスで管理されるインスタンスの前提条件
•

AWS API サービスエンドポイントへのアウトバウンド接続
•
•

•

エンドポイントとコンテナランタイムスタック
•
•
•

•

インターネット
PrivateLink または VPN を経由した VPC
Systems Manager (SSM) エージェント
ECS エージェント
Docker engine

インストールスクリプトを提供

サポートされている Linux ディストリビューション/システムアーキテクチャ
•
•
•
•

Ubuntu 18.04, 20.04
RHEL7/CentOS 7/8
Fedora32/33, Debian9/10, openSUSE Tumbleweed, SUSE Enterprise Server 15
x86_64 および ARM64
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ECS Anywhere 外部インスタンスの登録プロセス
• 基本的にはオンプレミスのサーバーでインストールスクリプトを実行するのみ

activation-id, activation-code: AWS 外にあるマシンをマネージドインスタンスとして
アクティベーションするための秘密情報
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ECS Anywhere の仕組み
オンプレミスデータセンター

AWS Cloud
Region

サーバー/VM
Container
ECS Agent

Container

SSM Agent

Container

Amazon ECS

OS

サーバー/VM
Container

Systems Manager

ECS Agent

Container

SSM Agent

Container
OS

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ECS Anywhere の仕組み
オンプレミスデータセンター

AWS Cloud

サーバー/VM

Region

Container

Docker engine

Container

Amazon S3

Amazon ECS

インスタンスの登録

Container

コンテナランタイム
として使用

タスクロール
認証情報の提供

ECS Agent

CloudWatch

Systems Manager
アクティベーション ID と
コードの送信

IAM

インスタンスロール
認証情報の受け取り

インスタンスロール
認証情報の提供

SSM Agent
OS

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ネットワーク切断時の挙動
• 切断中
•

タスクは引き続き実行される（終了しない限り）

•

新しいタスクを開始することはできない

•

タスクをスケールインすることはできない

• 再接続時
•

コントロールプレーンがインスタンスの状態を再評価

•

タスクロールの認証情報をリフレッシュ

•

PENDING 状態のタスクを配置・開始

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ECS Anywhere を活用するユースケース例

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

オンプレミス・AWS のハイブリッドなワークロード
オンプレミスデータセンター

AWS Cloud
5

2

3

Amazon
SQS

Amazon
CloudWatch

Amazon
ECS

Task

Task
4

Amazon
EFS

AWS
Fargate

AWS
IAM

1

NFS
share

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

オンプレミスから AWS へのシームレスな移行
オンプレミスデータセンター

AWS Cloud
Region

VM

アプリケーション
プロセス
OS

データベース

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

オンプレミスから AWS へのシームレスな移行
オンプレミスデータセンター

AWS Cloud
Region

Amazon ECS

サーバー/VM

ECS Agent

SSM Agent
OS

データベース

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

オンプレミスから AWS へのシームレスな移行
オンプレミスデータセンター

AWS Cloud
Region

Amazon ECS

サーバー/VM

ECS Agent

SSM Agent
OS

AWS Fargate

データベース
Amazon Aurora

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

オンプレミスから AWS へのシームレスな移行
オンプレミスデータセンター

AWS Cloud
Region

Amazon ECS

サーバー/VM

ECS Agent

SSM Agent
OS

AWS Fargate

データベース
Amazon Aurora

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

オンプレミスから AWS へのシームレスな移行
AWS Cloud
Region

Amazon ECS

AWS Fargate

Amazon Aurora

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ECS Anywhere 以外の
オンプレミスで実行できるオプション

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

これまでの EKS デプロイオプション
オンプレミス

クラウド

Amazon EKS + AWS Outposts

Amazon EKS + Amazon EC2

お客様

お客様

Amazon EKS + AWS Fargate

コントロールプレーン
コンピューティング
データプレーン
サポート

フルマネージド
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS 外部での Kubernetes クラスターの実行
EKS によってデプロイされた同一のオープンソース
Kubernetes と依存関係のディストリビューション
Amazon EKS Distro
一般提供

EKS Distro に基づくクラスター作成と管理のための
ツールセットを提供
Amazon EKS Anywhere
2021/09/08 一般提供開始！

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現在の EKS デプロイオプション
オンプレミス

クラウド

EKS Distro

EKS Anywhere

コントロールプレーン

お客様

お客様

コンピューティング

お客様

お客様

データプレーン

お客様

お客様

サポート

EKS + Outposts

EKS + EC2

お客様

お客様

EKS + Fargate

コミュニティ

フルマネージド
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon EKS Distro
Amazon EKS が使用する
Kubernetes ディストリビューション
アップストリームで採用されている
セキュリティパッチ、ツール、構成
Amazon EKS のサポートバージョン
に対して修正をバックポート

Kubernetes コントロールプレーン
Scheduler

Controller
Manager

Cloud Controller
Manager

API Server

etcd

etcdctl

CoreDNS

Metrics server

Kubernetes データプレーン

信頼性と安全性
公開されているツールと環境変数で
再現可能なビルド

kubelet

Pause Container

CNI

kubectl

CSI Sidecar

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

EKS Distro に含まれるもの / 含まれないもの
含まれる
Upstream Kubernetes

etcd & etcdctl

CoreDNS

Upstream CNI

CSI sidecar container
含まれない
• eksctl
• AWS オフィシャルの Kubernetes プラグイン: CNI および CSI
• AWS Controllers for Kubernetes (ACK)
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

EKS Anywhere
お客様のデータセンターにおける既存のハードウェア上で、
EKS と同じ一貫性のある体験で Kubernetes を作成・管理

EKS に使われている安全
かつ安定したテスト済み
のコンポーネントを使用
してクラスターを実行

オープンソース標準の
クラスターライフサイクル
管理ツールに基づいて構築

プロダクションクラスター
の準備を加速する
コンポーネントをバンドル

お客様が管理する
コンピューティング環境
の活用

オンプレミスで EKS Distro クラスターのデプロイやライフサイクルを管理
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

オープンソース標準に基づくクラスター構築
異なる環境において一貫した体験を提供

一般提供
Kubernetes Cluster

Cluster API Provider
3rd party CNI

eksctl config
Cluster API

Bare Metal
2022年サポート予定

EKS Console
Integration

Amazon EKS-A はオンプレミスの Kubernetes クラスターに対して
ツール、アドオン、サポートを提供

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

さいごに - お伝えしたかったこと • ECS Anywhere を活用することで、お客様の管理するインフラストラ

クチャ上でコンテナを実行・管理することが可能

• クラウド上のフルマネージドなコントロールプレーンで管理可能

• さまざまなワークロードや目的で、ECS Anywhere を活用
• オンプレミスとAWSでのハイブリッドなワークロード
• コンテナ化から始めるクラウドマイグレーションの選択肢
• エッジコンピューティングでの処理実行

皆様のさまざまなワークロードで ECS Anywhere をご活用ください！
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

次のステップ
Containers from the Couch / [Japanese] Introducing "Amazon ECS Anywhere”

https://youtu.be/Tqh0TLdZLvk
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

次のステップ
• ECS Workshop - ECS Anywhere –：
https://ecsworkshop.com/ecsanywhere/

• Blog / Amazn VPC と接続可能なおうち Amazon ECS

Anywhere クラスターの構築：

https://aws.amazon.com/jp/blogs/news/building-an-amazon-ecs-anywhere-home-lab-withamazon-vpc-network-connectivity/

• Amazon ECS Anywhere ドキュメント：

https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-anywhere.html

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ご清聴ありがとうございました
Shinichi Hama

track3jyo

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Modern Applications ResourceHub にアクセス
豊富な資料で皆様のモダナイゼーション ジャーニーをサポート
•
•
•
•
•

日本語ガイド : AWS でモダンアプリケーションを構築する

日本語ガイド : モバイルアプリ、ウェブアプリを迅速に構築するには
AWS のコンテナサービスでモダナイゼーションを促進
サーバーレステクノロジーによる総所有コスト（TCO)
モダン Dev + Ops モデルの導入

など その他にも ユースケース資料やデータ資料がラインアップ

https://bit.ly/3oVdKPV

ResourceHub はこちら »
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

OCTOBER 27, 2021

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスで変わる プロジェクトと
コストにまつわる 5 つのこと
杉 達也

アマゾン ウェブ サービス ジャパン株式会社
事業開発マネージャ - サーバーレス
画面に映る資料の撮影などによる本セッション資料の転用を禁止しております
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

内容についての注意点
•

本資料では2021年6月時点でのサービス内容および価格に基づいたスライドや説明になっています。最新の

•

資料作成には十分注意しておりますが、資料内の価格とAWS公式ウェブサイト記載の価格に相違があった場

•

情報はAWS公式ウェブサイト(http://aws.amazon.com)にてご確認ください。
合、AWS公式ウェブサイトの価格を優先とさせていただきます。

AWS does not offer binding price quotes. AWS pricing is publicly available and is subject to change in
accordance with the AWS Customer Agreement available at http://aws.amazon.com/agreement/. Any
pricing information included in this document is provided only as an estimate of usage charges for AWS
services based on certain information that you have provided. Monthly charges will be based on your
actual use of AWS services, and may vary from the estimates provided.

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

本セッションの目的
• サーバーレスを採用することで影響を受ける

プロジェクトとコストに関わることに焦点を当てる

• 何が変わるのか
• どう変わるのか

• 先人のお客様はどうしているのか

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

コスト :

クラウド利用費

+ 作業の手間

（設計/構成工数、開発工数、維持管理工数…）

+ 作業時間

（習得時間、設定完了待ち、判断待ち…）

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレス の効能

作業量の
削減

＋

時間の
短縮

＋

利用費の
適正化

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスによるお客様の効果例

5x
1/3
2ヶ月

1-2日

従来より生産性が向上
アプリ展開を加速化
コード量の減少（従来比）
= 生産性向上、保守改善
スケール、冗長化などの
考慮不要で短期実装可能
簡易な機能追加は短期で
実装・デプロイ可能

1/6
1人

安定した定常稼働により
運用の労力を大幅に短縮
運用を 1 人で楽に実施
機能改善に注力可能

9:1

“開発:保守/運用” の作業
比率が 1:9 から大きく改善

1/10

アイドル時間のリソースが
解放され、利用費が最適化
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

キヤノン様におけるサーバーレス効果

AWS Summit 2017 「Going Serverless with AWS」より
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

1

クラウド利用費と見積もり

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスの利用費の構造
サーバー確保型

• 処理量を予測して
環境を確保
• 確保分の課金

• 使わないときは
（意識して）解放

課金

• 自分で冗長化

負荷

サーバーレス

• 処理要求に応じて
自動で環境を確保

• 負荷なし = ゼロ課金

• ms 単位の実行時間
課金（AWS Lambda）
• 自動で冗長化

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスの課金体系がもたらすこと
利点

• クラウド利用費の適正化
•
•

初期投資が小さい（または ゼロ）

万が一利用者がつかない自体になってもサーバー維持費が
ないため、ランニングの費用が発生しない

• 企画承認を加速化
•

上記理由により、サービス維持のための費用上の懸念が小さく、
チャレンジしやすい

懸念

• 見積もり/費用予測が難しい?
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

欲しい見積もりは?
• 概算見積もり: プロジェクト企画、検証フェーズに進むための予算感の把握
•

欲しいのはこんなレベル?

会員制 ECサイト
• アクティブ会員 100,000
• Weekly でクーポンを発行
→ 月額で $1,000? $10,000?

IoT バックエンド
• デバイス 50,000 機器が接続
• 利用者はアプリからコマンド操作
→ 月額で $1,000? $10,000?

• 正式見積もり: 本番稼働および今後の費用予測のための計算
初年度 : $xx,000
次年度 : 初年度の 30% 成長で $yy,000

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

なぜ、サーバーレスの費用見積もりは難しいのか?
• サーバーレスアプリケーションの場合
利用する
AWS サービスの数

AWS サービスごとの
費用計算パラメータ

??? 設計これからのときにこんなこと聞かれても…

AWS サービスごとの
費用計算ロジック

ルールが複雑

• 従来型アプリケーションの場合
一定レベルの負荷を
処理可能な台数

過去の経験で知っていること

今回の負荷の規模

単純な計算

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アイデア

要件
EC サイト
アクティブ会員 50,000

「会員制 Web サイト」の例より
- 本ページ下方にある計算詳細はひとまず
無視して、結果だけ利用する
- アクティブ会員 10,000 → 約 $200/月
$200 ✕ ( 50,000 ÷ 10,000 ) = $1,000

※ あくまで概算見積もりです
クーポン配信やセールスキャンペーン
などの施策をうつケースでは追加の
考慮が必要となります

https://aws.amazon.com/jp/cdp/ec-serverless/

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

概算と精緻な見積もりに対する戦略
概算
見積もり

正式
見積もり

• 類似ユースケースでの費用感を
もとに算出
• AWS 営業チームにご相談ください

• パイロットでの実利用費を
もとに算出

パイロット実施
• 典型的な構成パターンで実施
• 目的
- 実現可能性の確認
- 基礎データの取得
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

2

プロジェクト方式

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスのその裏側で…
物理配置の考慮からの脱却

設計

開発・テスト

運用・保守

• サイジング工数
• 冗長化作業

障害対応
工数を削減

• マルチ AZ 構成作業
• 増強・縮退作業

内部利用インスタンス保守からの脱却

障害/
増強テスト
工数を削減

• OS/ソフトウェアバージョン管理工数
• ポート管理、OS ユーザー管理/監視

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

プロジェクトのどの工程に効いてくるのか?
従来型
開発

設計
（容量計画・構成確定）

計画・概要設計

サイジング
 可用性設計
 将来予測/計画


詳細設計

サーバー設定
 環境整備


モダンな
開発

負荷予測

計画

設計

コード開発
 テスト


開発

開発

……

コード開発
 機能テスト




…

実践しながら調整していく



運用・保守
…

可用性テスト

市場投入時間を短縮

▲ Production



開発・テスト
サーバー
管理
パッチ作業

…

ソフト
ウェア
保守

…

サーバー監視
 負荷変動対応
 ソフトウェア保守

サーバー
増強

…



▲ Production

サーバー監視

…

ランタイム
Ver up

…

ランタイム
Ver up

次の新しいことへ
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

マネージド/サーバーレスによる変化
計画・概要設計

詳細設計

開発

計画 設計

…

実プロジェクトベースの PoC

…

…

実践しながら調整していく

従来型
•
•
•
•
•

ウォーターフォール

十分な検討を経て実施

アプリとインフラチーム
利用費: 確保型

システム品質: それぞれに確保

クラウドネイティブ型
•
•
•
•
•

アジャイル
Try & Error

アプリチームの拡充化
利用費: 実績ベース

システム品質: 一定レベルを担保
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

参考: 経済産業省「DXレポート2」

出典「DXレポート2」 経済産業省 2020/12/28
https://www.meti.go.jp/press/2020/12/20201228004/20201228004-3.pdf
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

3

スキル習得工数

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

スキル習得における戦略
効果的なスキル習得で迅速に実プロジェクト実施へ
• ベース知識を理解するための材料を活用
 ハンズオン、自己学習ガイド、セミナー…

• 実プロジェクト（パイロット）で経験しながら習得
 実プロジェクト（パイロット）は典型的な

ユースケースパターンからはじめてもよい

• 進め方に不安があれば AWS にご相談を
• いくつか経験した後、さらなる高みへ:

エキスパート向けトレーニング

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスの始め方
• サーバーレスの自己学習ガイド

- ハンズオンから始まる典型的なステップ

amzn.to/2ZGL3ZS

• サーバーレス技術情報のまとめサイト

- 技術資料、開発環境、Tips...

amzn.to/2WeZuQl
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

実戦でよく使われるユースケースパターン

https://aws.amazon.com/jp/serverless/patterns/serverless-pattern/
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

NTT 東日本様

AWS DEVDAY 2020 にて講演

コロナウィルス影響で
急務のシステム依頼 !!
本格
検討へ

実装
@

• 勉強会で爆速開発の
話を聞いていた
• Web で同内容を確認できた

今回はこれを選択

• Web でやりたいこと/形を選び
それをベースに実装を開始

• 5 日で実装、緊急リリース

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

具体的なプロジェクトを実戦形式で
プロトタイピング

プロフェッショナルサービス

具体的な内容とともに担当営業にご相談ください
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

三越伊勢丹ホールディングス様
•
•

DX の基盤となる「ビジネスプラットフォーム」の構築
基幹システムとフロントサービスとの間の一元的な橋渡し役として
データやバックエンド機能を柔軟・容易かつ横断的に活用可能にする

「… 当初はどのように進めるべきかと悩みまし
たが、まずは先達に学ぼうと AWS Prototyping
Program を活用しました。AWS のエンジニア
とともに、課題をともに解決していくという経
験を通じて、私たちは AWS の開発手法を 1 か
ら学ぶことができました。このプログラムでは、
PoC 用のデータではなく実データを用いるため、
エンジニアにとっても “ジブンゴト” として
理解が早かったと思います」

https://aws.amazon.com/jp/solutions/case-studies/mitsukoshiisetan-leaders-voice/
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

エキスパート向けトレーニングコース（有償）

https://www.aws.training/SessionSearch?courseId=53785
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

4

高負荷要件での検討事項

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

秒間レベルで処理量が高い要件
秒間の処理が 10,000 に近い、または超えるようなケース
例えば…
•
•

アクセス集中が予想されるサービス（セールスキャンペーン、イベント対応、
人気商品の予約開始、チケット販売…）
大量の新規ユーザーに対する SMS 認証、SMS 通知
AWS サービス固有で設定されている
処理能力の上限設定に到達
↓
上限緩和（クォータ引き上げ）申請で
上限を増加させる
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

クォータとは
従来型システムにおけるサーバーのキャパシティ上限のようなもの

•
•
•
•

•
•
•

•
•

目的

コードや設定の不備による利用費急騰からの保護
間違った利用によるリソース枯渇の防止

代表的なクォータ

AWS Lambda 同時実行数

Amazon API Gateway 秒間処理量（TPS）

サポート経由で申請ください

その前に負荷テストによる実績が必要になります

:

同時実行
1,000 設定の場合
さらなる実行が
ブロックされる

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

起こりがちな誤解/間違い
Lambda 同時実行数 ≠ TPS
高負荷要件: 多くの場合、一つの
関数の処理時間は短い（300msなど）
300ms

机上の計算で緩和を申請
• 要件: 秒間 3,000 アクセス

机上の計算で必要な上限を算出し
申請 → 思わぬ部分がネックに
!!

:

:

:

同時実行
3,000
9,000+ TPS

1秒

CACHE

!!

1/3〜1/2 の負荷で End-to-end の
動作の正常性を確認した後、申請
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

高負荷要件の場合
• 早い段階で AWS にご相談いただくのが

全体の工数と時間の短縮化の観点でベスト

 要件・費用・作業をトータルで見て、よりよいアーキテクチャを

一緒に検討させてください

 クォータ引き上げをスムーズに行うためのガイドもいたします

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

5

チューニング/最適化

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

費用の最適化のために
システムとしてのパフォーマンスの向上

≒
利用費の適正化

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

費用の最適化のために
メモリ設定の適正化
• 少し大きなサイスのメモリ設定の
ほうが費用の観点で最適なことも

関数の整理
→ 対処すべき対象の絞り込み
• エラー、タイムアウトの検出
• 使ってない関数の把握
• タグ付けによる費用感の把握

狙いをつけてチューニング
• コードの改善
• 非同期呼び出しの検討

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

費用最適化のためのメモリ設定チューニング
AWS Compute Optimizer

• マネジメントコンソールまたは

CLI から利用

• 過去 14 日間に 50 回+ の呼び出し履

歴に基づくメトリクスなどを分析す
ることで推奨を策定

AWS Lambda Power Tuning (リンク)

• Serverless Application Repository

からデプロイして利用可能

• 比較したいメモリサイズを指定して

内部計測し、結果を比較

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

関数の整理
• 使ってない関数の把握
•
•
•

実行情報をもとに検出

The Curse of Dead AWS Lambda
Functions (Partner: EPSAGON)
Automating the discovery of unused
AWS Lambda functions (AWS blog)

• タグ付けによる費用の可視化
•
•

関数にタグ付け（コスト配分タグ）

関数単位ではなく、アプリケーションや
プロジェクト、部門単位での費用を識別

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS Trusted Advisor
• 要: サポート契約

• 費用に関係する検出

 エラー率が高い AWS Lambda 関数

 過度にタイムアウトが発生している AWS Lambda 関数

• リスク検出

 非推奨のランタイムを使用する AWS Lambda 関数

 VPC Lambda 関数における 非マルチ AZ 設定の検出

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスで変わる、プロジェクトとコストにまつわる 5 つのこと
1. クラウド利用費と見積もり
2. プロジェクト方式
3. スキル習得工数

4. 高負荷要件での検討事項
5. チューニング/最適化

“

Change is the law of life. And those who look only to the
past and present are certain to miss the future.
変化とは人生の法則です。 過去と現在しか見ない人は、
確実に未来を見失います。
ジョン・F・ケネディ

”

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ご清聴ありがとうございました

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Modern Applications Resource Hub にアクセス
豊富な日本語ガイドで皆様のモダナイゼーションの促進をサポート
•
•
•
•
•

AWS でモダンアプリケーションを構築する
モバイルアプリ、ウェブアプリを迅速に構築するには

AWS のコンテナサービスでモダナイゼーションを促進
サーバーレステクノロジーによる総所有コスト（TCO)
モダン Dev + Ops モデルの導入

その他にも ユースケースやアナリストレポートを豊富にラインアップ

https://bit.ly/3oVdKPV

Resource Hub はこちら »
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレステクノロジー
による総所有コスト (TCO)
～ サーバーベース
テクノロジーとの比較
2021 年 7 月
Deloitte Consulting
著者 :

Gary Arora、Akash Tayal、Rakinder Sembhi

1

Deloitte
Industry Insight

現在、サーバーレス戦略を導入する企業が増えています。実際、調査対象の
組織の 75% 以上が、サーバーレス戦略を実装済みであるか、今後 2 年以内に
実装する予定であると答えています (451 Research)。現在は、サーバーレス
テクノロジーの活用の幅を広げるお客様も増えています。AWS ユーザーは、
2021 年にサーバーレスコンピューティングサービスとして AWS Lambda を
2019 年の 3.5 倍実行しています (Datadog)。
ユーザーのリクエストに基づいてコンピューティングとメモリを動的かつ自動
的に割り当てる機能によって市場投入までの時間を短縮する機会がもたらされ
るため、サーバーレス戦略の人気が高まっています。また、インフラストラク
チャ管理に手間がかからないため、環境設定工数と保守費用の削減が可能にな
ります。これにより、組織は IT 予算と開発リソースをオペレーションからイノ
ベーションへと方向転換することができます。サーバーレステクノロジーを使
用した従量課金制モデルにより、大規模で固定的な設備投資から柔軟なオンデ
マンド消費へと移行できます。これによりユーザーは、ちょうど必要な量のコ
ンピューティングリソースを動的にスケーリング、カスタマイズ、プロビジョ
ニングできるようになります。その結果、ビジネス上の俊敏性も強化できます。

ただし、入力データ/アクセス量は変化するため、サーバーレスモデルで利用費
用を見積もることは簡単ではありません。また、導入をご検討中のお客様の多
くは、サーバーベースまたは仮想マシンベースのコンピューティングをサー
バーレスオプションと比較することにより、コストを最適化したいと考えてい
ます。当社では 2019年に、サーバーレスアプリケーションとサーバーベースア

プリケーションの両方の総保有コストを比較するためのフレームワークを導
入しました。その際、インフラストラクチャコスト、開発コスト、およびメン
テナンスコストを考慮に入れました。その分析で、サーバーレスアプローチでは
インフラストラクチャのコストが高くなる可能性がある一方で、開発とメンテ
ナンスのコストを節約できるため、TCO は大幅に低くなると結論付けました。

2

2019 年以降、AWS は、Amazon EC2 を使用したサーバーベースのコンピュー
ティングと、AWS Lambda などを使用したサーバーレステクノロジーの両方
にコスト最適化を導入しています。このような最適化を組み込んで分析を見
直したところ、現在の AWS Lambda は元の分析よりもコスト効率が良くなっ
ており、サーバーレステクノロジーでの TCO はサーバーベースのクラウド実
行モデルの場合より低く、38 ～ 57% の節約を実現できるという結論に至り
ました。
AWS Lambda の新しいコスト最適化
1.

AWS Lambda は現在、Compute Savings Plan に含まれています。これは、お客様が 1 年
または 3 年の期間を対象として一定のコンピューティング使用量をコミットする (10

USD/時間など) ことによって、最大 17% 節約できる柔軟な価格設定モデルです。
2.

AWS Lambda の実行時間の課金モデルは、粒度が 100 ミリ秒から 1 ミリ秒に変更されま

した。これによって、ほとんどの Lambda 関数のコストを縮小できます。このことは、持

続時間の短い Lambda 関数で特に顕著であり、お客様は最大で 70% 節約することが可能と
なります。

3.

AWS Lambda では、最大 10 GB の RAM と 6 基の vCPU に相当する関数サイズがサポー

トされるようになりました。これにより、お客様はリソースに制約がありコンピューティ
ング負荷が高いワークロードのコストを削減できます。

4.

AWS Lambda AVX2 のサポートにより、コンピューティング負荷が高くベクトル化が可能

5.

AWS Lambda は現在、AWS Compute Optimizer に含まれています。これにより、お客様

なワークロードを最大 30% 節約できます。

は効率的ではない構成を簡単に特定して修正できます。

3

サーバーレス
TCO フレーム
ワークの紹介

サーバーレステクノロジーは、運用上の責任をクラウドサービスプロバイ
ダーに効果的に移行します。組織はこの考え方を、コンピューティング、ス
トレージ、統合、ネットワークなど、アプリケーションスタック全体に適用
しています。サーバーレスの運用モデルでは、プロビジョニング、パッチ適用、
管理するサーバーがありません。さらにインストール、メンテナンス、また
は運用するソフトウェアもありません。結果、サーバーレスモデルでは、
スケーラビリティ、アジリティ、柔軟性が向上し、開発者は付加価値のある
中核的なタスクに集中できます。サーバーレステクノロジーを活用する多く
の組織では、製品とサービスのリリースをより頻繁に行うことが可能です。
市場投入までの時間の短縮と収益成長の加速度を高めることができるので
す。
当社では、 Fortune 100 に入るさまざまな業界の企業との幅広い経験に基づ
いて、サーバーレス TCO フレームワークを開発しました。これを使う
と、Amazon EC2 などのサーバーベースコンピューティングと比較して、
AWS Lambda や Amazon DynamoDB などのサーバーレステクノロジーを使
用した新しいアプリケーションを実行する場合の正確なコストを評価できま
す。サーバーレス TCO フレームワークは、3 つの主要なコストコンポーネン
ト ( インフラストラクチャ、開発、メンテナンス ) で構成されています。

4

1.

インフラストラクチャコストは、クラウドサービスプロバイダー ( この場
合は Amazon Web Services (AWS)) でアプリケーションワークロードをホ
ストすることから発生する料金です。

このホワイトペーパーの詳細セクションでは、 次の 2 つの Deloitte の顧

客の例を紹介しています。

a. 交通機関の顧客における AWS Lambda 関数と Amazon EC2 インスタン
スの比較

b. ヘルスケアの顧客における Amazon DynamoDB の使用と EC2 での
NoSQL の実行の比較

2.

開発コストは、クラウドベースのサービスで新規アプリケーションを構

築および開発する際の、本番運用以前に発生する費用です。。

このホワイトペーパーの詳細なセクションでは、開発時間と平均的な開発

リソースのコストを見積もる Deloitte の業界経験を取り上げています。

3.

メンテナンスコストは、EC2 インスタンスとサーバーレスアーキテ
クチャを比較したアプリケーションの実行とメンテナンスに関連する
日々の運用コストです。

ホワイトペーパーのこのセクションでは、従来のセキュリティ、パッチ適
用、サービスチケット、テストチームなど、さまざまなコンポーネント全
体にかかるメンテナンスコストに関する典型的な Deloitte のベンチマーク
を示しています。
ビジネスチャンスへの迅速な対応、インフラストラクチャキャパシティの
より良い計画など、サーバーレス戦略の採用には組織上の利点があります
が、このホワイトペーパーでは上記のコスト要素のみに焦点を当てていま
す。

5

インフラストラクチャ

これは最初の主要なコストコンポーネントで、AWS クラウドプラットフォー
ムでアプリケーションワークロードをホストするために消費するコンピュー
ティング、ストレージ、およびネットワークサービスで構成されています。
インフラストラクチャコストは、アプリケーションワークロードの「実行コ
スト (Cost to Run)」とよく呼ばれています。
•

•

•

Amazon EC2 環境のコンピューティングコストは、インスタンスが 1 秒あ
たりに処理できるリクエストの最大数、ピークトラフィック ( ウェブ、ア
プリケーション、データベース ) に対応するために必要なサーバーの
数、およびインスタンスがアクティブな状態になっている時間の長さに基
づいて計算します。
サーバーレスモデルでは、インフラストラクチャコストは実際の実行時間
に基づきます。つまり、アプリケーション所有者は、コードが実際に実行
さ れ、その効果に寄与したサーバーの使用にのみ課金されます ( 例えば
AWS Lambda では、リクエストの数とリクエストの期間 ( ミリ秒 ) に基づ
いて課金されます )。

さらに、サーバーレスアーキテクチャには高可用性/耐障害性、負荷分散、
セキュリティサービスなどの主要なプラクティスがサーバーレスアーキテ
クチャに含まれていますが、これらのサービスはサーバーベースのクラウ
ド実行環境では追加料金がかかりました。

インフラストラクチャコストを分析するために、以下の 2 つの顧客の例を使
用します。

6

ケーススタディ 1: AWS Lambda と Amazon EC2 を評価して
いる交通機関
概要

この交通機関を利用する平均的な通勤者は約 2 時間の移動時間を費やし、その
間にオンラインでチケットを予約したり、Wi-Fi に接続して移動状況をリアルタ
イムで確認したりしています。これが年間数百万人の乗客、数百の目的地、お
よび数千のルート分の掛け算で発生しています。こうした乗客を支える交通機
関は通常、サポートと更新に費用がかかるレガシーシステムを苦労して運用し
ています。こうしたレガシーシステムでは、ますます予測不能で応答時間が遅
くなり、レポートが遅延して陳腐化する可能性があります。このような組織
は、インフラストラクチャ管理の負担を軽減するためにサーバーレスモデルに
移行する傾向が強くなってきています。これは、必要なときにのみ実行するマ
イクロサービスのホストを利用することで可能になり、必要なデータを迅速か
つシームレスに生成します。

この組織がチケット予約システムを Lambda 関数で実行するか、サーバーベー
スの EC2 インスタンスで実行するかを評価することで、企業にかかるコストを
比較しました。

7

コスト計算

この交通機関は、すべての利用者の予約とチケットを処理するために、サー
バーレスコンポーネントの中でも AWS Lambda を選択しました。次のテーブ
ルに示すように、このアプリケーションは 1 日で約 150 万件のトランザク
ションがあり、2 つの Lambda 関数間のインフラストラクチャコストを合わせ
て月あたり約 1,142 USD を消費していました。アーキテクチャ要件と分離され
たマイクロサービスのベストプラクティスガイダンスのため、2 つの個別の
Lambda 関数が必要でした。1 つはダウンストリームの顧客のチケット処理用
で、もう 1 つはデータ処理と検証用です。同じアプリケーションをサーバー
ベースのインフラストラクチャで実行するためにデプロイした場合は、3 つの
i3en.large EC2 が必要になると想定しました。このアプリケーションを実行す
るためのコストは合計で 1,088 USD になります。
EC2 スタックと Lambda 関数の月額コンピューティングコストは、次のように比較できます。
コンピューティングコスト
予約およびチケット
発行アプリケーション
( 平均応答時間 : 1 秒 )

データ処理および検証アプリケーション
( 平均応答時間 : 2 秒 )

合計月額費用

サーバーベースのクラウド (EC2)

サーバーレス (Lambda)

3 x i3en.large、VPC、ロードバランシング

512 MB、150 万件のリクエスト/日

544 USD

384 USD

544 USD

758 USD

1,088 USD

1,142 USD

月額コスト差

54 USD

サーバーレスのコストが、
サーバーベースのソリューションの
コストよりも 5% 高い

8

ケーススタディ 2: Amazon DynamoDB と Amazon EC2 で

ホストする MongoDB を評価しているヘルスケア組織
概要

ヘルスケア組織では、数百万人分の利用者と数十億件の請求に関するデータを

保存しています。毎日のように数百万件の請求情報 (新規情報または既存情報
への更新) がデータベースに入力されます。これらの情報は、1 日を通して毎秒
500 件のリクエストでデータを読み取る複数のダウンストリームアプリケー
ションに、API で公開されます。このような組織の IT 部門の課題は、動的な照
会能力にいわば無限のキャパシティを提供することにあります。オンプレミス
またはサーバーベースの環境を使用している場合は、予測できない負荷が発生
したときに、スループットを維持しながら自動的にスケーリングする機能が失
われます。
この組織がデータ照会を一般的な NoSQL データベースである MongoDB を
EC2 インスタンスに構築して実行するか、DynamoDB で実行するかを評価する
ことで、企業にかかるコストを比較しました。

9

コスト計算

こ の ヘ ル ス ケ ア 組 織 で は、 サ ー バ ー レ ス の key-value お よ び ド キ ュ メ ン
ト デ ー タ ベ ー ス で あ る Amazon DynamoDB を 採 用 し ま し た。Amazon
DynamoDB では、1 日あたり 10 兆件を超えるリクエストを処理でき、ピー
ク時で 1 秒あたり 2,000 万件を超えるリクエストに対応できます。顧客が
1 秒あたり約 500 件の読み取り/書き込みクエリを実行する必要があるとい
う単純な仮定に基づくと、DynamoDB を実行するためのインフラストラク
チャコストは 1 か月あたり約 657 USD でした。サーバーベースのAmazon
EC2 で実行するためにデプロイされた同様のデータプラットフォームでは、
プロビジョニングされた IOPS SSD と共に、NoSQL DB を実行する3 つの
d2.xlarge EC2 が必要であると想定しました。以下の表は、このシナリオで
の 2 つのプラットフォームの比較分析を示しています。
NoSQL DB を EC2 で実行した場合と DynamoDB を使用した場合の月額コンピューティング
コストは、次のように比較できます。
サーバーベースのクラウド
(MongoDB)

サーバーレス
(DynamoDB)

d2.xlarge x 3、2 TB のプロビジョンド IOPS SSD

毎秒 500 件の読み取り/書き込み、2 TB のストレージ、5 KB/ 項目

2,475 USD

657 USD

月額コスト差

(1,818 USD)

サーバーレスのコストが、サーバーベースの
ソリューションのコストよりも 73% 低い

1 つ目の事例では、サーバーベースとサーバーレスのインフラストラクチャ
で交通業務のワークロードを実行するための月額コストに大きな差はあり

ません。2 つ目の事例では、月額コストの点ではサーバーレスデータベース
の方が明らかに優れています。ただし、アプリケーションを実行する場合
の総コストを理解するには、インフラストラクチャコストだけでなく、以
下に示すように開発コストおよびメンテナンスコストも比較する必要があり
ます。

10

開発

2 番目の主要なコストコンポーネントである開発は、アプリケーション構築の

事前計画に必要な時間と労力を意味する、本番運用以前に発生するコストで
す。これはよく、クラウドへの移行の「達成コスト (Cost to Achieve)」と呼ば
れています。Amazon EC2 インスタンスを使用する際には、アプリケーション
が今後の利用量の変動においても対応できるように、アーキテクチャをスケー
リングする方法を決定しておく必要があります。ただし、サーバーレス環境で
は、需要の変動に対応できるようにキャパシティーが自動的にスケーリングさ
れます。予想できることですが、EC2 インスタンスの規模を小さく見積もる
と、ピーク時に十分なキャパシティーを提供できないという課題に直面しま
す。また、EC2 インスタンスの規模を大きく見積もると、十分に活用されてい
ないキャパシティーによって、必要以上の費用がかかります。
下の図は、実際の利用状況に追従するように動的にスケーリングするサーバー
レスの利点を示しています。
インフラストラクチャコスト

顧客の不満
大規模な資本支出

クラウド

実需

需要

機会費用
時間

11

Amazon

EC2

環境では、環境は、見通しの予測に基づいて固定容量を確保

し、サーバーレスアプリケーションほど動的には拡張しません。これによ
り、キャパシティーが過剰にプロビジョニングされた場合に支出 ( 機会費用 )

が無駄になり、キャパシティーが使用要件を満たしていない場合は顧客の不
満が生じる可能性があります。
•

EC2 インスタンスを使用する開発者は、大規模な場合に IT アーキテク
チャが直面する可能性のある課題の評価にかなりの時間を費やし、どのよ
うなトレードオフを事前に行う必要があるかを判断する必要があります。
>

•

この事前計画にかかったコストには、関係するリソースの数と、リ
ソースと時間の両方のコストが含まれます。

必要なライセンスとソフトウェアの購入に加え、ネットワークとロー
ドバランサーのセットアップ、オートスケーリングのプロビジョニン
グ、可用性の計画 (適切な数のアベイラビリティーゾーンの選択) など
に費やされた開発者の時間により、追加費用が発生します。

12

サーバーレスアプリケーションでは、イベントベースのアーキテクチャを活

用しており、開発チームはデプロイアーキテクチャをあまり堅実に計画をせ
ずとも、アプリケーションの開発を開始できます。以下のテーブルは、サー
バーレスとサーバーベースの EC2 インスタンスでアプリケーションをプロ
ビジョニングするために必要な時間の短縮によって期待できる、一般に節約
可能な金額をまとめたものです。平均して、サーバーレス環境は、サーバー
ベースの環境と比較して、プロビジョニングに要する時間が 68% 短縮され
ます。これは、アプリケーションごとにひと月あたり数百 USD の節約に相
当します。1
サーバーレス (AWS Lambda) と比較したサーバーベース (EC2) の 1 回限りの開発コスト
開発

サーバーベース

サーバーレス

差額

デプロイに要する日数

～ 25 日間

～ 8 日間

～ 17 日間

本番運用前の開発コスト

38,300 USD

12,300 USD

26,000 USD

月額 費用

640 USD

205 USD

(435) USD
サーバーレスのコストが、
サーバーベースより 68% 低い

年間のフルタイム人員稼働コスト (FTE コスト) を 5 年償却想定で計算した月額分
•

•

•
•

新しいコンピューティング/ストレージのデプロイに要する日数

o 従来型 : 3 人の開発者で 4 ～ 5 週間かかる

o サーバーレス : 3 人の開発者で 8 ～ 9 日間かかる
FTE レート 12 万 USD/年、8 時間/営業日

o 開発費: 3 人の開発者で 8 時間/日

o 月額費用: 5 年間で償却されると仮定

新規アプリケーション - アプリケーションの移行費用は不要
o 適切な人材が存在すると仮定、開発者の採用/トレーニングに追加費用なし
ステートレスアプリケーションの構築

o 常にメモリ使用量が多いアプリケーションではない
o 常に CPU が高いアプリケーションではない

•

1

o ニアリアルタイムのアプリケーションではない - 証券取引所での実行などではない
アプリケーションは EC2 または Lambda にデプロイ可能

IDC:Generating Value Through IT Agility & Business Scalability with AWS Serverless Platform

13

メンテナンス

3 番目の主要なコストコンポーネントであるメンテナンスは、アプリケーショ

ンが運用環境にデプロイされた後の継続的なタスクに費やされる時間とリ
ソースを考慮に入れます。これはよく、アプリケーションの「サポートコス
ト (Cost to Support)」と呼ばれています。メンテナンスコストは、開発者が
次の 4 つの分野で費やす時間として分類できます。

1. アプリケーションのプロビジョニングとスケーリング

2. セキュリティの実装 (新しいセキュリティポリシーを適用した AMI の再作成)
3. パッチ適用とオペレーティングシステムの更新

4. 新機能の配信/追加、監視、ログ記録、検証、テストなどの継続的なアプリケー
ションの運用

企業の組織とアプリケーションの性質によって数値は異なりますが、Deloitte
の推定では、アプリケーション開発者はアプリケーションのプロビジョニン
グ、セキュリティの実装、およびパッチ適用と OS の更新に平均して月に 8～
10 時間費やしています。Amazon EC2 サービスを実行する場合、アプリケー
ションの監視、ログ記録、検証、およびテストに月にさらに 40 時間費やして
います。
AWS Lambda や Amazon DynamoDB などのサーバーレスサービスを使用す
ると、サービスがクラウドプロバイダーによって完全に管理されるため、
これらのメンテナンスタスクのほとんどは不要になります。これにより開発
者は、サーバー自体の再起動と再構成に焦点を当てることなく、ビジネスを
生み出し構築するためのコア機能の開発に時間とリソースを集中的に使うこ
とができます。

14

•

•

サーバーベースの Amazon EC2 モデルでは、チームはサービスチケット

を開く必要があり、パッチ適用チームは環境にパッチを適用するために開
発者に連絡していました。これらすべてが開発アクティビティの遅れにつ
ながる可能性がありました。
AWS Lambda を使用するサーバーレスモデルでは、このタイプのパッチ
適用とその他の関連するアクティビティがバックグラウンドで行わ
れ、コア開発には影響しません。

さらに、サーバーレス実装は多くのセキュリティルールをデジタル化できる
ため、より安全になり、例えば専任チームによってファイアウォールライセ
ンスのプロビジョニングやホストのスキャンを処理するといったような、特
別な人的介入/リソース要件が不要になります。次のテーブルは、アプリ開発
者がアプリケーションメンテナンスにかける可能性のある追加時間 ( 月あたり
の時間数 ) をまとめたものです。

アプリケーションポートフォリオ全体のサーバーベース (EC2) vs サーバーレス(Lambda) の
継続的なメンテナンス作業
メンテナンスコスト

サーバーベースのクラウド ( 時間 )

サーバーレス ( 時間 )

プロビジョニングとスケーリング

8

1

セキュリティの実装

8

1

パッチ適用と OS の更新

8

1

継続的なアプリケーションの運用

40

8 ～ 32

アプリケーションのメンテナンスに
かかる月額開発コスト

4,096 USD

704 USD ～ 2,240 USD

月額コスト差
削減率 % (EC2 からサーバーレスに移行した場合 )

(3,392) USD ～ (1,856) USD
45% ～ 80%

前提 :
年間 FTE コストから計算した月額分の費用
• FTE レート 12 万 USD/年、64 USD/時間

15

機能強化

このホワイトペーパーの最初のリリース以降、サーバーレスサービスとサー
バーベースのサービスは、どちらも進化してきました。サーバーベースの
サービスでは、ほとんどの機能強化が、効率的な料金モデル (EC2 Instance
Savings Plans、Compute Savings Plans など )、およびハードウェア (機械
学習用、グラフィック負荷の高いワークロード用、企業向け商用パッケー

ジアプリケーションのための大容量メモリ配備、効率的なネットワーキン
グ用などといった目的別で調整された新しいインスタンスタイプ) に関する
ものです。これらの効率的な料金設定の一部は AWS Lambda にも導入され
ていますが、サーバーレスサービスに対する機能強化のほとんどは、新機
能 (AWS Lambda の Provisioned Concurrency 機能、Amazon CloudFront を使
用したエッジコンピューティング、Amazon EventBridge を使用したイベン
トバスの導入、コンテナイメージのサポートなど ) の提供開始に伴うもので
す。これらの機能強化によって、イベント駆動型アプリケーション、機械
学習推論ワークロードなど、新しいユースケースにサーバーレスコン
ピューティングが利用しやすくなっています。

16

まとめ

ここまでのセクションでは、2 つの Deloitte 顧客のユースケースで TCO フ
レームワークを用いて Amazon EC2 インスタンスとサーバーレス型サービス
による新規アプリケーションを比較しました。インフラストラクチャコストの
みを考慮した場合、EC2 インスタンスでアプリケーションを実行する方が
費用効果が高くなります。ただし、開発コストとメンテナンスコストを考慮す
ると、AWS Lambda や Amazon DynamoDB などのサーバーレステクノロジー

を介してアプリケーションを実行する方が格段に安くなります。どちらのユー
スケースでも、顧客企業はコスト削減を実現するためにサーバーレスアーキテ
クチャで構築することを決定しました。次のテーブルは、両方のユースケース
での合計コストをまとめたものです。

ヘルスケア組織

交通機関

インフラストラクチャコスト
( ドル/月 )

開発コスト ( ドル/月 )

メンテナンス費用 ( ドル/月 )

総コスト ( ドル/月 )

EC2

Lambda

EC2

サーバーレス

1,088 USD

1,142 USD

2,457 USD

657 USD

差額

54 USD

差額

(1,818) USD

640 USD

205 USD

640 USD

205 USD

差額

(435) USD

差額

(435) USD

4,096 USD

2,240 USD

4,096 USD

2,240 USD

差額

(1,856) USD

差額

(1,856) USD

5,824 USD

3,587 USD

7,193 USD

3,102 USD

差額

(2,237) USD

差額

(4,091) USD

サーバーレスのコストが、
サーバーベースのソリューションの
コストよりも 38% 低い

サーバーレスのコストが、
サーバーベースのソリューションの
コストよりも 57% 低い

17

そのため、Amazon EC2 のようなサーバーベースのクラウド環境でアプリケー
ションの実行・運用コストを考える際、AWS Lambda や Amazon DynamoDB
などのサーバーレスサービスと比較して、インフラストラクチャコスト、開
発コスト、およびメンテナンスコストを含むアプリケーション実行・運用

の総コストを考慮することが重要です。これらは、アプリケーションの実行
コスト、達成コスト、サポートコストとも呼ばれています。単独では、これ
らのコストコンポーネントのそれぞれが総コストの不完全な全体像を提供す
る可能性があるので、正確な総所有コストに到達するには、3 つのコストコ
ンポーネントすべてを包括的に比較する必要があります。

ルールの例外

サーバーレステクノロジーへの移行には多くの利点がありますが、すべての
アプリケーションがサーバーレスアーキテクチャに適しているわけではあり
ません。テクノロジースタックをきちんと意識して、サーバーレス機能を
コスト効果の高い方法で構成することでメリットを得ることが大切です。以
下に要点をまとめます。
•

•

•

•

可変容量と高いスケーラビリティ要件を持つアプリケーションは、サー
バーレス戦略の良い候補です。

外部の処理に呼び出しを行う必要があり、その外部 API やサービスコー
ルの処理時間が長いアプリケーションで Lambda を利用する場合、外部
呼び出しの完了までの待ち時間分の費用を払い続けることになるため、
サーバーレス戦略の理想的な候補とはなりません。
サーバーレス戦略は、ウェブ、モバイル、IoT アプリ、リアルタイム分
析、データ処理に最適です。

サーバーレス戦略は、長時間実行される計算タスク、リレーショナル
からNoSQL へのデータ移行、大量のディスク容量または RAM を必要とす
るアプリケーション、および SSH サーバーアクセスを必要とするアプリ
ケーションには最適ではありません。
18

低速

ワークロード
イベント駆動型

サーバー

低

支出

変動

従量課金制

キャパシティ

サーバーレス

アプリケーションの再構築
低
高
柔軟性とスケーラビリティ

一定

計算型

デプロイに要する時間

高速

前払い制の課金モデル

高

要約すると、サーバーレスアプリケーションは、クラウドプロバイダーに管
理を任せられるため、メンテナンスと継続的な運用に費やす時間を短縮でき
ます。そのため、専任の運用チームの役割を革新させることができます。
サーバーレスアーキテクチャは、無限のスケーラビリティと組み込みの高可
用性も提供します。これは、サーバーベースの環境では追加の作業とコスト
がかかりました。プラットフォーム全体のインフラストラクチャコストのみ
を比較すると、サーバーベースのモデルの方が費用対効果が高いと判断する
可能性があります。ただし、サーバーレスモデルの追加のメリットとコスト
削減を考え合わせると、アプリケーションと全体的な組織構造を構築して
サーバーレスアーキテクチャを効果的に活用することで、組織は大幅に節約
できると考えられます。
執筆協力者 :

19

この出版物には一般情報のみが記載されており、Deloitte は、この出版物により、会計、ビジ
ネス、金融、投資、法律、税、またはその他の専門的なアドバイスやサービスを提供するこ
とを意図していません。この出版物は、そのような専門的なアドバイスやサービスに代わる
ものではありません。また、ビジネスに影響を与える可能性のある決定や行動の基礎として
使用しないでください。ビジネスに影響を与える可能性のある決定や行動を行う前に、資格
のある専門アドバイザーにご相談ください。Deloitte は、この出版物に依拠した者が被った損
失につき一切責任を負いません。
Deloitte について
Deloitte は、英国の非公開有限責任企業である Deloitte Touche Tohmatsu Limited ( 以下「DTTL」)、
そのメンバー企業のネットワーク、およびそれらの関連会社の 1 社または複数の会社を指します。
DTTL とその各メンバー企業は、法的に別個独立の組織です。DTTL (「Deloitte Global」とも呼ば
れています ) は、クライアントにサービスを提供していません。米国では、Deloitte は DTTL の米
国のメンバー企業、米国で「Deloitte」の名義を使用して運営している関連会社、およびそれぞ
れのアフィリエイトの 1 社または複数の会社を指します。特定のサービスは、公会計の規則およ
び規制の下でクライアントの証明に利用できない場合があります。Deloitte のメンバー企業のグ
ローバルネットワークの詳細については、www.deloitte.com/about をご覧ください。
Copyright © 2021 Deloitte Development LLC. All rights reserved.

20

OCTOBER 27, 2021

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サービスメッシュと
AWS App Mesh
荒木 靖宏

アマゾン ウェブ サービス ジャパン株式会社
プリンシパル ソリューションアーキテクト
コンテナスペシャリスト

画面に映る資料の撮影などによる本セッション資料の転用を禁止しております
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アジェンダ
アプリケーションフローとアーキテクチャの変遷
サービスメッシュによるマイクロサービスアーキテクチャ
AWS App Mesh について

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アプリケーションフローと
アーキテクチャの変遷

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モノリスでのアプリケーションフロー
Application server

Service

Service

Service
Databases

Service router

Service

Service

Service

Service

Service

Load
Balancer

Message Queues

External
Services

開発速度に問題が生じる
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

マイクロサービスによるアプリケーションフロー

Service

Service

Service
Databases

Service router

Service

Service

Service

Service

Service

Message Queues

Load
Balancer

External
Services

マイクロサービスそれぞれが通信先を制御するのか？
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中央集権的なマイクロサービス

Service

Service

Service
Databases

Service router

Service

Service

Service

Service

Service

Message Queues

Gateway

External
Services

全てを司るゲートウェイを通せばいい？
そこがボトルネックにならないか？遅延は？
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

分散されたマイクロサービス

Service

Service

Service
Databases

Service router

Service

Service

Service

Service

Service

Message Queues

Gateway

External
Services

全てを司るゲートウェイは制御情報の流布だけを行う
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サービスメッシュによる
マイクロサービスアーキテクチャ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サービスメッシュとは
アプリケーションレベルの通信を、アプリケーション自身が制御するのではなく
インフラストラクチャーで制御できるようにする技術
アプリケーションが行う通信制御
•
•
•

HTTP 通信のリトライやタイムアウト
通信のトレーシングやログ、メトリクスの取得
TLS を使用した暗号化通信

Node.js

http/tcp

Java

http/tcp

Go

http/tcp

Ruby

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サービスメッシュとは
アプリケーションレベルの通信制御を、サービスメッシュの基盤で行うので、
アプリケーションに組み込む必要がなくなる

サービスメッシュ基盤

Node.js

http/tcp

•
•
•

Java

HTTP 通信のリトライやタイムアウト
通信のトレーシングやログ、メトリクスの取得
TLS を使用した暗号化通信

http/tcp

Go

http/tcp

Ruby

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サービスメッシュが求められるようになった背景
•

現代のシステムは 複数の言語、アーキテクチャ、アプリケーションで構成

•

クラウドにより多様な環境が簡単に作成できるように

•

マイクロサービスアーキテクチャの採用

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

例: 多様なアプリケーションが通信を行うシステム
•

チームごとに最適な技術を選択してアプリケーションを動かす

•

プログラミング言語だけでなく、VM やコンテナなど様々なコンピューティング
プラットフォームを選択できる
チーム A
Node.js

VM

チーム C
チーム B

Go
コンテナ

Java
コンテナ

Ruby
VM
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

全てのアプリケーションに 同じような通信の仕組みが必要
•

信頼性の確保
リトライやタイムアウト、暗号化通信の実装

•

可観測性の確保
メトリクスやトレース、ログの出力と収集

チーム A
Node.js

VM

チーム B

チーム C

Go
コンテナ

Java
コンテナ

Ruby
VM
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ライブラリによる通信制御の共通化
チーム A

チーム B

Java

Node.js

チーム C

Go

Ruby

通信の仕組みを共通ライブラリとして実装、配布
共通基盤チーム
共通ライブラリ
Node.js

Java

Go

Ruby

•
•

リトライやタイムアウト、暗号化通信の実装
メトリクスやトレース、ログの出力と収集
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

共通ライブラリの導入における課題
チーム A
Node.js

チーム B

Java

チーム C

Go

Ruby

• 共通ライブラリを入れると依存関係が衝突する
• 言語ごとにライブラリを実装する必要があり負担が大きい

アプリケーション開発者・共通基盤チーム共に運用負荷が増大する
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

解決法：アプリケーションから通信処理を分離
Java

Node.js
Proxy

Proxy

Proxy
アプリケーション間の通信をプロキシして、通信制御を行うプロセス

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サービスメッシュの仕組み
プロキシをコントロールプレーンで管理
=> アプリケーションレベルの通信制御をインフラストラクチャ側で管理可能に
サービスメッシュ基盤

Control plane

Node.js

http/tcp

Java

http/tcp

Go

http/tcp

Ruby

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS App Mesh とは
Envoy を管理するコントロールプレーンを提供するサービスメッシュ

Control plane

Node.js

http/tcp

Java

http/tcp

Go

http/tcp

Ruby

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS App Mesh

サービスメッシュを管理するコントロールプレーンを提供する

アプリケーションレベルの通信を
ネットワークモデルとして定義
Control plane

ネットワークモデルを Envoy の
設定に変換して配布

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS App Mesh のネットワークモデル

1. 通信元のアプリケーションは、通信先をサービスディスカバリーで
発見してリクエストを送信
2. リクエストがロードバランサーに到達
3. ロードバランサーが、複数の通信先にリクエストを振り分け
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS App Mesh のコア機能

Envoy による
Traffic Shaping
機能を備えた
クライアントサイド
ロードバランサー

•
•
•
•
•
•

Service Discovery
Health Checks
Timeouts
Retries
Circuit Breakers
HTTP routing
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ネットワークモデルとアプリケーションの関係

Amazon EC2

AWS Fargate
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS App Mesh の動作イメージ

Application
container
Amazon ECS タスク

http/tcp

Application
container
Amazon ECS タスク

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS App Mesh の動作イメージ: Envoy proxy の導入

Application
container

Envoy
container

Amazon ECS タスク

http/tcp

Envoy
container

Application
container

Amazon ECS タスク

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS App Mesh の動作イメージ:

ネットワークモデルとの関係

Application
container

Envoy
container

Amazon ECS タスク

http/tcp

Envoy
container

Application
container

Amazon ECS タスク

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS App Mesh の動作イメージ: トップレベルの概念

Application
container

Envoy
container

Amazon ECS タスク

http/tcp

Envoy
container

Application
container

Amazon ECS タスク

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS App Mesh の動作イメージ: トップレベルの概念
Mesh

Application
container

Envoy
container

Amazon ECS タスク

http/tcp

Envoy
container

Application
container

Amazon ECS タスク

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

トップレベルの概念: Mesh
Mesh

• サービス間の通信制御を行う論理的な境界
• Mesh の中に Virtual Node や Virtual Service などを組み合わせて
ネットワークモデルを構築する

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

トップレベルの概念: Virtual Node
Mesh

• 実際のアプリケーションへの論理的なポインタ
• 例) ECS サービス、Kubernetes デプロイメント
• Envoy の実行時パラメータ (環境変数など) で Virtual Node 名を設定し、
アプリケーション (Envoy) と Virtual Node を関連づける
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

トップレベルの概念: Virtual Service
Mesh

• アプリケーションの通信先を表す
• リクエストは Virtual Router または Virtual Node にルーティングされ、
実際のアプリケーションに到達する

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

トップレベルの概念: Virtual Router
Mesh

• リクエストのルーティングを管理するロードバランサー
• 単一または複数の Virtual Node にルーティングされる

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

トップレベルの概念まとめ
•

Mesh
•

•

Virtual Node
•

•

アプリケーションのポインタ

Virtual Service
•

•

サービスメッシュの論理的な境界

アプリケーションの通信先

Virtual Router
•

ルーティング管理

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Mesh のカバーするコア以外の機能

オブザーバビリティ

セキュリティ

•
•
•

•
•
•

Metrics
Logs
Traces

Network Controls
Encryption
Authentication
Authorization
(coming soon)

その他のサポート

•
•
•

Cross-cluster
Cross-account
Multiple compute
options

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

オブザーバビリティ
EC2 instance or ECS task or EKS pod

Metrics

Application
Logs

Traces

App Mesh Proxy

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

セキュリティ
• サービス間のネットワーク接続を定義
• 透過的な暗号化
• 透過的な認証
SPIFFE/SPIRE

EC2 instance or ECS task or EKS pod

EC2 instance or ECS task or EKS pod

HTTPS

HTTP

Source Application

AWS Certificate
Manager

Source Proxy

HTTP

Destination Proxy

Destination Application

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

その他のサポート
• クロスクラスタ
• クロスアカウント
• 複数の計算サービス

AWS Resource
Access Manager

Account

AWS Organizations

Account

ECS/EKS/Kubernetes Cluster

ECS/EKS/Kubernetes Cluster

Mesh
EC2 Instance

EC2 Instance

EKS Pod
ECS Task

Kubernetes
Pod

EKS Pod
ECS Task

Kubernetes
Pod

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まとめにかえて

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

お伝えしたこと
アプリケーションフローとアーキテクチャの変遷
→ マイクロサービス化の問題からサービスメッシュが登場
サービスメッシュによるマイクロサービスアーキテクチャ
→ 様々な問題に対するサービスメッシュのアプローチを紹介
AWS App Mesh について
→ サービスメッシュ実装およびコア以外の機能の紹介

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Mesh のロードマップ

https://github.com/aws/aws-app-mesh-roadmap/projects/1

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Getting started
クロスアカウント、gRPC、リトライ、Header ベース
ルーティングなど、
活用例を確認可能なコードサンプル
https://github.com/aws/aws-app-mesh-examples
Issues, roadmap, beta channel
https://github.com/aws/aws-app-mesh-roadmap
Amazon EKS 上の AWS App Mesh での SPIFFE/SPIRE
による mTLS の使用
https://aws.amazon.com/jp/blogs/news/using-mtlswith-spiffe-spire-in-app-mesh-on-eks/

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ご清聴ありがとうございました
荒木 靖宏

アマゾン ウェブ サービス ジャパン株式会社
プリンシパル ソリューションアーキテクト
コンテナスペシャリスト

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Modern Applications Resource Hub にアクセス
豊富な日本語ガイドで皆様のモダナイゼーションの促進をサポート
•
•
•
•
•

AWS でモダンアプリケーションを構築する
モバイルアプリ、ウェブアプリを迅速に構築するには

AWS のコンテナサービスでモダナイゼーションを促進
サーバーレステクノロジーによる総所有コスト（TCO)
モダン Dev + Ops モデルの導入

その他にも ユースケースやアナリストレポートを豊富にラインアップ

https://bit.ly/3oVdKPV

Resource Hub はこちら »
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ステップバイステップで始める
モダナイゼーション
安達 翔平

アマゾン ウェブ サービス ジャパン株式会社
ISV/SaaS ソリューションアーキテクト
画面に映る資料の撮影などによる本セッション資料の転用を禁止しております
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

自己紹介

Shohei Adachi
Amazon Web Services Japan

技術統括本部 ISV/SaaSソリューション本部

Solutions Architect

好きなAWSサービス

@__saba_miso_
AWS Amplify

AWS Lambda

AWS SAM
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

こういった話を耳にすることがあります
モダナイゼーションしたいけど、やり方がわからない

何となく、モダンアプリケーションを目指してます

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

こういった話を耳にすることがあります
モダナイゼーションしたいけど、やり方がわからない
モダンアプリケーションとは、何でしょうか?

モダナイゼーションするためには、
どういう事を考慮といけないのでしょうか？
AWS Lambda を使ったモダンアプリケーションです！

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

想定聴講者

• コンテナ・サーバーレスが何かは知っている。AWS のサービスもいくつ

か触ったことがある

• アプリケーションのモダナイズを任されたけど、実のところ何をすれば

いいのか？が分からない

• AWS 上でシステムを動かしているが、アプリやインフラの構築・運用に

多くの時間や労力を割いており、課題を感じている

• イベントドリブンのアーキテクチャについても、興味がある
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

このセッションのゴール

• モダンアプリケーションを構築する理由について知る
• モダンアプリケーションの最適な構築方法について知る
• イベント駆動型のモダンアプリケーションについて知る

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アジェンダ

• モダンアプリケーションとは？

• モダンアプリケーションにとってのコンテナ・サーバーレス
• イベント駆動型のモダンアプリケーション

• モダンアプリケーションを支えるソリューション

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションとは？

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アプリケーション・インフラの構築や運用に
多くの時間や労力を費やしている

変化に迅速に対応し、
イノベーションを促進

新しい製品を素早くマーケットにデリバリし
てきたい
「変化」に強い組織とアーキテクチャが必要

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

実験がイノベーションを加速する

Point

Experiment

実験

Ideas

アイデア

Innovation
Flywheel
Listen

傾聴

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションに求められるもの

数百万のユーザー
に迅速にスケール

グローバル
レベルの可用性

数ミリ秒で応答
できる俊敏性

ペタバイトクラスの
データをハンドル

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションとは素早い
イノベーションによって競争的差別化
を作り出す手段となるもの

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

移行方式（移行戦略） 7”R”
移行方式

構成の決定

事例

① リタイヤ

企業合併による統廃合

② リテイン

移行によるビジネスメリットが不明

③ リロケート

VMWareCloud on AWSの利用

④ リホスト

インストール

既存オンプレを単純移行でAWSへ (Lift & Shift)

⑤ リプラット
フォーム

バージョンアップ、Unix/MFからAWSへ

⑥ リパーチェス

SaaSによるサービル利用費用へシフト

⑦ リファクタ

コンテナ/マイクロサービス/サーバーレス

ディスカバー／アセスメント
／アプリケーションの優先順位
付け

自動化

リプラットフォーム
(Lift & Reshape)

移行先プラット
フォームの決定
（OS version, DBエ
ンジン等）

リテイン
そのまま保
持
リタイヤ／
廃止

vMotion

パッケージや
SaaS の購入や
ライセンス契約
アプリケーションや
インフラアーキテクチャの再設計

設定

デプロイ

移行ツール
の使用

妥当性
確認

基盤となる
インフラの
変更

移行

運用

手動インストール
セットアップ

アプリ ライフサイクル管理 インテグ
ケーション
ALM / SDLC
レーション
開発
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーション構築の最適な方法
サービスの
モジュール化

可能な限り
マネージドなもので

自動化と標準化

全員の責任

目的別の
データストア

1

2

3

4

5

アーキテクチャ
パターン

運用モデル

ソフトウェア
デリバリー

管理と
ガバナンス

データ管理

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションにとっての
コンテナ・サーバーレス

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

仮想マシンを利用していてもモダナイズは可能
Service 2

Service 1

ALB

Amazon
DynamoDB

Amazon
Aurora
Application
Load
Balancer
(ALB)

WEBサーバー

Amazon Simple
Storage
Service(S3)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

このアプリケーションの課題
• 仮想マシンの管理・運用コスト
• リソースのコントロール
• 余剰なリリースを確保をしておく必要がある
• 密結合なアーキテクチャで伸縮性や弾力性の限界がある

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

このアプリケーションの課題
• 仮想マシンの管理・運用コスト
• リソースのコントロール
• 余剰なリリースを確保をしておく必要がある
• 密結合なアーキテクチャで伸縮性や弾力性の限界がある

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

このアプリケーションの課題
• 仮想マシンの管理・運用コスト
• リソースのコントロール
•

積極的なマネージド型サービスの利用と
余剰なリリースを確保をしておく必要がある
コンテナ・サーバーレスを使った活用

• 密結合なアーキテクチャで伸縮性や弾力性の限界がある

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスを選択するビジネス価値

インフラのプロビジョニング不要
サーバ管理不要
価値に対する支払い

自動でスケール
高可用かつ安全

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

なぜ多くの企業がコンテナ活用に
向かっているのか
•

Run Anywhere

•

Portability

•

Isolated processes

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS のコンテナ・サーバーレスサービスを活用
Service 2

Service 1

Service 1
AWS Fargate

Amazon
DynamoDB

Amazon API
Gateway

ALB

Amazon
Aurora

AWS Lambda

S3
Amazon
Simple
Storage
Service(S3)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

このアプリケーションの課題
• 仮想マシンの管理・運用コスト
• リソースのコントロール
• 余剰なリリースを確保をしておく必要がある
• 密結合なアーキテクチャで伸縮性や弾力性の限界がある

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

コンテナ・サーバーレスはモダンアプリケーションの一要素
•
•

「コンテナ/サーバーレスを使うこと ＝ モダンアプリケーション」ではない
コンポーネントを置き換えるだけではなく、その技術やサービスに最適された設
計や運用モデルとることで、モダナイズはやりやすくなります

最適化がされていない例

ex1: ライフサイクルが自動化されていない
コンテナワークロード

ex2: 非同期にできるところも同期処理されている
サーバーレスアーキテクチャ
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

デシジョンツリー
アプリケーション
またはプラット
フォームのランタ
イム管理を望んで
いますか？

アプリ

短い実行タスク
（15分未満）また
は非同期処理

いいえ

はい

必須
10 GB 以下のメモ
リ

いいえ

はい

特殊なハードウェ
アは不要 （ARM、
GPUなど不要）

はい

いいえ

ステートレス処理

はい

いいえ

プラット
フォーム

コンテナ

ユースケースにあった利用が望ましい

Lambdaバースト
制限内？

い
い
え

は
い

Lambda

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

自分たちのワークロードやビジネスを
広い視野で見て、アーキテクチャや
実装をデザインすることが重要

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

イベント駆動型の
モダンアプリケーション

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

このアプリケーションの課題
• 仮想マシンの管理・運用コスト
• リソースのコントロール
• 余剰なリリースを確保をしておく必要がある
• 密結合なアーキテクチャで伸縮性や弾力性の限界がある

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

このアプリケーションの課題
• 仮想マシンの管理・運用コスト
• リソースのコントロール

イベント駆動型のアーキテクチャで、
疎結合化していく

• 余剰なリリースを確保をしておく必要がある

• 密結合なアーキテクチャで伸縮性や弾力性の限界がある

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

イベント駆動型アーキテクチャ
AWS Lambda

Mobile

AWS Lambda

Kinesis

Events

AWS Step
Functions

AWS Step
Functions

AWS Step
Functions

Client
Amazon
SNS

IoT

Amazon
SQS

Messaging

DynamoDB

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

イベント駆動型アーキテクチャは信頼性
とスケーラビリティを推進

イベントルーター

互いに抽象化された
プロデューサとコンシューマ

非同期イベント
応答性の改善と
依存性の削減

Point

イベントストア

サービスが処理可能になるまで
メッセージをバッファリング

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

• 1:1 の連携（スパゲティ化）を削減

Amazon
EventBridge
AWS サービス、独自アプリケーション、
SaaSプロバイダのための
サーバーレス イベントバス サービス

• AWS および SaaS アプリケーション
間の連携を簡素化
• シンプルなプログラミングモデル

• 完全マネージド: 利用分だけの課金

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon EventBridgeを活用したアーキテクチャ
EventBridgeを導入することで、疎結合なり、伸縮性と弾力性が向上
Service
1 1
Service

Service 2

AWS Fargate
Amazon
Aurora

ALB

S3

Amazon
DynamoDB
Amazon
EventBridge

Amazon
Simple
Storage
Service(S3)

AWS Lambda

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

このアプリケーションの課題
• 仮想マシンの管理・運用コスト
• リソースのコントロール
• 余剰なリリースを確保をしておく必要がある
• 密結合なアーキテクチャで伸縮性や弾力性の限界がある

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

24を超えるAmazon EventBridgeのSaaS統合

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

日本でも始まる、EventBridge 対応パートナー

ウェブサイトやモバイルアプリを利用する個々の顧客にあわせた
体験を提供する CX プラットフォーム。

EventBridge 統合機能を使用することで、顧客行動イベントを
AWS のサービスに送信して、BI、分析、機械学習などに活用可能。
運用中のクラウドやオンプレミスのサーバーにエージェントを
1つ入れるだけで、簡単にサーバー管理できる運用監視サービス。
Mackerel によるモニタリングで検出したイベントをトリガーに
EventBridge を経由して AWS 上でさまざまなアクションを実行。
初期費用・運用費用なしで、サーバーアクセス 1回あたり 0.02円
で使用できるゲームサーバー機能を提供。

EventBridge を使うことで、ゲームイベント（クエストのクリア/
レベルアップ）と連携したアクションを追加拡張できます。
2019/01/22 時点での情報です
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションを支える
ソリューション

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWSのイベントソースとの連携
MESSAGING

Amazon SQS

Amazon SNS

Amazon EventBridge

Queues

Pub/sub

Events
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon
Simple Queue Service
マイクロサービス、分散システム、サーバーレス
アプリケーションのためのフルマネージドな
メッセージキュー

• 高信頼性のメッセージキュー
• ほぼ無制限のTPSをサポート

• 完全マネージド: 利用分だけの課金

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon
Simple Notification
Service

• publish/subscribe での通知が可能
• 様々なプロトコルに対応

• 完全マネージド: 利用分だけの課金

マイクロサービス、分散システム、サーバーレス
アプリケーションのためのフルマネージドな
Pub/Subメッセージング

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon SQSによるハイボリュームな
ビッグデータ処理

AWS Cloud

Amazon SQS
Trigger

Amazon S3

File
Create/Upload

Send Topic

AWS Lambda

Amazon SNS

AWS Lambda

Subscribe
Topic

Amazon SQS

AWS Lambda

Amazon SQS

AWS Lambda

• Pub/Subパターンによる
疎結合化

• キューイングによる、
スループットコントロー
ル
• ハイボリュームなTPSの
実現

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS SaaS Boost
• AWS SaaS Boost は、 ISV が持つ既存のモノリス

ウェブアプリケーションを迅速に SaaS 提供モデ
ルへ移行し、立ち上げを支援する、すぐに使用で
きるオープンソースのリファレンス環境です。

• SaaS Boost は、アプリケーションの変更を最小限

に抑え SaaS製品の立ち上げに必要な基本的な要素
を提供することで、付加価値を生まない重い作業
を削減し、企業は時間とリソースを節約できます。

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まとめ
• モダンアプリケーションとは素早いイノベーションによって競争的差別化を作り
•

出す手段となるもの

実験 → フィードバックのループを素早く回す

• コンテナ・サーバーレスは、モダンアプリケーションの一要素である
•

コンテナ化 / サーバーレス化 = モダンアプリケーションではない

• サービスの疎結合化を目指すことで、ビジネスの成長にも耐えうるワークロード
•

に変化していく

イベント駆動型アーキテクチャなどの取り入れ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ご清聴ありがとうございました
安達 翔平

Amazon Web Services Japan
技術統括本部 ISV/SaaSソリュー
ション本部
Solutions Architect
@__saba_miso_

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Modern Applications Resource Hub にアクセス
豊富な日本語ガイドで皆様のモダナイゼーションの促進をサポート
•
•
•
•
•

AWS でモダンアプリケーションを構築する
モバイルアプリ、ウェブアプリを迅速に構築するには

AWS のコンテナサービスでモダナイゼーションを促進
サーバーレステクノロジーによる総所有コスト（TCO)
モダン Dev + Ops モデルの導入

その他にも ユースケースやアナリストレポートを豊富にラインアップ

https://bit.ly/3oVdKPV

Resource Hub はこちら »
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

マイクロサービスと
ストラングラーフィグパターンを活用して
モダナイズを進めよう
岡田 信夫

アマゾン ウェブ サービス ジャパン株式会社
ソリューションアーキテクト
画面に映る資料の撮影などによる本セッション資料の転用を禁止しております
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

自己紹介

岡田 信夫（ポール）
Twitter/ @bulbulpaul

アマゾンウェブサービスジャパン株式会社
ソリューションアーキテクト
[関心のある技術]

Kotlin, Python, Serverless
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Session Goals

• システムのモダナイズの進め方としてのマイクロサービスを知る
• マイクロサービスへの分解の進め方、注意点を理解する
• AWSでのストラングラーフィグパターンを理解する
• 推測ではなく実測に伴って改善を進めるアプローチを知る

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アジェンダ

• モダナイズとは

• アプローチとしてのマイクロサービス
• AWSで実践するストラングラーフィグパターン
• まとめ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダナイズとは？

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダナイズとは
システムをリファクタリング、
リアーキテクチャ、移行を行い、
変化に強いアーキテクチャへ変える
変化に迅速に対応し
イノベーションを促進

変化するニーズに素早く適合させ
新たな価値を作り出すこと
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダナイズを促進させる要素
ビジネス課題

ニーズへの対応、
俊敏性、柔軟性

コストの最適化

市場投入までの
スピード

技術課題

開発効率

EOL

ポートフォリオ

経営課題, etc...
DCの統廃合

DXの推進

セキュリティ・
コンプライアンス
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アプローチとしての
マイクロサービス

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アプリケーションを小さい単位に分解

Monolith
１つですべてを実行

Microservices
それぞれが１つの事を実行

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

マイクロサービスがもたらすこと
変更容易性

俊敏性

拡張性

回復性

影響範囲の局所化

デプロイ時間の短縮

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

マイクロサービスで進める際に重要なこと
• データドリブン

• メトリクス / ログ / トレーシングを活用する
• 推測ではなく実測に基づいて考える（システム / ビジネス）
• 変更の効果の測定

（エラーレート、ダウンタイム、デプロイ数、
アイデアからリリースまでのリードタイム, etc…）

• レイヤー毎に考える

• アプリケーションレイヤー
• データレイヤー

• 長期的なリターンの視点

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

長期的な視点が必要

モダナイズに取り組む場合、短期的ではなく長期的な視点でコスト指標が必要
収益成長の
増加

収益
コスト

現状

コストの
低減

移行期間

引用: Technology-as-a-Service Playbook：How to Grow a Profitable Subscription Business （2016）

移行後
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

どのように変更を進めるのか
ビッグバン等の
不可逆なアプローチ

段階的に進める
可逆的なアプローチ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

段階的に進めることで得られるもの
• リスクを抑えられる

• 可逆的手法なので、切り戻しが可能
• 自分たちでコントロール可能な量を把握しながら進められる
• 移行中のニーズや課題の変化にも対応がしやすい
• 組織的な変更も段階的に進めることが可能
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS で実践する
ストラングラーフィグパターン

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Strangler Fig Pattern
“An alternative route is to gradually create a new
system around the edges of the old, letting it grow
slowly over several years until the old system is
strangled.”
Martin Fowler

Chief Scientist, Thought works

システムの周辺に新しいシステムを少しづつ
作り、ゆっくりと成長させ古いシステムから
すこしづつ世代交代をさせる。
引用: https://martinfowler.com/bliki/StranglerFigApplication.html

段階的なシステム分解による移行
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

前提情報
インターネット経由でアクセスされる

AWS Cloud

一般的な Web API アプリケーションを想定

Region

Availability Zone 1

Availability Zone 2

VPC

[構成要素]
Elastic Load Balancing

EC2
instances

Amazon RDS (master)

EC2
instances

• ロードバランサー

• アプリケーションサーバー
• データベース

Amazon RDS (standby)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Step 1: Facade として API Gateway
• システムを隠蔽するエンドポイントを設置

AWS Cloud
Region
Amazon API Gateway

Availability Zone 1

Availability Zone 2

VPC

Elastic Load Balancing
EC2
instances

Amazon RDS (master)

EC2
instances

• システムをユーザーから見えなくする事で

システムの変更をしやすくする

• オンプレミスのAPIも呼び出し可能

Amazon RDS (standby)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon API Gateway
API エンドポイントの作成や管理、運用、公開を実現する
フルマネージドサービス。REST / HTTP / WebSocket をサポート。
認証/認可やWAF連携、バックエンドサービスとの連携が可能。
AWS Cloud

AWS Lambda
EC2 インスタンス
Client

Amazon API
Gateway

他 AWS サービス

Internet
(外部 Web)

オンプレミス

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Step2: 計測と分析
• データに基づいてシステムの現状を把握

する

AWS Cloud
Region

AWS X-Ray

Amazon CloudWatch

Availability Zone 1

Availability Zone 2

VPC

ELB
EC2
instances

Amazon RDS (master)

EC2
instances

• Hot Spots がどこなのか、

密結合な処理はどこなのか

• 推測ではなく、実測で考える

Amazon RDS (standby)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

システムを観測可能にし、現状を理解する

Metrics

•
•
•

システムや状態の数値情報
時系列データとして記録
e.g. CPU 使用率, メモリ使用率…

Logs

•
•
•

システムのイベント情報
エラー情報やタイムスタンプ
e.g. アクセスログ、エラーログ

Trace

Amazon CloudWatch

• システムを跨ぐ一連の処理フロー情報
• トランザクション毎に識別して記録
AWS X-Ray
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Step3 - A : コンテナ化
• ホストへの依存を分解することで

ホストに依存せずスケーリングが可能

AWS Cloud
Region

AWS X-Ray

Amazon CloudWatch
VPC link

VPC
ELB

まずはコンテナ化していくのもOK

• システムの可搬性を高める

ELB
EC2
instances

Amazon RDS (master)

• 既存アプリケーションを

Amazon RDS (standby)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS のコンテナサービス
オーケストレーション
イメージレジストリ
ホスティング
フルマネージド
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Step3 - B : サーバーレス
• 特定の Hot Spot の処理をサーバーレス

で切り出す

AWS Cloud
Region

AWS X-Ray

Amazon API Gateway Amazon CloudWatch

VPC

AWS Lambda

ELB
EC2
instances

• サーバーレスの可用性や柔軟性を

活かしたアーキテクチャへと移行

• 新機能も短期間での構築が可能に

Amazon DynamoDB

Amazon RDS
(master)

Amazon RDS
(standby)

AWS DMS

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS Lambda
ビジネスロジックをフルマネージドな環境で実行するサービス。

実行時間(ms)での課金やコスト効率や柔軟なスケーリングが可能に。
Lambdaインスタンス

・
・
・

・
・
・

実行要求
（同期/非同期）

AWS Lambda

・
・
・

•
•
•
•
•
•
•

ランタイム

Python
Node.js
Java
Go
Ruby
.NET Core
(C#/ PowerShell)
カスタムランタイム

＋

コンテナイメージ
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS のサーバーレスサービス
外部 I/F
API

Amazon API Gateway

フロー制御/イベント処
理
ロジック

AWS Lambda

GraphQL

ワークフロー

SFTP/FTP

イベントバス

AWS AppSync

AWS Transfer Family

データ保持/管理
NoSQL

Amazon DynamoDB

RDB

Amazon RDS,
Amazon Aurora

AWS Step Functions

Queue

Amazon SQS,
Amazon MQ

Amazon EventBridge

ファイル

Pub/Sub

Amazon S3,
Amazon EFS

Amazon SNS

認証・認可

Amazon Cognito

流入データ

ストリーム

Amazon Kinesis Data Streams

流入ログ

Amazon Kinesis Data Firehose
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Step4: 徐々にサービスを切り出す
AWS Cloud
Region

AWS X-Ray

Amazon API Gateway Amazon CloudWatch

VPC link

VPC

ELB

ELB

AWS Lambda

EC2
instances
ECS

Amazon RDS
(master)

Amazon RDS
(standby)

AWS DMS

Amazon Aurora

Lambda Functions

Amazon DynamoDB

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Step4: 徐々にサービスを切り出す
AWS Cloud
Region

AWS X-Ray

Amazon API Gateway Amazon CloudWatch

VPC link

VPC

ELB

ELB

AWS Lambda

AWS Lambda

EC2
instances

Amazon RDS

AWS DMS

ECS

ECS

Amazon RDS

Amazon Aurora

Lambda Functions

Amazon DynamoDB

Lambda Functions

Amazon DynamoDB

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Final Step: 移行の完了
AWS Cloud
Region

AWS X-Ray

Amazon API GatewayAmazon CloudWatch

VPC link

VPC
ELB

AWS Lambda

Lambda Functions

AWS Lambda

Lambda Functions

Amazon DynamoDB
Amazon RDS

Amazon Aurora

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

徐々にマイクロサービス化する時
の悩み事への対応例

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サービスはどこから切り出すのか
分解対象に良い候補

分解のしやすさ

C

A
B

E

F

• ビジネス課題
• 現状のメトリクスや

技術課題

• 得られる価値と難易度の
D

分解による得られる価値

バランス

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サービスの切り出す時の注意点
“A structure is stable if cohesion is high, and coupling is low. ”
Larry Constantine

変更しやすさに基づいてサービスを最適化する。

１つの変更が他のサービスや機能へ変更を要する分け方をしない。
マイクロサービスではシステム構造を変更するコストは高くなる。

サービス間の結合度を下げ、関連した処理をまとめて凝集度を高める。
[悪い例]

サービスAの変更する時は、サービスBも停止や変更が必要

→ SQS でキューイングしてサービス間の結合度を下げるのも一手
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

業務処理の疎結合化
処理１

•
•

処理２

ユースケース

次の処理のためのメッセージやタスクを
キューイング
FIFO の機能を利用し、順序性が
大事なビジネスロジックを組合せる

利用サービス

•
•
•

Amazon SNS
Amazon SQS
AWS Lambda

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Amazon Simple Queue Service (SQS)
スケーラビリティを備えたフルマネージドなメッセージキュー

※東京リージョンの場合

1 2 3 4

2 3 4 1

1 2 3 4

1 2 3 4

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

旧システムの仕組みに依存してしまう場合
一時的、もしくは恒久的に腐敗防止層を設ける

そうすることで、新システムへの技術的負債の持ち込みやドメインを保護できる
e.g. データモデルの相違、プロトコル変換、etc…

ELB
ELB

Amazon API Gateway

EC2
instances

ECS
AWS Lambda

Amazon RDS

腐敗防止層

AmazonAurora

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

クライアントが複数のAPI呼び出す構成になる場合
マイクロサービスになることで、クライアントから複数種別のAPIを
呼び出すユースケースがある。

Backends for Frontends の
セッションがあります！
T2 トラック

16:30-17:00
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

リリースも段階的にできないか
AWS Cloud
Region

AWS X-Ray

10%だけ
サーバーレスへ

API Gateway のカナリアリリースの機能
で段階的なリリースが可能に

Amazon API GatewayAmazon CloudWatch

VPC

AWS Lambda

ELB
EC2
instances

CodePipeline を活用し、自動で段階的に
リリース割合を増やしていく事も可能

Amazon DynamoDB

Amazon RDS
(master)

Amazon RDS
(standby)

AWS DMS

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Final Step: 移行の完了
AWS Cloud
Region

AWS X-Ray

Amazon API GatewayAmazon CloudWatch

VPC link

VPC
ELB

AWS Lambda

Lambda Functions

AWS Lambda

Lambda Functions

Amazon DynamoDB
Amazon RDS

Amazon Aurora

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まとめ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まとめ
•

モダナイズの方法としてマイクロサービスを活用する

•

移行はストラングラーフィグパターンを活用して可逆的に進める

•

データを取り、推測ではなく実測に基づいて進める

•

コンテナやサーバーレスを活用してモダナイズを実現し
改善を継続する
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ご清聴ありがとうございました
Paul (Nobuo Okada)
@bulbulpaul

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Modern Applications Resource Hub にアクセス
豊富な日本語ガイドで皆様のモダナイゼーションの促進をサポート
•
•
•
•
•

AWS でモダンアプリケーションを構築する
モバイルアプリ、ウェブアプリを迅速に構築するには

AWS のコンテナサービスでモダナイゼーションを促進
サーバーレステクノロジーによる総所有コスト（TCO)
モダン Dev + Ops モデルの導入

その他にも ユースケースやアナリストレポートを豊富にラインアップ

https://bit.ly/3oVdKPV

Resource Hub はこちら »
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダン Dev+Ops
モデルの導入

はじめに

モダン Dev+Ops を導入すると、開発 (Dev)
と運用 (Ops) の役割間のギャップを埋め
て、顧客の進化するニーズにより速く、よ
り一貫して対応できます。

DevOps は世界を変えました。箱入りのディスクと
して店頭で販売されていたソフトウェアは、
Amazon とインターネットの登場により AWS で構
築されたサービスとしてデジタルで配信されるよ
うになりました。その中で、数か月～数年だったソ
フトウェアの更新サイクルを数日へと短縮し、Dev
と Ops の関係を緊密にしたのは DevOps でした。

すべての企業は、形態と規模を問わず、ウォーターフォール型の製品管
理サイクルを放棄し、アジャイル方式と DevOps を導入することで、イノ
ベーションの加速、セキュリティ、パフォーマンス、レジリエンスの向
上、デベロッパーと顧客の満足度の向上を確実に実現しています。ただし、
DevOps のすべての利点を実現しても、まだ完全ではありません。DevOps
は、クラウド内でのアプリケーションの開発およびホスティングが標準の
手法となる前に誕生し、既に長く知られていますが、その解釈は依然と
して組織ごとに大きく異なります。例えば、DevOps を依然として専門
チームと見なす組織が多い一方で、デベロッパーがすべての運用業務を担
当することと解釈されることもあります。テクノロジーの進化に伴って、
DevOps の定義も進化しています。AWS では、この手法をモダン Dev+Ops
と呼び、コンプライアンス、可観測性、レジリエンス、インフラストラ
クチャなどの運用業務を開発プロセスの早い段階で共有することで開
発チームと運用チームの関係を緊密化し、さらに AI と機械学習で強化するこ
とを、この手法の主眼としています。

2

はじめに

State of DevOps Report によると、DevOps を導入
してデプロイ頻度を週 / 月単位から時間 / 日単
位に移行した企業では、リードタイムが数か月か
ら数日に短縮され、変更失敗率が 46 ～ 60% から
0 ～ 15% に減少しています。多くの顧客にとっ
て、クラウドでの成功とは、オンデマンドのス
ケーラブルなインフラストラクチャが導入され
たかどうかだけではなく、開発と運用のプラク
ティスがどのように変革されるかが少なくとも評
価の一部となります。現在、Coca-Cola Argentina、
3M、Lululemon Athletica、 ワ シ ン ト ン ポ ス ト な
どのお客様は、モダン Dev+Ops アプローチに移
行することで、AWS の Dev+Ops サービスを活用
して開発チームと運用チームの関係を緊密化し、
DevOps の利点を一層享受しています。

「 AWS を活用することで、デプロイが
6 週間から週 1 回に短縮されました。間
もなく 1 日に複数回のデプロイが可能に
なるでしょう」¹

「 AWS CloudFormation テ ン プ レ ー ト と
AWS CodePipeline を使用すると、新しい
本番稼働用アカウントの作成時間を 2 日
から数分に短縮できます。そのため、コ
ストもセットアップ時間もほとんどかか
らない小規模プロジェクトを立ち上げる
ことができます。この俊敏性により、手
持ちのリソースで対応できる範囲に留ま
ることなく、最適なソリューションを試
して導入できます。 AWS を活用すると、
新しい機能やアプリケーションを以前よ
りもはるかに迅速にリリースできます」²
– Lululemon Atheletica、プロダクトアーキテクチャ
部門ディレクター、Sam Keen 氏

－ 3M Health Information Systems、アドバンスト
テクノロジー部門マネージャー、Rick Austin 氏

1

https://aws.amazon.com/solutions/case-studies/3M-health-information-systems/

2

https://aws.amazon.com/solutions/case-studies/lululemon-athletica/

3

はじめに

DevOps のプラ
クティスがより
高度に進化した
チーム

77%

問題の発生後 1 日未満でサービ
スを復元

多くのお客様は、Dev+Ops をまだ導入してい
ませんが、より迅速でエラーが少ない配信を容
易にするソリューションを求める過程で導入を
検討しています。一部のお客様は Dev+Ops を
既に導入していますが、期待したレベルのス
ピードと成功を実現できず苦労しています。
多くのお客様にとって導入が難し過ぎるので
す。
1

2

60%

セキュリティの脆弱性を 1 日未満
で完全に修復

3倍

変更管理の効率性

3

取り掛かるのが、非常に困難です。Dev

+Ops は非常に手ごわい問題に思えるでしょ
う。学ぶことが 多 く、 変 更 を 実 装 す る た
め に 多 く の 作 業を伴います。

現在利用できる業種別ソリューションは、
セキュリティ、コンプライアンス、高可用
性、 ア ク セ ス 制 御 な ど の 企 業 ニ ー ズ を 十
分に考慮していません。その結果、DevOps
チームが多大な時間を費やして構築したソ
リューションを後で置き換える必要があり
ます。
多くの業種別ソリューションは不十分であ
り、DevOps チ ー ム が Dev+Ops に 容 易 に
取り組めるレベルに至っていません。例え
ば、多くのソリューションはリアクティブ
で、プロアクティブではありません。お客
様に通知されるのは障害が既に発生した後
であり、事前に警告したり、最適な進め方を
提案したりして問題を未然に防止するま
でには至っていません。

モダン Dev+Ops の最も難しい部分は、文化を
変えることです。全員の認識を統一するには、
リ ー ダ ー シ ッ プ、 時 間、 コ ミ ッ ト メ ン ト を 必
要とします。デベロッパーが、従来、運用チー
ムが受け持っていた責任を持ち始める場合、共
有責任の意識が必要になります。以下に示す方
法に従って、文化と行動の両面から作業を進め
ることで、パフォーマンスの高い Dev+Ops 組
織を構築する仕組みが実現します。

この日本語ガイドでは、高いパ
フォーマンスを実現している
Dev+Ops 組織を通じて AWS が
特定した、指針となる原則を紹
介します。
説明責任を習慣づける
現状を評価する
段階的に改善する
すべてを自動化する
可能な限りコード化する
二重対策を行う
ツールを標準化する

4

指針となる原則

説明責任を習慣づける

Dev+Ops の目標はソフトウェア配信の迅速化ではありますが、当初の意
図は開発と運用を緊密化させて、共同して問題を解決することにありまし
た。時間の経過と共に組織の構造が変わり、説明責任の文化を重視すること
が共通のソリューションになっています。チームや個人にはそれぞれ異な
る専門技能と専門分野があるかもしれませんが、問題に取り組んで解決す
る際に説明責任を共有する必要があります。

現状を評価する

Dev+Ops の最終的な目標は迅速化にあります。ただし、チームはどこから

開始するかをわかっていない場合があります。現状を評価することから開
始できます。これは、現時点でのリリースまでの時間を評価するこという
ことです。ソフトウェア配信プロセスの中で、最も長い時間がかかってい
る部分とその理由は何でしょうか。改善できるでしょうか。成功の鍵とな
る他のパフォーマンスメトリクスは何でしょうか。開発 (Dev) と運用 (Ops)
の間でサイロ化されているプロセスの領域があるでしょうか。これらのメ

トリクスの入力と結果を評価することから開始すると、チーム内の信頼を
築くような結果を出すために取り組むべき重点領域が見つかります。
リリースまでの時間

パイプライン内のボトルネックまたはブロッカー
リリース速度

5

指針となる原則

段階的に改善する

パフォーマンスの高い Dev+Ops 組織を数日や数週間でゼロから構築する
ことはできません。いくつかの指針となる原則を見極め、小さなことから
始めて、着実かつ段階的な改善を積み重ねることが重要です。同様に、大
きな変更や大きなリリースにこだわっていると、ソフトウェアプロセスを
迅速化することはできません。大規模で複雑な変更に取り組むよりも、
小規模な変更を徐々に進めながら、新しいことを少しずつ学ぶほうがは
るかに簡単です。

すべてを自動化する

Dev+Ops の目標は、すべてを滞りなく連続して動作させることにありま

す。自動化により、人的介入に伴う時間とエラーが減ります。Dev+Ops
ワークフローに自動化を導入する方法は多くありますが、最も基本的な
方法は Dev+Ops CI/CD パイプラインに自動のテスト、デプロイ、ロール
バックを追加することです。

可能な限りコード化する

自動化と Dev+Ops を成功させるもう 1 つの要因は、インフラストラク

チャやポリシーなどをコード化し、人間と機械の両方が理解できるように
することです。最も基本的なユースケースは、Infrastructure as Code (IaC)
です。これにより、人間が定義したクラウドインフラストラクチャのプロ
ビジョニングが自動化されます。これを手本として、変更を追跡し、組織
全体でベストプラクティスを共有できます。別の例は Policy as Code です。
この場合、中心となるチームはルールを記述し、自動化によりそのルール
が適用されます。
Infrastracture as Code ファイルには、以下が含まれます。
コンピューティング
ストレージ
アイデンティティ、アクセス、セキュリティ
アプリケーションリソース

6

指針となる原則

二重対策を行う

ベストプラクティスを確実に実行させるには、奨励と強制の両方が必要
です。ベストプラクティスを奨励するには、通常、コードとしてのイン
フラストラクチャ (Infrastructure as Code) を使用し、組織全体でベストプ
ラクティステンプレートを共有します。ベストプラクティスを強制するに
は、コードとしてのポリシー (Policy as Code) などのプロセスを使用できま
す。ただし、二重対策をさらに進めるには、ルールと AI を使用してユー
ザーに影響を与える前に潜在的なエラーを見つけて、ベストプラクティス
の実装方法について Dev+Ops チームにガイダンスを提供します。

ツールを標準化する

ツールを標準化すると、組織はスケールできます。ツールセットが異な

ると、ポリシーを記述したりベストプラクティスを適用したりすること
が、不可能ではないものの非常に困難になります。いくつかのベンダーの

ツールが相互に連携するように設計されている場合は、それらを使用でき
ますが、最終的には標準化することでこそ、時間が節約され、エラーが削
減されます。

7

所有者意識が根付く文化
AWS が選ばれる理由

AWS が選ばれる理由

AWS は、 モ ダ ン Dev+Ops の
プラクティス、ツール、トレー
ニングのコアセットを提供す
ることにより、お客様がクラウ
ド変革を迅速化するための支
援 を す る 立 場 に あ り ま す。 お
客様は、AWS でクラウドの利
点をいち早く活用し、イノベー
ションを加速させることがで
きます。

1

Amazon は Dev+Ops とイノベーションのパイオニアである

Amazon は、Dev+Ops の一般的なベストプラクティスの多くを先駆けて確立し、
パフォーマンスに優れたお客様との 10 年を超える連携を通じて、お客様のニー
ズに合うソリューションを提供しています。AWS のサービスには、Amazon のベ
ストプラクティスがデフォルトで組み込まれています。

2

AWS には、最も広範で最も奥の深い、統合されたモダン Dev+Ops
サービスのポートフォリオがある

コアモニタリングや CI/CD サービスから、コードとしてのインフラストラクチャ、さ
らにはビッグデータや AI を使用してプロアクティブなアドバイスやレコメンデー
ションを提供する最新のサービスまで、AWS はパフォーマンスに優れた Dev+Ops
チームもしくは組織を構築するために必要なすべてのサービスを備えています。
3

セキュリティはジョブ 0 (最優先)、可用性はジョブ 1 (その次に優
先) である

AWS の Dev+Ops サービスには、セキュリティのベストプラクティスがデフォルトで組
み込まれています。例えば、CI/CD パイプラインはデフォルトでプロジェクト別に分離
されるため、アクセスを許可する対象を該当するユーザーだけに簡単に制限できま
す。さらに、AWS のすべてのサービスにおいて高可用性が実現されているため、チーム
の生産性が高まります。
4

デベロッパーと組織の両方向けに構築されている

多くの開発ツールは、組織のニーズを十分に考慮していません。AWS は、デベ
ロッパーと組織の両方のニーズを重視し、ガバナンスとコンプライアンスのコン
トロールを容易に実装して、開発チームが迅速かつ安全に業務を実行できるよう
にします。

8

アクションプラン

アクションプラン

モダン Dev+Ops を AWS で実現するには、どうしたら
よいでしょうか。以上の指針となる原則を実践する
ために、すべての形態と規模の組織が使用している、
推奨されるベストプラクティスを以下に示します。

GitOps
GitOpsは、コードとしてのインフラストラクチャ
を Git リポジトリでホストし、アプリケーショ
ンソフトウェアコードと同じマージリクエス

トプロセスに従うプローチです。GitOps は、
アプ
リケーションのインフラストラクチャへの帯域
外の変更を排除するように設計されています。
コードとしてのインフラストラクチャは、アプ
リケーションのインフラストラクチャをコード
形式で ( 通常、テンプレートやファイルに ) 定
義し、そのファイル定義に従ってインフラスト
ラクチャのプロビジョニングを自動化する手法
です。GitOps では、インフラストラクチャの定
義ファイルが Git リポジトリでホストされ、各
コミットはアプリケーションソフトウェアコー
ドと似たマージリクエストプロセスに従い、継
続的インテグレーションと継続的デリバリー
(CI/CD) 自動化を通じて処理されます。GitOps

では、インフラストラクチャファイルがテスト
され、インフラストラクチャのプロビジョニン
グが自動化されます。エラーが発生した場合は、
前の状態にロールバックされます。

AWS は、AWS CloudFormation に基づいて構築
された完全な GitOps ソリューションを提供し
ています。AWS CloudFormation を使用すると、
開発チームと運用チームは、YAML や JSON な
どの一般的なインフラストラクチャ言語を使用
したり、AWS Cloud Development Kit (AWS CDK)
を使用したりして、コンソールで Infrastructure as
Code ファイルを簡単に定義、プロビジョン、お
よび管理できます。AWS CDK を使用した場合、
デベロッパーは、Python、TypeScript、C#、Java、
JavaScript などの一般的なプログラミング言語
で CloudFormation テンプレートを定義できます。
CloudFormation は、自動化された CI/CD ワーク
フローを実行し、AWS CodeCommit、GitLab、

Bitbucket、GitHub など、人気の高いバージョン
管理サービスとも統合されていて、AWS
CodePipeline と非常によく統合されていま
す。新しいインフラストラクチャ定義ファイルが
作成されると、このファイルはバージョン管理さ
れた環境でホストされます。CloudFormation テ
ン プ レ ー ト が 変 更 さ れ ると、CI/CD 自動化がト
リガーされ、デベロッパーは簡単に変更をデプ
ロイまたはロールバック / フォワードできます。

「 Rivian で は 急 成 長 に 伴 い、 非 常 に ス
ケーラブルなシステムが必要になって
います。 5 日間かかっていた変更が今は
数分以内で終わります」³
－ Rivian、3DExperience テクニカルリード、
Surendra Balu 氏

3

https://aws.amazon.com/solutions/case-studies/rivian-case-study/

9

アクションプラン

継続的インテグレーション
と継続的デリバリー (CI/CD)

CI/CD は、ビルド、テスト、デプロイの各パイ
プラインを使用してソフトウェアのリリース準
備を自動化するための基礎的なベストプラク
ティスです。CI/CD は、チームの作業を迅速化
して、エラーが発生しやすい手動プロセスと、
ソフトウェアリリースに伴う管理作業を排除す
るのに役立ちます。顧客のリリース期間が長い
場合は、CI/CD
でシステムを継続的に変更す
ることで、この問題を解決できます。エンジ
ニアは、コード内の潜在的なエラーや違反を検
出するテストを記述し、検出された場合は更新
をチームに差し戻します。バグが本稼働環境ま
で見逃された場合でも、チームは安定した
バージョンへのロールバックを自動化してアッ
プタイムを維持できます。
AWS は、エンタープライズまたはスタートアップ
企業の CI/CD を構築するためのフルマネージドソ
リューションを提供しています。AWS CodeBuild、
AWS CodeArtifact、AWS CodePipeline、 お よ び
AWS CodeDeploy は、お客様の CI/CD の実装を支
援するために構築されたコネクテッド Dev+Ops
サービスのセットです。これらのサービスは、
Amazon の内部 CI/CD ツールの利点を反映し、
デフォルトでベストプラクティスを奨励します。
例えば、セキュリティを重視するお客様は、各
プロジェクトを単一の CodePipeline パイプラ
インに分離することで、アクセスを簡単に制限

し、該当するユーザーにのみプロジェクトへの
アクセスを許可できます。共有ビルドサーバーの
脆弱性について心配する必要はありません。さ
ら に、AWS で は CI/CD が 容 易 で あ り、 専 門
知 識 も 少 な く て 済 み ま す。Amazon CodeGuru
Reviewer などのサービスをソフトウェアリリー
スサイクルのプルリクエストフェーズで利用す
ると、機械学習を使用したコードレビューによ
り、開発中の重大な問題、セキュリティの脆弱
性、見つけにくいバグを特定できます。デベロッ
パーは、提供されるガイダンスに従って、新し
い機能を本稼働環境にデプロイする前に、問題
を解決してコードを改善できます。また、エン
ジニアリングチームは AWS Proton をサービス
プラットフォームとして使用し、開発チーム
のイ ン フ ラ ス ト ラ ク チ ャ の プ ロ ビ ジ ョ ニ ン
グ、コードのデプロイ、モニタリング、およ
び更新に必要なさまざまなツールを事前に設定
できます。

「 AWS CodeBuild を使用すると、アプリ
ケーションのビルドは約 10 分で完了し
ます。 Jenkins を 使 用 し て い た と き は
最 大 1 時 間 か か っ て い ま し た。 同 じ
パフォーマンスを Jenkins で達成しよ
うとすれば、同じ時間でビルドを完了
するのに 50 個の Jenkins インスタン
スをスピンアップする必要があるため、
4 倍のコストがかかるでしょう」
－ Coursera、シニアエンジニア、Bryan Kane 氏

10

アクションプラン

AIOps
AIOps は、自動化とプロアクティブなメカニズム

を促進し、チームが自信を持ってイノベーション
を加速できるようにする変革です。AIOps は、デ
ベロッパーに要求される知識の量を減らし、Dev
+Ops ワークフローで AI を活用してデベロッ
パーの経験を補強するように設計されています。
また、問題が発生する前に、役立つインサイトを
提供してチームがプロアクティブに対処できるよ
うにし、デフォルトでベストプラクティスを適用
して、結果としてイノベーションを加速させま
す。例えば、デベロッパーは、ベストプラクティ
スからの逸脱、同時実行の問題、その他の一般的
なコーディングバグを、システムに影響を及ぼす
前に検出し、実践的なレコメンデーションに従っ
てシステムのパフォーマンスを向上させることが
できます。

Amazon CodeGuru Reviewer は 機 械 学 習 を 利 用
したデベロッパーツールサービスであり、
Amazon.com と AWS オペレーショナルエクセレン
スで 20 年 間にわたって蓄積された情報に基づく
AWS 機械学習モデルに従って、コードの分析を
容易にし、セキュリティのベストプラクティスが
すべての場所で実践されるようにします。

Amazon CodeGuru Proﬁler を 使 用 す る と、 お 客
様はアプリケーションの実行に伴う高コストで
非効率な方法を特定し、これらを修正するための
実践的なステップを導入して、コストを削減で

きます。また、Amazon DevOps Guru を使用す
ると、AIOps ソリューションを導入してアプリ
ケーションの運用パフォーマンスと可用性を向
上させることができます。DevOps Guru は、ア

プリケーションの異常な動作を特定し、停止や
サービス中断を引き起こす可能性がある重大な
問題を浮上させて、問題を修正するためのレコ
メンデーションを提供します。

「私たちは運用上の問題の解決にチーム
が費やす時間を減らす方法を常に模索
し て い ま す。 Amazon DevOps Guru の
利用を開始したことで、機械学習から得
られたインサイトを活用して運用上の
問題をす ば や く 特 定 し、 相 互 に 関 連 付
け て、修正できるようになりました。
Amazon DevOps Guru がもたらすインサ
イトにより、チームは最初からやり直す
ことなく、問題をすばやく検出し、根本
原因を究明することができるようにな
りました。 IT チームは平均復旧時間
(MTTR) を大幅に短縮し、問題解決の時
間を削減しています。一方で、顧客のエ
ンドユーザーエクスペリエンスは最高レ
ベルに維持されています」
－ HCL Technologies

11

アクションプラン

継続的な可観測性

継続的な可観測性があることで、システムのス
テータスをいつでも確認することが可能になり
ます。可観測性は、問題を検出、調査、修正す
る能力です。エンジニアリングチームは、継続
的な可観測性を利用してアプリケーションのヘ
ルスとパフォーマンスに関するインサイトを取
得し、注意を要する問題のトラブルシュー
ティングと解決を行い、最終的にエンドユー
ザーのエクスペリエンスを改善できます。クラ
ウドのアプリケーションとリソースは、膨大な
データストリームのメトリクス、ログ、トレー
スを何十億も生成するため、分散アプリケー
ション全体のパフォーマンスを分析すること
に困難を伴います。可観測性は、ソースから
ユーザーに影響を及ぼしている原因を特定した
り、破損したコードパスやコストの高いコー
ドパスをすばやく検出したりして、デベロッ
パーの生産性を高めます。
継続的な可観測性を利用する最初のステップは、
Amazon CloudWatch ( ま た は 好 み に 応 じ て
Amazon Managed Service for Prometheus、
Amazon Managed Service for Grafana、Amazon
Distro for OpenTelemetry のいずれか) を使用し
て可観測性ダッシュボードを構築することです。
可観測性ダッシュボードは、クラウドサービスの
アクティビティの管理という課題に対処します。
これらは、システムへのヒューマンフェイシング
の視点です。これらのシステムは、時系列のメト

リクス、ログ、トレース、アラームデータを表
示することで、システムがどのように動いてい
るのかの要約を提供します。ダッシュボードを
構築したら、お客様は CloudWatch のアラームを
設定し、クラウド環境の潜在的な問題に関する
アラートを継続的に受け取るようにする必要が
あります。

ファクト :

AWS は月平均 1,000 兆のメ
トリクスの観測結果をモニタ
リングしている

「 私 た ち は、 CloudWatch を 使 用 し て
Amazon Simple Queue Service 用 の ア
ラートと、 EC2 Auto Scaling グループの
スケーリングアクション用のアラートを
作成しています。これらのインサイトに
基づいてスケーリングの決定を下し、カ
スタマーエクスペリエンスに影響を与
えることなく、 AWS コンピューティン
グリソースを最も効率的に活用できま
す。 CloudFormation を使用して、顧客向
けのアプリケーションで使用する AWS リ
ソースの論理スタックをデプロイできま
す。これにより、複数の AWS アカウント
全体で繰り返して一貫したデプロイを行
うことができます。その結果、間違いや
すく一貫しない手動の設定に依存しない
で、コードとしての設定を使用してアプ
リケーションスタックを容易に作成でき
るようになっています」
－ Just Eat、シニアエンジニア、Martin Costello 氏

12

アクションプラン

運用を可視化するための
ダッシュボードの構築

この Amazon Builders' Library の記事では、AWS
プリンシパルエンジニアの John O'Shea が、シ
ステムの状態を理解するためのダッシュボー
ドの構築に関する Amazon DevOps チームの見
解を紹介しています。
詳細はこちら ›

13

アクションプラン

継続的なコンプライアンス

クラウド内のコンプライアンスは、まったく新
しいパラダイムです。従来のコンプライアンス
手法はクラウドリソースのスピードとスケール
に対応できません。スプレッドシートや静的
データベースではリソースチャーンを処理でき
ません。成功への鍵は、自動化と簡素化を極限
まで進めることです。AWS は、お客様がクラウ
ドコンプライアンスを簡素化するために役立つ
さまざまなサービスを提供しています。コンプ

ライアンスのためにどのサービスを使用する
かを理解するための 1 つの方法は、内部監査
手法に関する国際的に認知された機関である
The Institute of Internal Auditors (内部監査人協

会) の 3 つのラインモデルに従ってサービスを
検討することです。このモデルは、組織が 3 つ
のディフェンスラインに従い、ITの特定の役
割と責任を通じてリスクを管理することを明確
に示します。第 1 ラインはリスクの管理、第 2 ラ
インはリスクの監視、第 3 ラインはリスクのア
シュアランスの提供を役割とします。

AWS は、これら 3 つのラインのそれぞれに適合
するさまざまなサービスを提供しています。例
えば、第 1 ラインのリスク管理のサービスとし
て、AWS Conﬁg、AWS CloudTrail、AWS Systems
Manager を提供しています。これらのサービス
では、リスクを管理するためのコントロールを
個別に定義およびデプロイできます。第 2 ラ
インについては、AWS Security Hub と Amazon

CloudWatch を使用して組織全体のリスクを監
視できます。第 3 ラインのリスクのアシュア
ランスを提供するには、AWS Audit Manager が
最適なツールです。お客様は、このツールを使
用して監査用にコンプライアンスの証拠を集め
るプロセスを自動化できます。

ただし、これらのツールを使用するだけでは不
十分です。お客様は、継続的なコンプライアン
スでプロセスを自動化する必要があります。継
続的なコンプライアンスを導入するには、コー
ドとしてのコンプライアンス (compliance as
code) の概念を活用することをお勧めします。
コードとしてのコンプライアンスにより、
AWS CloudFormation などのツールを使用して
3 つのラインモデルの要素を定義できます。次
に、AWS CodePipeline などの自動化されたパ
イプラインを使用して、これらの要素をテス
トしてデプロイできます。新しいコントロール
や証拠が必要になった場合、これらをアカウン

トごとに手動で実装する必要はありません。
コードはコントロール定義で更新され、パイ
プラインを通じてプッシュされます。その結果
として、リスクを管理するための新しいコント
ロールが、監査目的の証拠として即座に追加さ
れます。継続的なコンプライアンスには、コン
トロールが整っており、証拠のコレクションが
改ざんされていないことの具体的なアシュアラ
ンスを提供するという追加の利点もありま
す。3 つのラインモデルを活用して継続的なコ
ンプライアンスでプロセスを自動化すること
は、大規模なコンプライアンスを処理するため
の最適なアプローチです。

「 AWS により、私たちは仕事のやり方を
根本的に変革し、コンプライアンスプ
ロセスを自動化することで人員を増や
さずにスケールできるようになりまし
た。コンプライアンスは管理しにくい面
がありますが、 AWS Conﬁg のおかげで、
コンプライアンスに深い知識がなくて
も、すぐに使えるテンプレートに従って
コンプライアンスを実装できます。ダッ
シュボードは、準拠していないリソース
などに関する情報を提供することで、セ
キュリティ体制を改善するきっかけを提
供します。また、どこに着目して修正す
べきかについて組織全体で話し合うた
めの開始点ともなります。デジタルグ
ループは、クラウドテクノロジーを通じ
て社内外のチームにテクニカルリーダー
シップを提供するため、組織全体のセ
キュリティ体制を一元的に監視および管
理できることが重要です。パッケージ済
みの Conﬁg 適合パックテンプレートは、
このプロセスを簡素化しており、クラ
ウドへの移行全体を加速させる主要因と
なっています」
－ Baker Tilly Digital、シニアソリューションアーキテ
クト、Andrew Clark 氏

14

アクションプラン

共有サービスプラット
フォームの構築

チームや組織ごとに Dev+Ops を実装する方法は
わずかに異なります。多くの組織には、中心と
なるプラットフォームチームがあり、セキュリ

ティ、ソフトウェア配信、モニタリング、ネッ
トワークを標準化することで開発チームをサ
ポートし、運用上の負担を軽減する役割を果た
しています。共有サービスプラットフォームは、
コードをデプロイするために合理化された、デ
ベロッパー専用のセルフサービスインターフェ
イスです。中心となるチームは、セキュリティ、
ソフトウェア配信、モニタリング、ネットワー
クに関する標準を定義して統制します。これ
らの標準はすべてのデプロイするアプリケー
ションで使用する必要があります。これによ
り、デベロッパーの生産性が高まり、プラット
フォームチームはより詳細に制御できるように
なります。
AWS は、共有サービスプラットフォームを AWS
で構築するために必要なすべてのツールを提供
しています。本番稼働用の基本的なユースケー
スの場合、AWS Copilot CLI を使用すると、す
ぐに使えるマルチアカウント CI/CD、セキュリ
ティグループ、モニタリングを完備した開発環
境を簡単に作成できます。より複雑な状況の場
合、AWS はフルマネージドサービスである AWS
Proton を提供しています。AWS Proton は、コン
テナとサーバーレスアプリケーション用の最
初のフルマネージド配信サービスです。プラッ
4

https://aws.amazon.com/solutions/case-studies/wiley/

トフォームチームは、AWS Proton を使用して、
インフラストラクチャのプロビジョニング、コー
ドのデプロイ、モニタリング、更新に必要なす
べての異なるツールを連携させることができま
す。AWS Proton は、この問題を解決するため
に、複雑さを管理し、一貫した標準を適用する

ために必要なツールをプラットフォームチーム
に提供するとともに、デベロッパーがコンテナや
サーバーレステクノロジーを使用してコード
を簡単にデプロイできるようにします。参考
として、共有サービスプラットフォームをよ
り詳細に制御して構築する必要がある場合は、
多くの組織において構築に AWS CloudFormation
と AWS Service Catalog を使用し、AWS での使
用を承認した IT サービスのカタログを作成、管
理することに成ししています。同じように、動
的プログラミング言語に慣れているプラット
フォームチームを擁しているお客様は、 AWS
CDK を使用して開発チーム用のイネーブルメント
プラットフォームを構築しています。

「当社の技術者は、 AWS Service Catalog
のセルフサービスポータルを使用する
ことで、チケットを開くことなく、アプ
リケーションビルドを本稼働環境に簡
単にデプロイできます。その結果、通
常は何週間もかかる、新しいアプリケー
ションスタックの立ち上げを 5 分で完了
で き ま す。 AWS Service Catalog の お か
げで、 Wiley では DevOps とオートメー
ションが機能しています」⁴

－ Wiley、プラットフォーム機能部門バイスプレジデン
ト、Meltem Dincer 氏

15

まとめ

Dev+Ops の導入が進んでいる組織にも、まだの組織にも、
AWS は開発チームと運用チームのギャップを埋めるため
に設計したさまざまなソリューションを提供します。

AWS デベロッパーツールは、簡単に使い始めることができます。また、セキュリティ、コンプライアン
ス、高可用性、アクセス制御などの重要なニーズに対応するとともに、事前の警告やベストプラクティス
に基づく提案を行うプロアクティブなソリューションをお客様に提供して、未然に問題を特定し、防止し
ます。AWS を使用すると、お客様はクラウドの利点をすばやく実現し、AWS のモダン Dev+Ops のプ
ラクティス、ツール、トレーニングのコアセットを通じてイノベーションを加速できます。
モダン DevOps に関する詳細を参照する ›

© 2021, Amazon Web Services, Inc. or its aﬃliates. All rights reserved.

16

OCTOBER 27, 2021

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションへの近道 〜
AWS App Runner のご紹介
内田 誠悟

アマゾン ウェブ サービス ジャパン株式会社
シニアソリューションアーキテクト, スタートアップ
画面に映る資料の撮影などによる本セッション資料の転用を禁止しております
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

内容についての注意点
•

本資料では2021年9月時点でのサービス内容および価格に基づいたスライドや説明になっています。最新の

•

資料作成には十分注意しておりますが、資料内の価格とAWS公式ウェブサイト記載の価格に相違があった場

•

情報はAWS公式ウェブサイト(http://aws.amazon.com)にてご確認ください。
合、AWS公式ウェブサイトの価格を優先とさせていただきます。

AWS does not offer binding price quotes. AWS pricing is publicly available and is subject to change in
accordance with the AWS Customer Agreement available at http://aws.amazon.com/agreement/. Any
pricing information included in this document is provided only as an estimate of usage charges for AWS
services based on certain information that you have provided. Monthly charges will be based on your
actual use of AWS services, and may vary from the estimates provided.

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションへの道のり

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションのメリット

市場投入を加速

イノベーションの向上

信頼性の向上

コスト削減

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションのメリット
市場投入を加速

テストやリリースプロセスの自動化を通じてリリースサイクルが加速

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションのメリット
イノベーションの向上

モジュール式アーキテクチャにより個々の変更が迅速に

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションのメリット
信頼性の向上

テストの自動化や各環境でのモニタリングを通して問題発見が効率化

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションのメリット
コスト削減

従量課金モデルやオートスケーリングを通して余剰なリソースが削減

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションのメリット

メリットがあるのはわかったが、問題はどうやって実現するか

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションへの道のりは長い

リリースプロセスの自動化だけでもやることはたくさんある

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションへの道のりは長い
例: リリースプロセスの自動化

1. リリースプロセスの自動化を行うツールの選定

AWS CodePipeline

GitHub Actions

CircleCI

Buildkite

Jenkins

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションへの道のりは長い
例: リリースプロセスの自動化

2. 選定したツールの学習

AWS CodePipeline

GitHub Actions

CircleCI

Buildkite

Jenkins

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションへの道のりは長い
例: リリースプロセスの自動化

3. リリースプロセスの設計
Amazon ECR

GitHub

CodePipeline

CodeBuild

CodeDeploy

Amazon ECS

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションへの道のりは長い
例: リリースプロセスの自動化

4. 設計したリリースプロセスの実装・構築
Amazon ECR

GitHub

CodePipeline

CodeBuild

CodeDeploy

Amazon ECS

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションへの道のりは長い
例: リリースプロセスの自動化

5. 実装・構築したリリースプロセスのテスト
Amazon ECR

GitHub

CodePipeline

CodeBuild

CodeDeploy

Amazon ECS

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションへの道のりは長い
例: リリースプロセスの自動化

6. 実装・構築したリリースプロセスの運用・改善
Amazon ECR

GitHub

CodePipeline

CodeBuild

CodeDeploy

Amazon ECS

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションへの道のりは長い
😥😥 リリースプロセスの自動化

😥😥 分割したアプリケーションごとのインフラ構築
😥😥 監視環境の整備

😥😥 オートスケーリングの導入 etc

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションへの道のりは長い

モダナイゼーションに時間が取られてしまっては本末転倒

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションへの近道

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モダンアプリケーションへの近道

AWS App Runner

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS App Runner とは

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の概要
一言で説明するとどんなサービス？

Web アプリケーションのホスティングサービス

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の概要
一言で説明するとどんなサービス？

AWS 上で最も簡単かつ素早く

コンテナ化されたモダン Web アプリケーションを

ビルド、デプロイ、実行できるサービス

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の概要

具体的にどんなことができるようになるか？

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (コードベース)

開発者

GitHub

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (コードベース)

1. 開発者がソースコードを更新

開発者

GitHub

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (コードベース)

2. App Runner が更新を検知

開発者

GitHub

App Runner

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (コードベース)

3. App Runner がコンテナをデプロイ

開発者

GitHub

App Runner

ロードバランサー
コンテナ化された Web アプリケーション
ネットワーク (VPC)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (コードベース)

3. App Runner がコンテナをデプロイ

開発者

GitHub

App Runner

内部でソースコードからコンテナイメージを自動生成

ロードバランサー
コンテナ化された Web アプリケーション
ネットワーク (VPC)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (コードベース)

自動生成される URL から Web アプリケーションにアクセス

エンドユーザー

https://xxxxxxxx.<region>.awsapprunner.com

ロードバランサー
コンテナ化された Web アプリケーション
ネットワーク (VPC)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (イメージベース)

開発者

Amazon ECR

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (イメージベース)

1. 開発者がコンテナイメージを更新

開発者

Amazon ECR

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (イメージベース)

2. App Runner が更新を検知

開発者

Amazon ECR

App Runner

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (イメージベース)

3. App Runner がコンテナをデプロイ

開発者

Amazon ECR

App Runner

ロードバランサー
コンテナ化された Web アプリケーション
ネットワーク (VPC)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (イメージベース)

自動生成される URL から Web アプリケーションにアクセス

エンドユーザー

https://xxxxxxxx.<region>.awsapprunner.com

ロードバランサー
コンテナ化された Web アプリケーション
ネットワーク (VPC)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (App Runner サービスの作成)

App Runner サービス

開発者

GitHub

App Runner

ロードバランサー

コンテナ化された Web アプリケーション
ネットワーク (VPC)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (App Runner サービスの作成)

サンプルアプリケーション
Nodejs 製 Web アプリ

Express フレームワーク

3000 番ポートでリッスン

“Hello World” とログ出力
“Hello World” と画面表示

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (App Runner サービスの作成)

AWS マネジメントコンソールにて
“app runner” と検索

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (App Runner サービスの作成)

App Runnner コンソールにて

(App Runner) サービスの作成

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (App Runner サービスの作成)

ソースコードリポジトリ
リポジトリの指定

デプロイトリガーを自動に設定

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (App Runner サービスの作成)

実行環境: Nodejs 12
ビルドコマンド
起動コマンド
ポート

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (App Runner サービスの作成)

App Runner サービス名

コンテナの CPU とメモリサイズ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動デプロイ (App Runner サービスの作成)

自動生成される URL から
App Runner サービスへアクセス

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動インフラ構築

App Runner

ロードバランサー
コンテナ化された Web アプリケーション
ネットワーク (VPC)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動インフラ構築

コンテナだけでなく下地となるインフラも App Runner が構築

App Runner

ロードバランサー

ネットワーク (VPC)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動インフラ構築

AWS リソースは AWS が所有する VPC 内に作成される

ロードバランサー
コンテナ化された Web アプリケーション
AWS が所有する VPC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動インフラ構築

お客様の VPC にコンテナやロードバランサー等は作成されない

ロードバランサー
コンテナ化された Web アプリケーション
お客様が所有する VPC

AWS が所有する VPC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動インフラ構築

お客様から見たときに VPC やロードバランサーを気にしなくてよい

コンテナ化された Web アプリケーション
お客様が所有する VPC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動スケール

エンドユーザー

ロードバランサー
コンテナ化された Web アプリケーション

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動スケール

トラフィックが増えると…

ロードバランサー

エンドユーザー
コンテナ化された Web アプリケーション

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動スケール

トラフィックが増えると自動でスケールアウト

ロードバランサー

エンドユーザー
コンテナ化された Web アプリケーション

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動スケール

トラフィックが減ると…

エンドユーザー

ロードバランサー

コンテナ化された Web アプリケーション

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動スケール

トラフィックが減ると自動でスケールイン

エンドユーザー

ロードバランサー
コンテナ化された Web アプリケーション

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動ログ/メトリクス収集

ロードバランサー
コンテナ化された Web アプリケーション

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動ログ/メトリクス収集

ログとメトリクスは自動で収集
ログとメトリクス

ロードバランサー

App Runner

コンテナ化された Web アプリケーション

※アプリケーションログは STDOUT/STDERR に出す必要があります
※収集されるメトリクスは HTTP リクエスト数やコンテナ数など予め決まっています
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動ログ/メトリクス収集

収集されたログやメトリクスは App Runner コンソールから閲覧可能
ログとメトリクス

App Runner

App Runner コンソール

開発者

※アプリケーションログは STDOUT/STDERR に出す必要があります
※収集されるメトリクスは HTTP リクエスト数やコンテナ数など予め決まっています
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動ログ/メトリクス収集

App Runner コンソールにて
ログの確認

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の機能
自動ログ/メトリクス収集

App Runner コンソールにて
メトリクスの確認

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の費用対効果
App Runner の学習/構築/運用コストは相対的に非常に小さい

👍👍 コンテナやインフラの専門知識や深い経験が問われない
👍👍 10 分もあれば App Runner 上で Web アプリが動く

👍👍 基本的に自分の Web アプリにのみ気を配っていればよい

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の費用対効果
おさらい: モダンアプリケーションへの道のりは長い

😥😥 リリースプロセスの自動化

😥😥 分割したアプリケーションごとのインフラ構築
😥😥 監視環境の整備

😥😥 オートスケーリングの導入 etc

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の費用対効果
App Runner を活用したモダナイゼーション

✅ デプロイの自動化

✅ インフラ構築の自動化

✅ ログ/メトリクス収集の自動化
✅ スケールの自動化

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner の費用対効果
App Runner を活用したモダナイゼーション

App Runner だけで完結することはないが、
小さな工数でモダンアプリケーションへ近づける

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

App Runner のユースケース

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

フィットするシチュエーション
🚀🚀 インフラよりプロダクト開発に集中したい
🛤🛤 マネージドなプラットホームに移りたい
🚄🚄 モダナイズしたい

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

フィットするシチュエーション
1. インフラよりプロダクト開発に集中したい

スタートアップや新規事業はもちろんのこと
プロダクトの立ち上げ期以外でも

インフラは AWS の用意した枠組みに乗っかりつつ
プロダクト開発に集中したいケース

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

フィットするシチュエーション
2. マネージドなプラットホームに移りたい

自前プラットホームの運用に課題がある
インフラ作業を軽減して時間を作りたい

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

フィットするシチュエーション
3. モダナイズしたい

コンテナ化によって再現性を高めたい

The Twelve-Factor App に合うインフラが欲しい

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
公開ロードマップ

GitHub Project でロードマップ管理
開発中、調査中といったステータスを確認

https://github.com/aws/apprunner-roadmap/projects/1
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
コミュニティからの要望の出し方

App Runner へ要望を出す方法

・GitHub Issue を新規に作成するか
・既存の Issue に 👍👍 する

https://github.com/aws/apprunner-roadmap/issues/2
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
制約事項: VPC リソースアクセス

お客様の VPC 内の AWS リソースにはアクセスできない

Aurora
ロードバランサー

Amazon RDS

コンテナ化された Web アプリケーション
AWS が所有する VPC

ElastiCache
お客様が所有する VPC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
ロードマップ: VPC リソースアクセス

VPC リソースアクセスは優先事項として
開発が進められている

https://github.com/aws/apprunner-roadmap/issues/1
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
制約事項: 連携可能なリポジトリサービスとレジストリサービス

ソースには GitHub と ECR (public, private) が連携可能

GitHub

App Runner

Amazon ECR

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
制約事項: 連携可能なリポジトリサービスとレジストリサービス

それ以外のリポジトリサービスやレジストリサービスは未サポート

GitHub

DockerHub

App Runner

Amazon ECR

GitLab

App Runner

CodeCommit

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
ロードマップ: 連携可能なリポジトリサービスとレジストリサービス

こちらについても要望は上がっており、
調査中のステータス

https://github.com/aws/apprunner-roadmap/issues/3
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
制約事項: コードベースでのデプロイにてサポートされている実行環境(プログラミング言語)

Python3 と Nodejs12 をサポート

サポート済み

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
制約事項: コードベースでのデプロイにてサポートされている実行環境(プログラミング言語)

Python3 と Nodejs12 以外のバージョンやその他の言語は未サポート

サポート済み

未サポート

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
制約事項: コードベースでのデプロイにてサポートされている実行環境(プログラミング言語)

イメージベースでのデプロイであれば実行環境に制限はない

デプロイ可能

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
ロードマップ: コードベースでのデプロイにてサポートされている実行環境(プログラミング言語)

各言語ごとに GitHub Issue が存在
Cloud Native Buildpacks の要望もある

https://github.com/aws/apprunner-roadmap/issues/27
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
制約事項: プライベートなエンドポイント

インターネット向けエンドポイントをサポート

エンドユーザー

https://xxxxxxxx.<region>.awsapprunner.com

ロードバランサー
コンテナ化された Web アプリケーション
ネットワーク (VPC)

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
制約事項: プライベートなエンドポイント

プライベートエンドポイントは未サポート

EC2 Instance

ロードバランサー
コンテナ化された Web アプリケーション

お客様が所有する VPC

AWS が所有する VPC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
ロードマップ: 連携可能なリポジトリサービスとレジストリサービス

こちらについても要望は上がっており、
調査中のステータス

https://github.com/aws/apprunner-roadmap/issues/2
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

現時点での制約事項とロードマップ
コミュニティからの要望をどんどん出しましょう

🌱🌱 App Runner は 2021 年 5 月に出たばかり、皆様の声によって変わっていく

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

フィットするアプリケーション
👍👍 Web アプリケーション / Web API

👍👍 ステートレス
👍👍 並列処理

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

フィットするアプリケーション
Web アプリケーション / Web API

👍👍 HTTP リクエストを同期的に捌く Web アプリ
👍👍 HTTP リクエストを同期的に捌く Web API
👍👍 モノリスアプリケーション

ロードバランサー
コンテナ化された Web アプリケーション

❌ 非同期処理 (サポートされていない)
❌ マイクロサービス (プライベートエンドポイントが未サポート)
❌ SPA や静的サイトのホスティング (Amplify Hosting 推奨)

ネットワーク (VPC)

※ 非同期処理な必要なケースでは現状 AWS Copilot をご案内しています。
App Runner でもサポートして欲しいという要望がありましたらぜひ GitHub Issue を作成ください。
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

フィットするアプリケーション
ステートレス

👍👍 各 HTTP リクエストは独立して処理される
👍👍 ローカルステートに依存しない
👍👍 データやローカルステートは DB 等に保存

❌ ローカルディスクに書き込みする
❌ WebSocket 接続 (未サポート)
❌ スティッキーセッション

DynamoDB
コンテナ化された Web アプリケーション

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

フィットするアプリケーション
並列処理

👍👍 1 台で同時に複数リクエストを処理できる

❌ 1 台で同時に 1 リクエストしか処理できない

ロードバランサー

(AWS Lambda 推奨)

コンテナ化された Web アプリケーション
ネットワーク (VPC)

※ 現状最大コンテナインスタンス数が 25 台であるため、同時にリクエストが裁けない場合スケーラビリティに乏しいです
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アーキテクチャ例
App Runner + DynamoDB

App Runner + DynamoDB を利用した Web API

エンドユーザー

App Runner

DynamoDB

AWS が所有する VPC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アーキテクチャ例 (将来的に可能)
App Runner + RDS

App Runner + RDS を利用した モノリス Web アプリケーション

エンドユーザー

App Runner

Amazon RDS

AWS が所有する VPC

お客様が 所有する VPC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アーキテクチャ例 (将来的に可能)
App Runner + SageMaker

App Runner + SageMaker を利用した機械学習の推論 API

エンドユーザー

App Runner

SageMaker

AWS が所有する VPC

お客様が 所有する VPC

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アーキテクチャ例 (将来的に可能)
App Runner のプライベートエンドポイントを利用

複数の App Runner サービスを利用したマイクロサービス

エンドユーザー

App Runner

App Runner

App Runner

AWS が所有する VPC

※ 見やすさを優先してマイクロサービスごとの DB については表記を省いています
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まとめ

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

まとめ
😩😩 モダンアプリケーションへの道のりは長い

😲😲 App Runner は簡単に使えるモダンなホスティングサービス

🤩🤩 App Runner を活用して小さなコストで大きくモダナイズ

🌱🌱 App Runner が今後どう進化していくかは皆様の声次第

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ご清聴ありがとうございました

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Modern Applications Resource Hub にアクセス
豊富な日本語ガイドで皆様のモダナイゼーションの促進をサポート
•
•
•
•
•

AWS でモダンアプリケーションを構築する
モバイルアプリ、ウェブアプリを迅速に構築するには

AWS のコンテナサービスでモダナイゼーションを促進
サーバーレステクノロジーによる総所有コスト（TCO)
モダン Dev + Ops モデルの導入

その他にも ユースケースやアナリストレポートを豊富にラインアップ

https://bit.ly/3oVdKPV

Resource Hub はこちら »
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

モバイルアプリ、
ウェブアプリを
迅速に構築する
には
モダンアプリケーション開発を加速
させる、実績ある 3 つのヒント

モバイルアプリ、ウェブアプリを迅速に構築するには

お客様に喜んでいただき、従業員をサポートする
ため、モダンなモバイルアプリケーションやウェブ
アプリケーションによるイノベーションの加速が
望まれています。ユーザーエクスペリエンスと複雑
なクラウド機能に対する期待値は上昇し続けていま
すが、開発チームはその基準を満たしながら、ス
ケーラブルで安全なハイパフォーマンスアプリ
ケーションを低コストで提供する必要があります。
これは至難の業です。

モダンなモバイル / ウェブアプリケーションを構築する場合に、スケーラ
ブルなアプリケーションを迅速に提供するには、適切なチームを編成し
ておく必要があります。開発ツールの選定も重要です。新人デベロッパー
と経験豊富なデベロッパーの隔たりを埋めて短期間でアプリケーションを
構築できる一方で、社内プロセスと統合できる拡張可能なオプションもあ
る、両者のバランスが取れた開発ツールを探してください。

開発をさらに加速するには、複数のチームに分散したデータにスムーズに
アクセスできるソリューションを探して、フロントエンドチームがデータ駆
動型機能をより迅速かつ効率的に構築できるように支援します。アーキテク
チャについては、現時点でアプリケーションをサポートできるかどうか
と、今後需要の浮き沈みがあっても対応できるかどうかを考えて選択しま
す。何を決める場合も、アプリケーションのパフォーマンスとセキュリティ
の確保が最重要課題であることは変わりません。
このガイドでは、モダンなモバイル / ウェブアプリケーションの開発を加速

するための 3 つのヒントをご紹介します。
1.
2.
3.

最新のツールとフレームワーク : 専用のツールとフレームワークで
柔軟にフロントエンドチームを支援

最新の API: ユニファイド GraphQL API を使用して分散データソース
へのアクセスを簡素化

モダンコンピューティング : マネージド / サーバーレスサービスでオペ
レーションを合理化

2

最新のツールとフレームワーク

ヒント 1
最新のツールとフレームワーク :
柔軟性のある専用のツールとフレームワーク
で、フロントエンドチームを支援
状況

フロントエンドデベロッパーは、JavaScript、Swift、Kotlin などのフロント
エンドプログラミング言語、React、React Native、Flutter、Angular などの
一般的なフレームワーク、統合開発環境 (IDE) などのツールを用いて、アプ
リケーションのユーザーエクスペリエンスを差別化します。また、アプ
リケーションのプレゼンテーションレイヤーをコーディングし、API を介
してデータにアクセスして統合し、ウェブやモバイルアプリケーションの
ためのリアルタイムとオフラインで使えるビデオやチャットなどのクラウ
ド機能を構築します。

しかし、フロントエンドデベロッパーは、ユーザーインターフェイスを構
築するエキスパートであっても、一般的にはクラウドのエキスパートでは
ありません。モバイルアプリケーションやウェブアプリケーションにクラ

解決策
主要なユースケースを実現するために必要なコード量を削減する開発ツー
ルやフレームワークにより、フロントエンドチームの生産性が向上します。
認証やデータアクセスなどの最も複雑なタスクには、高度な機能を備えた
フレームワークを活用し、キャッシュ、再接続、データの同期、競合の解決を
処理する高度な機能を探します。アプリケーションの機能をコードでカス
タマイズしたり拡張したりする柔軟性を犠牲にすることなく、開発を容易に
するツールを選択します。クラウドを短期間で身に付けられるツールを
選択することで、迅速なセットアップ、迅速なワークフロー、セキュリ
ティの自動化を実現し、フロントエンドチームはお客様の問題解決に集中
できます。

ウド機能を構築して接続することは、複雑で時間がかかるため、フロント
エンドチームがユーザーエクスペリエンスの向上に集中できる時間を削
ることになります。

3

最新のツールとフレームワーク

AWS の支援方法

AWS Amplify は、フロントエンドデベロッパーが、AWS を利用した共通の
バックエンドを共有するウェブおよびネイティブのモバイルアプリケー
ションを迅速に構築するためのツールとサービスを提供します。Amplify
ライブラリは、イメージや動画をクラウドに保存するといった一般的な
ユースケースをアプリケーションに簡単に統合でき、一般的なフロント
エンドフレームワーク、言語、モバイルプラットフォームと深く連携し
ます。また、Amplify CLI と Admin UI は、必要に応じてデベロッパーが
新しいAWS バックエンドを迅速に作成するのに役立ちます。

サービスとしてのバックエンドとは異なり、AWS Amplify はデベロッパー
がアプリケーションの進化に合わせて AWS の幅広いサービスやツールを
活用することができます。Amplify CLI または Admin UI を使用してアプ
リケーションのバックエンドを構築する際は、AWS Amplify は基礎とな
るビジネスロジックとデプロイメントコードを自動的に生成するため、
デベロッパーは好みのプログラミング言語でカスタムビジネスロジック
コードを使ってアプリケーションを拡張できます。また、ウェブアプリ
ケーションを構築するデベロッパーは、AWS Amplify フルマネージドスタ
ティックウェブホスティングサービスを利用してコードリポジトリを接続
するだけで、数分でアプリケーションをデプロイすることができます。

AWS Amplify は、フロントエンドのデベロッパーがモバイルやウェブアプ
リケーションをより早く構築できるよう支援します。一般的なシナリオの
ベストプラクティスがコード化され、それが強い制御をもって提供され
ているので、AWS 上 でフルスタックアプリケーションを構築するために
必要な全体のステップとコード行数が減少します。その一方で、ビジネス
要件の変化に応じてアプリケーションをカスタマイズできる柔軟性を備え
ています。

4

最新のツールとフレームワーク

「 AWS Amplify と AWS AppSync を用いたサーバーレスアーキ
テクチャを使用することで、市場投入までのスピードを少な
くとも 50% 向上させ、 Connect の立ち上げを早めることが
できました。」
– Neiman Marcus、Omni Engineering シニアディレクター、Sriram Vaidyanathan 氏

Neiman Marcus、AWS でアプリケーションの市場投入速度を 50% 向上
課題 :

高級ブランドとして知られる Neiman Marcus は、一流のパーソナライズさ
れた顧客サービスを提供することで定評があります。エクスペリエンスをモ
ダナイズし、強化するために、オムニチャネルのオンライン販売アプリケー
ションである Connect を開発する必要がありました。このアプリケーショ
ンは、従業員がパーソナライズされた豊富な顧客情報を閲覧できるようにす
るものです。同社の目標は「お客様との出会いを忘れられないものにする」
です。

COVID-19 のパンデミックで多くの小売店が閉鎖に追い込まれると、同社
の販売もオンラインのみに移行しました。Neiman Marcus は、
これまでお客
様を魅了してきた特徴的なエクスペリエンスを提供し続け、従業員がオン
ライン販売を行えるようにするために、Connect を迅速に立ち上げる必要
がありました。

ツールとサービス
•

AWS Amplify

•

AWS AppSync

•

AWS Lambda

結果 :
•
•

Connect の市場投入までのスピードが 50% 向上

サーバーレスアーキテクチャを使用して、従来の方法に
比べてコストが 90％ 削減

導入事例を全文読む (英語) »

5

最新の API

ヒント #2
ユニファイド GraphQL API を使用して
分散データソースへのアクセスを簡素化
状況
組織は、モノリシックなアプリケーションから、クラウド上のモジュール式
のアーキテクチャへと移行を進めています。マイクロサービスと呼ばれるモ
ジュール式の独立したコンポーネントでアプリケーションを構築すると、デ
ベロッパーがコンポーネントに容易に変更を加えることができるため、リ
リース速度が向上します。
マイクロサービスは、アプリケーションのスケールアップを容易にし、開発
期間を短縮することで、イノベーションを実現し、市場投入までの時間を短
縮します。しかし、フロントエンドチームは何百もの分散したマイクロサー
ビスやデータソースに接続することが必要になり、ユーザー向けアプリケー
ションに必要なデータにアクセスすることが難しくなります。バックエンド
チームは、フロントエンドチームがアプリケーション内で利用しやすいよう
にデータアクセスを合理化することで、ウェブやモバイルの開発を加速さ
せるという重要な役割を果たします。

解決策

GraphQLなどの技術で、複数のバックエンドのデータソースにまたがるデー
タアクセスと統合の速度と効率が向上します。GraphQL は、API のためのク
エリ言語であり、既存のデータを使ってそのクエリを実行するためのランタ
イムです。GraphQL は、API 内のデータを完全かつ理解しやすい形で提供
するため、フロントエンドのデベロッパーは、複数のバックエンドデータ
ベースやマイクロサービスから、各 API コールで必要なデータを正確に照会
することができます。

バックエンドの開発チームが GraphQL を使用して既存のデータソースを
単一のエンドポイントとして抽象化することで、フロントエンドチーム
が簡単にデータにアクセスできるようになります。既存の API セットで
は、多数のエンドポイントを単一の GraphQL API に抽象化することで、API
を移行したりアプリケーションをゼロから書き直すことなく、GraphQL の
メリットを享受することができます。GraphQL で統一された API レイヤー
を作成することで、既存のREST API 戦略を補完し、分散型サービスアーキ
テクチャとの連携を簡素化することで、フロントエンドデベロッパーの作
業効率を向上させることができます。
6

最新の API

AWS の支援方法

AWS AppSync は、Amazon DynamoDB や AWS Lambda などのデータソー
スに安全に接続するための重い作業を代行することで、GraphQL API の開
発を容易にするフルマネージドサービスです。パフォーマンスを向上させる
ためのキャッシュ、リアルタイム更新をサポートするためのサブスクリプ
ション、オフラインのクライアントを同期させるためのクライアントサイド
データストアの追加も簡単です。AWS AppSync はデプロイされた後、API
リクエストのボリュームに合わせて、GraphQL API 実行エンジンを自動的に
スケールアップ、スケールダウンします。

AWS AppSync で動作する GraphQL API では、フロントエンドデベロッ
パーが単一の GraphQL エンドポイントから複数のデータベース、マイク
ロサービス、および API にクエリを実行する機能を提供することで、組織
はアプリケーションを迅速に開発することができます。また、AWS
AppSync は、 GraphQL API の開発と拡張を容易にします。そして、実際のト
ラフィックパターンに応じてスループット容量を自動的に調整します。

AWS AppSync は、他の AWS のサービスとの統合を提供しており、API のセ
キュリティ、モニタリング、トラブルシューティングを容易にしています。
これらのサービスには以下のものがあります。
1.
2.
3.
4.

AWS WAF で API を一般的なウェブエクスプロイトから保護
Amazon CloudWatch によるメトリクスとログ
AWS X-Ray によるトレース

AWS CloudTrail による監査ログ

7

最新の API

「 AWS AppSync サービスに携わるエンジニア 1 人で、
コンセプトから本番まで 1 か月足らずで実現しました。」
– Public Good Software、最高技術責任者、Michael Manley 氏

Public Good は、コンセプトからプロダクションまで、1 か月以内に、エンジニア 1 人
で実現しました。
課題 :

Public Good Software は、ジャーナリズム記事と関連する慈善活動を結び
つけることで、ニュースを実用的なものにすることを目的とした、コーズ
マーケティングプラットフォームのトップクラス企業です。AWS AppSync
により、この企業は API のバックエンドを担当するエンジニア 1 人で、
コンセプトから本番までを 1 か月以内に完了することができました。クライ
アントからバックエンドへのコールが少なくて済むため、AWS
AppSync を使用することで、実用的なコンテンツを配信する際のレイテン
シーを下げることができました。AWS AppSync と GraphQL の組み合わせに
より、1 回のネットワークリクエストで複数のマイクロサービスからデータ
を取得し、集約することができました。

ツールとサービス
•

AWS AppSync

•

Amazon SageMaker

結果 :
•
•
•

API の改善を実行し、1 か月以内で本番に移行

更新された API により、カスタマーエクスペリエンスの改善、お
よびページのロード時間を短縮

変動するサイトのトラフィックに合わせて、アプリケーションを
シームレスに拡張

導入事例を全文読む (英語) »

8

モダンコンピューティング

ヒント #3
マネージド / サーバーレス
サービスでオペレーションを軽減
状況

解決策

Deloitte の報告によると、IT リソースの 80% はビジネスの運営に集中して
1
おり、20% はイノベーションに集中しています。
この割合を改善し、イノ
ベーションに偏らせる一番の近道は、インフラストラクチャ管理のような
ビジネスの中核ではない活動に費やす時間を減らすことです。サーバー、
ストレージ、ネットワーク、OS の管理には、時間とコストがかかり、調達
サイクルの関係で俊敏性にも欠けます。 インフラストラクチャの管理は、

運用コストを削減する最も簡単な方法のひとつは、インフラストラク
チャにマネージドサービスやサーバーレスサービスを採用し、運用負荷を
クラウドプロバイダーに委ねることです。サーバーのプロビジョニング、

チームの時間を消費する一方であるため、逆に言えば最適化してイノベー
ションに再投資する大きなチャンスであるともいえます。

管理、パッチ適用にかかる時間を短縮することで、デベロッパーはより多
くの時間をイノベーションに費やすことができます。すなわち、お客様に
喜んでいただける製品のためのコードを書いたり、繰り返し作成することに
時間を費やすことができるのです。サーバーレスコンピューティングでは、
プロビジョンや管理のためのインフラストラクチャが必要ありません。
インフラストラクチャは、サーバー単位ではなく、利用単位で自動的にス
ケールアップします。利用した分だけ料金が発生し、可用性や耐障害性も
備わっています。サーバーレスコンピューティングでは、サーバー運用の負
担がなくなるため、アプリケーションをサポートするためのインフラストラ
クチャの管理やスケーリングではなく、アプリケーションの構築に集中す
ることができます。

1 https://www2.deloitte.com/us/en/insights/focus/cio-insider-business-insights/tech-ﬁnance-technology-investment-budgeting-processes.html

9

モダンコンピューティング

AWS の支援方法

はじめての場合、サーバーレスでイベント駆動型のコンピューティングサー
ビスである AWS Lambda から始めるのが最適といえるでしょう。

AWS Lambda は、ビジネスロジックのコードを記述するだけで使用できま
す。AWS Lambda はイベント指向なのでイベントが発生してシステムが
アクションを開始するまでアイドル状態になります。実際、200 以上の
AWS のサービスや SaaS アプリケーションから、統合コードを書くこと
なく、AWS Lambda 関数を自動的にトリガーすることができます。イベン
トがトリガーされると、タスクに必要なリソースがミリ秒単位で稼働し、
その後元に戻ります。インフラストラクチャのプロビジョニングや設定を
気にする必要がなく、使った分だけ支払うことができます。これにより、

本稼働までの時間を短縮し、可能な限り TCO を低く抑えます。AWS Lambda
は、最小限のオペレーションで最大限の俊敏性を実現しますが、組織によっ
ては自身でインフラストラクチャの微調整を行うことにより、ビジネス価値
を高める場合もあるでしょう。AWS Lambda を、Amazon ECS や Amazon
EKS のような AWS 上のコンテナサービスで補完することで、そのニーズに
応えることもできます。

10

モダンコンピューティング

「これだけのセキュリティ、精度が要求され、レイテンシーの

制限もある、通常なら複雑とされるアーキテクチャも、 AWS
Lambda
のようなサービスを使うことでシンプルになり、
ユーザーに魔法のような体験を提供できます。」
– Coca-Cola Freestyle、チーフアーキテクト、Michael Connor 氏

Coca-Cola、わずか 100 日で新しいタッチレス飲料ディスペンシング
アプリケーションを構築
課題 :

COVID-19 のパンデミックが発生したとき、Coca-Cola には革新のチャンス
が訪れました。同社は、Freestyle ドリンクディスペンサーをタッチレスにす
るために、新しいスマートフォンアプリケーションを構築し、お客様が自動
販売機に触れることなくドリンクの注文や支払いができるようにしたいと考
えていました。

Coca-Cola は、AWS Lambda に組み込まれたセキュリティ、レイテンシー、
スケーラビリティの機能を活用することを選択し、デベロッパーはアプリ
ケーションそのものに集中することができました。その結果、Coca-Cola
はわずか 100 日でアプリケーションの構築を完了しました。現在では、
30,000 台以上のマシンにこのタッチレス機能が搭載されています。

ツールとサービス
•

AWS Lambda

•

Amazon API Gateway

•

Amazon CloudFront

結果 :
•
•
•

モバイルアプリケーションのプロトタイプを 1 週間で発表
150 日で 10,000 台のマシンにスケールアップ

モバイルデバイスとディスペンサーの接続をミリ秒単位で実現

導入事例を全文読む (英語) »
11

まとめ

開始方法

最新のモバイルおよびウェブアプリケーションの開発を加速するため
の 3 つのヒントをご覧になり、早く開発を始めたいと思われていることで
しょう。モダンアプリケーションを構築するための現在のアプローチを補
完するために、これらのヒントの 1 つまたは複数から始めることをお勧め
します。
AWS Amplify はフロントエンドチームを強化し、フルスタックアプリ

ケーションの構築に必要な全体的なステップとコード行数を削減するこ
とで、デベロッパーの迅速な立ち上げを支援します。AWS AppSync は分
散したデータソースへのアクセスを簡素化します。既存のデータソースを
ユニファイドGraphQL API エンドポイントに抽象化することで、フロント
エンドチームがデータ駆動型の機能を構築するためのデータアクセスが
容易になります。また、AWS Lambda のようなサービスを利用して、イン
フラの運用を少なくすることができます。マネージドサービスやサー
バーレスサービスをモダンインフラストラクチャに採用することで、アプ
リケーションの構築に集中することができます。
どの方法を選んでも、AWS でユーザーエクスペリエンスとクラウド

サービスに対する高まる要求をクリアし、スケーラブルなハイパフォー
マンスアプリケーションを低コストで提供できます。機能豊富なモバイル
およびウェブアプリケーションを迅速かつ容易に構築する方法をお調べい
ただくか、すぐに当社のツールやサービスの使用を開始することができ
ます。

その他のリソース

AWS Amplify で モ バ イ ル お よ び ウ ェ ブ ア プ リ ケ ー
ションの構築を開始 (英語) »
GraphQL による API モダナイゼーション (英語) »

Deloitte による 2021 年版サーバーレスの TCO レ
ポートを読む »

AWS AppSync GraphQL ブログで実践的なヒント
を得る (英語) »

フロントエンドウェブおよびモバイルブログの記事
を探す (英語) »

アプリケーションのモダナイゼーションを開始する »
AWS へのお問い合わせ »

© 2021, Amazon Web Services, Inc. or its aﬃliates. All rights reserved.

12

ユースケースに最適なデータベースを選択する

ユースケースに最適な
データベースを選択する
アマゾン ウェブ サービスに関する
dbInsight の調査

© dbInsight LLC 2021® | dbInsight.io

1

ユースケースに最適なデータベースを選択する

エグゼクティブサマリー
トリガー
デジタルビジネスを推進するグローバル経済の変化により、スケーラブルでクラウドに
対応した新世代のモダンアプリケーションへの需要も増大しています。従来の社内用の
エンタープライズ向けトランザクションアプリケーションと比較して、モダンアプリケ
ーションは、幅広いシナリオとデータタイプに対応しているため、パフォーマンス、ス
ケール、地理的な範囲など、各種要件も多様化しています。オンラインゲームの何百万
もの同時セッションのサポートから、金融取引における不正パターンの特定、予測不可
能な需要のスパイクに伴うシナリオでの一貫したハイパフォーマンスの提供まで、様々
なユースケースに対応する万全の解決策となるような単一のデータ管理レシピはありま
せん。従来の SQL リレーショナルデータベースをはじめ、NoSQL key-value ストア、
ドキュメントデータベース、グラフデータベースなど、さまざまな選択肢がある中で、
組織はどのようにして正しい選択をすればよいのでしょうか。

私たちの見解
データベースの選択は、ユースケースによって決まります。エンタープライズがビジネ
スユースケースやシナリオに対応するために 1 つのデータベースを採用するか、ま
たは複数のデータベースを採用するかについて決定する唯一の公式はありませんが、
このような場合、既成概念にとらわれず、問題を構成パートに分解して、ACID トラン
ザクションの一貫性、参照整合性、レイテンシー、可用性などの要件の必要性を評価す
る必要があります。例えば、ウェブやモバイルのコマースアプリケーションでは、簡単
なルックアップや検索機能、場合によっては売れ筋項目を表示するリーダーボードなど
が必要になることがありますが、そのような場合には、複数のデータベースシステムを
組み合わせることが最適なソリューションとなることがあります。
© dbInsight LLC 2021® | dbInsight.io

2

ユースケースに最適なデータベースを選択する
また、エンターテイメントコンテンツの複雑な相互関係を整理するなど、問題が細分化
され、明確に定義されている場合には、単一のソリューションで課題に対応できる場合
もあります。
データソリューションを選択する際の最初のステップは、常にビジネスゴールからスタ
ートし、そのゴールを達成するために必要なタスクを評価します。多くの場合、タスク
内容やデータに対する要求は多岐にわたります。例えば、e コマースでは、安定したデ
ータと変動データが混在していることが多いため、簡単なルックアップや検索、また頻
繁にアクセスするデータを素早くソートして取り出すオペレーションが必要となりま
す。 データベースには数多くの選択肢があり、エンタープライズはジョブに最適なデ
ータソリューションを選択する上で妥協する必要はありません。

多様なユースケースには多様な対応が必要
モダンアプリケーションに求められるもの
エンタープライズのデータ管理のユースケースにおいて、単一のデータベースエンジン
が一般的な答えであった時代は終わりました。リレーショナルデータベースは、厳密な
ACID 保証、およびリファレンスが有効であることを示す厳密な参照整合性を必要とす
る多くのアプリケーション (金融取引処理など) の主力となっています。それらは、高
レベルの宣言型 SQL 言語を用いてデータにアクセスする論理的な手段を提供し、デー
タが物理的にどこに存在するかを把握せずともデータにアクセスすることができます。
しかし、デジタルビジネスの台頭により、スケール、パフォーマンス、クエリ、データ
タイプなど、さまざまな要件に幅広く対応する必要性が高まり、リレーショナルデータ
ベースを置き換えるのではなく、補完するための代替手段が求められるようになりまし
た。今日、組織はかつてないほど多くの選択肢を持っています。データベースの選択に
関しては、無理をする必要はもうありません。
© dbInsight LLC 2021® | dbInsight.io

3

ユースケースに最適なデータベースを選択する
エンタープライズは、ジョブに最適なツールを選択するべきです。場合によっては、ビ
ジネス上の問題に対処するために、機能が異なる複数のタスクが必要になることもある
ため、複数のデータベースを選択する必要があります。
図 1 は、さまざまなビジネス上の問題に対応するため、AWS が提供しているデータベ
ースのポートフォリオを示しています。

図 1.AWS のデータベースのポートフォリオ

出典: アマゾン ウェブ サービス

© dbInsight LLC 2021® | dbInsight.io

4

ユースケースに最適なデータベースを選択する

デジタルビジネスはどのようにグランドルールを変えるのか
従来のエンタープライズ向けトランザクションアプリケーションと比較して、現代のクラ
ウドベースのアプリケーションには、さまざまなパフォーマンスや処理要件があります。
Amazon は、元々小売業を営んでいたこともあり、とりわけ Amazon プライムデーのよ
うな極端なシナリオに対応する際には、この教訓を身をもって学びました。400 以上のフ
ルフィルメントセンターにまたがるグローバルなイベントであるため、需要がスパイクし
ても、商品の検索やレコメンデーションにおいて、また金融取引の実行で参照整合性と
ACID トランザクション保証を完結させるうえでも、一貫した高いパフォーマンスを維持
する必要があります。Amazon プライムデーをサポートするタスクの各パートは異なる機
能を必要とするため、Amazon はタスクの各パートに異なるデータベースを使用してお
り、ほかにもいくつもの AWS のサービスを採用しました。その結果、期間中の 66 時間
で Amazon DynamoDB に対して 16 兆 4,000 億回のデータベースコール (ピーク時には 1
億 8,010 万回/秒のリクエスト) を処理し、フルフィルメントセンターをサポートするた
めに 1,900 以上の Amazon Aurora インスタンスが使用されました。
多くのオンライン語学トレーニングを提供する Duolingo の場合、モダンアプリケーシ
ョンにおいても、目的に応じたアプローチを実現するために個別のタスクを必要としま
す。Duolingo では、98 種類の言語コースを選択することができ、3 億人の生徒層にサ
ービスを提供して、毎月何十億もの演習が行われています。常時稼働するオペレーショ
ナルデータベースで生徒の学習状況を把握する必要があるため、Amazon
DynamoDB を使用して生徒の進捗具合を管理しています。また、Amazon ElastiCache
for Redis を使用して、レッスンが無事に継続されるように検索頻度の高いキーワー
ドを取得し、Amazon Aurora PostgreSQL を使用して、グローバルビジネスを運営する
ためのバックエンドトランザクション処理システムを提供しています。大手旅行予約サ
イトの場合も課題は同様で、個々の顧客の検索履歴を迅速に取得したり、ホテルや航空
© dbInsight LLC 2021® | dbInsight.io

5

ユースケースに最適なデータベースを選択する
券の予約の進捗状況が失われないようにキャッシュ層を活用したりして、予約を確保す
るためのトランザクション処理システムを補完しなければなりません。これらのケー
スに共通しているのは、大きなスケールのオンラインビジネスを運営するにあたり、実
行される各タスクは、単一のデータモデルを持つ単一のデータベースでは容易に処理で
きないということです。

適切なパスの選択
デジタルトランスフォーメーションのペースは、組織によって異なります。新製品や新
サービスの立ち上げ、お客様やビジネスパートナーとの新たなモバイルエンゲージメン
トの構築、または従来のチャネルに加えてソーシャルメディアやモバイルを駆使した新
たなマーケティングイニシアティブの構築などで、事業部門の担当チームからじわじ
わと要望がわき上がってくる場合もあります。あるいは、経営幹部による大きな戦略的
転換が発端となり、デジタルビジネスを導入するための企業戦略が創出される場合もあ
ります。
いずれにしても、最初のステップは、ビジネス目標を特定して、その障害となり得る運
営上および技術上の課題を識別することです。次に、既存のデータベースとアプリケー
ションのポートフォリオを評価して、コストとボトルネックを特定した後、 ビジネス
上の課題やワークフローを一連のタスクに細分化するプロセスに移ります。それは、多
くの組織にとって、リレーショナルデータベースをデフォルトとしてきた長年の経験に
基づく既成概念からの脱却を意味します。リレーショナルデータベースは依然として中
心的なロールを担っていますが、常時稼働、拡張性、および超低レイテンシーを必要と
するタスクにおいては、他の選択肢を検討する必要があります。候補となるソリューシ
ョンを特定した後、エンタープライズは、ソフトウェアの更新やパッチの適用を維持し
ながら、コンピューティングノードの追加や削除、データの配信、ストレージの階層化
が必要になる可能性などの運用要件を理解する必要があります。ほとんどの場合、
© dbInsight LLC 2021® | dbInsight.io

6

ユースケースに最適なデータベースを選択する
これらのタスクは、エンタープライズがデジタルビジネスを導入するという目標におい
て、面倒な作業となるのは明らかです。マネージドクラウドサービスにより、組織は、
容量、システム構成、ロードバランシング、ソフトウェアのメンテナンスなどの管理か
ら解放されるため、会社を存続し続けることからビジネスを革新することに焦点を移す
ことができます。これらのサービスには、様々なユースケースに合わせて構築された幅
広いマネージドデータベースサービスが含まれています。
現代の組織でデータベースの選択がどのように行われているかをよりよく理解するた
めに、サンプルのユースケースでいくつかのデザインパターンの例を見てみましょう。

ディープダイブ: ユースケース
ウェブコマース
ウェブコマースアプリケーションは、表面的には、オンラインで商品を販売するという
単一の目的を持っていますが、その内部には非常に多様な機能要件があります。
それは、お客様と商品を結びつける必要性からスタートします。そのためには商品テー
ブルが必要ですが、コマースプロバイダーによっては、何千万もの SKU を持つ巨大な
テーブルになることもあります。各 SKU は一意の識別子を持ち、ほとんどの場合、製
品カテゴリー、名称、パッケージ、モデル番号、料金などの複数の属性を持っていま
す。これは、Amazon DynamoDB のような key-value データベースに適しています。
なぜなら、すべてのクエリは単純なルックアップだからです。個々の製品や SKU を示
す一意の識別子を見つけ、それに関連するすべての属性を取得します。 例えば、ロー
ドバイクやトレイルバイクのメーカーとモデルを選択したとします。クエリがシンプル
なので (メーカー名とモデル名を尋ねるだけ)、リレーショナルデータベースと比較す
ると (メーカーテーブルと製品モデルテーブルを結合して結果を生成する必要がある)、
より効率的に結果を取得することができます。
© dbInsight LLC 2021® | dbInsight.io

7

ユースケースに最適なデータベースを選択する
従来、製品テーブルはリレーショナルデータベースで処理されていましたが、アプリケ
ーションが極めて予測不可能なトラフィックスパイクにさらされる場合は、安定した高
速応答を実現するために、データの非正規化とスケールアウトが可能なデータベースが
必要です。これはまさに key-value ストアが得意とするものです。さらに、Amazon
DynamoDB のように key-value ストアがサーバーレスソリューションとしてデプロイ
されている場合、エンタープライズはサービスレベルを定義することに集中でき、 必
要なノードの数を計算する必要がありません。ウェブサイトを補完するためにモバイル
コマースチャネルを追加する場合、モバイルネットワークがもたらす遅延を補うた
めに、さらなるパフォーマンスの向上を実現し得る Amazon ElastiCache のようなキャ
ッシングサービスが必要になるかもしれません (例: ミリ秒単位の遅延)。
欲しい商品が決まっていてウェブサイトに入るお客様もいれば、しばしば、自分のニー
ズに合った商品を探すために商品検索を必要とするお客様もいます。これは、クエリの
パターンが容易に予測できない、非常に可変的なアクセス形態であるため、検索インデ
ックスが有力な候補となります。この検索インデックスは、商品テーブルが更新され
ると、key-value データベースからリアルタイムに更新情報を取得するように設計する
ことで、常に最新の検索結果を得ることができます。例えば、自転車を探す場合、フレ
ームの種類 (アルミ、カーボンなど)、フレームサイズ、ブレーキ (油圧、リム、ディス
ク)、ディレイラー (変速数)、ホイールセットなどを基準に比較することがあります。
新しいディスクブレーキの導入など、商品が更新された時には、key-value データベー
スからリアルタイムに更新され、最新の結果が得られるようになっています。
お客様が商品を購入する際、自身の選択を検証するために、どの項目が一番人気なの
かを知りたいことがよくあります。そこで、リーダーボードの出番です。リーダーボー
ドには、頻繁に照会されるデータに素早くアクセスできるハイパフォーマンスなエンジ
ンが必要ですが、売れ筋の商品を見つけるために全製品のリストをスキャンするような
© dbInsight LLC 2021® | dbInsight.io

8

ユースケースに最適なデータベースを選択する
オーバーヘッドは必要ありません。そこで、オープンソースのインメモリーデータベー
スである Redis と、それをリアルタイムで更新する Amazon DynamoDB という 2 つの
データベースを組み合わせることで、この課題を解決することができます。Amazon
ElastiCache サービスのエンジンとして提供されている Redis には、スコアデータの保
存に最適化された「ソートセット」という機能があり、Amazon DynamoDB からのリ
アルタイム更新と組み合わせることで、リーダーボードは常に更新され、インメモリー
ストレージのおかげで瞬時に取得することができます。結果として、スコアは常に最
新の状態に保たれますが、これはオンラインゲームのユースケースにも役立ちます。
商品を購入するお客様は、自分のニーズに最も適した商品や、同じようなニーズを持つ
お客様の間で人気のある関連商品を選べるようガイドしてくれるレコメンデーションを
求めていることがよくあります。レコメンデーションソリューションの構築は、セグメ
ンテーション分析の基礎となる顧客プロファイルからスタートし、それをもとにレコメ
ンデーションを形成していくことができます。Amazon DocumentDB (MongoDB 互換
性) のようなドキュメントデータベースは、柔軟な JSON データモデルを備えており、
顧客プロファイルに適しています。
商品の検索や購入などの行動は、データモデルを変更することなく、すぐに顧客レコー
ドの更新につながります。収集された行動を分析することで、顧客セグメンテーション
モデルに反映させることができ、それによって製品のレコメンデーションを行うことが
できます。関連するユースケースとしては、顧客プロファイルに収集された行動を分析
して、解約の可能性を分析したり、行動が異常値とみなされた場合に不正検出を行った
りできます。グラフ Amazon Neptune のようなデータベースも、ここで重要な役割を
果たすことができます。同じ商品を購入した他の購入者をグラフで確認すると、彼らが
購入した他の商品の情報が得られ、その結果を順位付けすることができます (多くの場
合、別のリーダーボードを使用します)。
© dbInsight LLC 2021® | dbInsight.io

9

ユースケースに最適なデータベースを選択する

接触者追跡
公衆衛生に対する意識や関心が高まるにつれ、接触者追跡の役割の重要性が高まっていま
す。感染症の場合、接触者追跡は、病気の広がりのロードマップを提供し、リスクのレベ
ルに関するガイダンスを提供することができます。人と人とのつながりのパターンや性
質を把握することで、リスクのレベルや、リスクレベルが上がっているのか下がってい
るのかを理解することができ、ひいては感染症の今後の経過を予測したり、公共政策のポ
リシーを立てたりするのに利用できます。データは手動で収集されることもあれば、許可
された法域ではモバイル機器からの自動データ収集によって集めることもあります。接触
者追跡は、以下のような質問に対する答えを提供することを目的としています。
● 接触履歴に基づいて、人々がどこにいて、どのような状態にあるのか。
● 疾病の存在と採られた保護措置に基づく地理的リスクレベル。
● 人々が地域の制限をどの程度遵守しているか。
これは、Amazon Neptune のようなグラフデータベースで扱える典型的な問題であ
り、従来のリレーショナルデータベースでは管理することが不可能ではないにしても難
しい、多対多の関係を追跡することができます。対人関係を追跡する際には、時間、接
触の濃厚さ、地理的な位置などの変数が関連する要因となります。これらの属性は、そ
れぞれお問い合わせや追跡が可能なノードやプロパティとなります。そこから同様の方
法で、接触者をその濃厚度 (その人と一緒に過ごした時間の長さ) や位置情報に基づい
て追跡することができます。
従来のリレーショナルデータベースでは、何十、何百、何千ものテーブルを複雑に結合
する必要がある一方で、グラフデータベースのクエリでは、暴露期間や地理的位置な
どの属性に基づいて、隣接する接触者に数回「ホップ」するだけで終わります。

© dbInsight LLC 2021® | dbInsight.io

10

ユースケースに最適なデータベースを選択する
これにより、感染暴露の範囲がわかり、感染者と近くで接していた人に対してどのよう
な対策をとるべきかをアドバイスすることができます。

導入事例
Caresyntax: 運用データストアと分析データストアの適切な組み合わせを見つけ
る
データソリューションを選択するには、データとそれがどのように消費されるかを理解
する必要があります。Caresyntax は、ヘルスケア提供者の手術室を最適化するソリュ
ーションを提供しています。ヘルスケア提供者にとって、クラウドのスケーラビリテ
ィは、需要のスパイクに対応する容量に影響するだけではなく、オペレーション効率と
ビジネス成果の両方に直結する より詳細な分析を行う能力にも影響します。クラウ
ドのスケールは、レガシーオンプレミスアーキテクチャをベースにしたデータシステ
ムにとって、プロセスのボトルネックを解消するという、もう 1 つの鍵となる利点を
もたらします。
2019 年、Caresyntax は事業において鍵となるギャップを埋める大きな買収を行いまし
た。それは、病院が手術室を予約する際の効率性を追跡するためのオペレーション分
析を追加するというものです。これは、臨床結果の追跡と分析に重点を置いていた既
存のビジネスを補完するものでした。ほとんどの病院では、請求額、設備、専門家の利
用において相当大きな割合を占めているのは手術です。成功している病院は、手術室を
効率的にスケジュールして活用し、常に患者に良い結果をもたらしています。オペレー
ションの効率性と臨床結果の分析は、これまでサイロ化されていましたが、一方が他
方に与える影響を理解し、そこから教訓やベストプラクティスを生み出すことができれ
ば、大きな潜在的メリットがあります。

© dbInsight LLC 2021® | dbInsight.io

11

ユースケースに最適なデータベースを選択する
Caresyntax の外科施設向けオペレーション分析ソリューションは、トランザクション
処理と軽い分析クエリの処理に Amazon Aurora MySQL を含む複数の AWS データベー
スサービスを使用しています。また、トランザクションシステムでは実現できないスケ
ールときめ細かさを必要とする分析クエリでは、Amazon Redshift が使用されていま
す。さらに、頻繁に照会される「ホット」データをキャッシュする場合はオープンソー
スの Redis、そしてレポーティングパラメータの可用性を管理するためには Amazon
DynamoDB が使用されています。
もともと、トランザクションデータベースを選択する際の鍵は、スキルとスケーリン
グの要件にありました。チームは、セルフマネージド MySQL データベース上で実装を
開発しましたが、サービスの成功に伴い、トランザクションやクエリのトラフィックを
処理するために、よりスケーラブルなシステムが必要になりました。Caresyntax のソ
リューションは、手術室の利用状況に関するベーシックなデータを保存しており、典型
的なトランザクションデータベースのユースケースのプロファイル、つまり比較的限ら
れた列やフィールドに対して大きなボリュームの読み込み/書き込み/更新/削除のクエ
リを実行するというプロファイルに合致します。データの範囲は限られていますが、ト
ランザクションストアのサイズは数百万行と非常に大きいものです。
AWS は、Aurora を通じて、チームのオリジナルの MySQL 実装との完全な互換性を備え
たサービスを提供しています。チームは、コード行数や基本的なスキーマを変更すること
なく、MySQL との互換性を持つ Amazon Aurora に移行することができました。チームは
クラウド用に設計されたデータベースサービスを手に入れることができましたが、このサ
ービスには書き込みコミットを高速化するスマートストレージ層、読み込みを高速化する
自動 3 方向レプリケーション、そしてベーシックなセルフマネージドのオープンソース実
装では実現できない非常に高い可用性などが備わっています。これは、トランザクション
ボリュームや行数が多いデータベースにとって非常に重要です。
© dbInsight LLC 2021® | dbInsight.io

12

ユースケースに最適なデータベースを選択する
Aurora はトランザクションに使用される一方で、手術室の稼働率のような軽量のクエ
リにも使用されます。これは、比較的少数の列のルックアップを伴うもので、数百万行も
あるトランザクションストアであっても容易に処理できます。
別の分析ソリューションも必要になりました。手術室の利用に影響を与える要因は、ス
ケジューリングだけではありません。手術に関連するイベントとともに在庫を追跡する
必要もあります。それは、患者が手術室に入るところから、麻酔の投与、手術の実施、
そして患者を回復に向かわせるために必要なステップにまで及びます。非常に多くのデ
ータ要素があるため、列指向データベースのほうが分析クエリをより快適に処理でき、
時折使用される「よりクールな」データを分析するためのフェデレーテッドクエリ実行
機能も備えています。フェデレーテッドクエリは、常に ETL を実行しながら、よりク
ールなデータをデータウェアハウスに置いておくことに代わる、コスト効率と時間効
率に優れた方法となります。
Caresyntax では、トランザクションシステムに比べてはるかに多くのエンティティつ
まり列を含む膨大な量のデータを保存できることから、データウェアハウスサービスで
ある Amazon Redshift を使用しています。Redshift は、手術室の利用率以外にも、機
器の詳細や移植されたデバイス、手術のステップやイベントなどのデータを保存するた
めにも使用されています。その結果、Aurora は手術室の全体的な使用率を分析するた
めに使用できますが、Redshift はそれよりも更に詳細に掘り下げることができます。
例えば、同じ手術を行うのになぜ同じ (または異なる) 外科医が異なる時間を要したの
かなど、個々の外科医のパフォーマンスを比較することができ、さらに、一連のステッ
プを分析してベストプラクティスを策定するのに役立ちます。このレベルの詳細さは、
データの管理や分析用アクセスの提供において効率的にオートスケールができなかった
従来のオンプレミスのデータウェアハウスでは不可能だったでしょう。

© dbInsight LLC 2021® | dbInsight.io

13

ユースケースに最適なデータベースを選択する
今のところ、Caresyntax は Redshift を所定の環境でのデータ分析に限定して使用して
いますが、臨床ケア分析ソリューションのために Amazon S3 ストレージにデータを保
存している企業にとって、Redshift は将来的な保証にもなります。将来的には、
Caresyntax の臨床分析アプリケーションである Qvident で、S3 に保存されたビデオの
メタデータを照会するため、Redshift Spectrum が使用されるかもしれません。
Qvident は、手術のビデオのレコードを作成し、個々の手術のステップを分析すること
ができます。
Caresyntax はまた、Aurora と Redshift を補完するため、頻繁に照会される「ホット」
データのキャッシュ層として、Amazon EC2 で Redis を実行しています。さらに、
Amazon DynamoDB はレポーティングの設定にも使用されていて、これは Caresyntax
が異なるヘルスケアシステム間での様々なレポーティング要件をサポートできるように
するための重要な機能です。要件は、規制制度の変化により継続的に進化します。
NoSQL データストアを使用することで、Caresyntax は要件を保存することができ、レ
ポートの要件が変更されるたびにスキーマを変更しなければならないというオーバーヘ
ッドの負担がありません。

Zulily: オンライン小売業者は、ターゲットを絞った検索で顧客のリピートを維持
Zulily は、母親や子ども向けの商品を販売するオンラインの小売業者で、ショッピン
グをイベントベースの体験にすることで顧客を惹きつけています。Zulily は会員制のサ
イトで、女性向けのファッション、子ども向けのアイテム、家庭用のインテリアなど、
毎日新しい品揃えを閲覧でき、パーソナライズされたショッピング体験を約束していま
す。Zulily は、会員に「ベストな料金」を約束し、1 日に 100 以上のイベントを開催
し、9,000 種類のスタイルをサイト上で通常 72 時間公開しています。
このオンライン小売業者は、オンラインインフラストラクチャの大部分を AWS に置
き、Amazon DocumentDB (MongoDB 互換) や Amazon Aurora MySQL など、
© dbInsight LLC 2021® | dbInsight.io

14

ユースケースに最適なデータベースを選択する
複数のデータベースサービスを利用しています。また、Amazon EC2 上で
MongoDB を独自に実装し、サードパーティのデータウェアハウスを使用していま
す。このサイトはイベントドリブンで、毎朝 6 時 (太平洋時間) にリフレッシュされ
るため、Zulily は Amazon Kinesis Data Analytics を利用して、Kinesis Data
Streams のクリックストリームデータから検索イベントをフィルターしています。
Kinesis Data Analytics は、Zulily が SQL に似たステートメントを簡単に記述し、巨
大なデータセットの検索イベントを大規模にフィルターできるようにします。 お客
様がログインして検索したり、新商品を見つけたりすると、Zulily はお客様が投稿し
た検索キーワードを取得し、関連するブランドや商品カテゴリーをルックアップ
し、在庫チェックを行い、人気のある検索キーワードやブランド、商品カテゴリ
ーを検索候補として提供します。最近導入された Zulily の提案型検索機能は大ヒッ
トを呼び、検索機能を利用する Zulily の顧客の 75% 以上が検索候補を活用して買い
物をしています。
検索候補は、関連するキーワード、ブランド、カテゴリーに基づいて、トレンドの検索
結果を表示し、豊かな体験を提供します。この「提案型検索」には、お客様の心を動か
すようなイメージやグラフィックがふんだんに使われています。この新機能は、主にト
レンド検索に焦点を当てた、よりモノリシックの検索機能に取って代わるものです。
昨今の e コマースでは当たり前のことですが、Zulily は、オフラインで広範囲なユーザ
ーリサーチを行い、メンバーの好みを理解し、それを出発点として、提案型検索を形成
します。提案型検索の差別化は、Zulily がお客様の好みをどのようにアクションに繋げ
るかということに基づいています。
舞台裏では、データベースとストリーミング分析の選択により、Zulily はこの使用頻
度の高い機能をより早く構築し、市場投入までの時間を短縮することができました。
チームは、検索イベントを保存するために DocumentDB を選択したほか、リアルタイ
© dbInsight LLC 2021® | dbInsight.io

15

ユースケースに最適なデータベースを選択する
ムのクリックストリームにスマートフィルターをかけてデータベースに入力される検索
イベントを抽出するために Kinesis Data Analytics を選択しました。
提案型検索の仕組みは以下の通りです。Zulily の会員がウェブサイトやモバイルアプリ
ケーション上で行うあらゆるアクションは、Amazon Kinesis Data Streams にクリック
ストリームイベントとして記録されます。Zulily の会員が検索をリクエストすると、
Kinesis Data Analytics がクリックストリーム分析から関連するイベントをフィルターし
ます。その後、マイクロサービスは検索イベントを別の Kinesis ストリーミングにフィ
ードし、それが Lambda 関数のトリガーとなって、関連するブランドやカテゴリーのル
ックアップをリアルタイムに実行します。その結果はエンリッチドイベントとして
DocumentDB に保存されます。これらの結果は、キーワード、関連するブランド、カテ
ゴリーで構成される検索候補として表示されます。検証された検索結果は、上述したよ
うに、関連性のある追加の提案を含むリッチディスプレイとしてユーザーに返され、お
客様にショッピングのインスピレーションを与えます。DocumentDB は豊富な検索イベ
ントをホストし、DocumentDB に保存されたデータに基づいて在庫チェックが行われま
す。在庫チェック後の最終的な結果は、素早い持続性が可能な Amazon ElastiCache for
Redis に保存され、REST API を介して顧客がアクセスできるようになっています。
DocumentDB と Kinesis の両方が選ばれた理由はいくつかあります。DocumentDB が
選択された理由は、第一に、MongoDB と互換性のあるデータベースとして、チー
ムのデベロッパーにとって馴染みがあり、学習の積み重ねをあまり必要としないこと
です。第二に、非常にスケーラブルな AWS マネージドサービスであるため、デベロ
ッパーはデータベースのデプロイ、運用、保守の負担を負うことなく、アプリケーシ
ョンの開発と反復に集中することができます。Kinesis Analytics は、何億ものユーザ
ーアクションやページビューを含む膨大なデータセットから、検索イベントにフィル
ターをかけるプロセスを簡素化するために選ばれました。
© dbInsight LLC 2021® | dbInsight.io

16

ユースケースに最適なデータベースを選択する
これはすべて、新機能の開発を切り離すことで、サイトの将来性を本質的に高めるとい
う Zulily の戦略の一環でした。新機能は API を通して開発されるため、基盤となるイ
ンフラストラクチャのアーキテクチャの再設計を常に行う必要はありません。さらに重
要なことに、このチームは、基盤となるデータインフラストラクチャのデプロイ、メン
テナンス、およびオペレーションをすべて自分たちで行うのではなく、マネージド
AWS サービスを利用したので、Zulily は、提案型検索機能をたった 10 週間で本番稼動
させることができましたが、これは従来のルートで行った場合に必要とする時間と比べ
ると、かなり短いものでした。
2020 年 8 月に本稼働した、カスタマーエクスペリエンスデータベースの新しい
DocumentDB の実装は、オンラインコマースが爆発的に普及した時代に、エクスペリ
エンスを新鮮に保つ能力があることを証明しています。その人気の証として、検索提案
機能は、Zulily の顧客の 75% が買い物の際の検索に利用しています。

ストリーミングメディアサービスが、ナレッジグラフと機械学習でコンテンツの
パーソナライゼーションを促進
現在、複数の新しいチャンネル提供を追加してオペレーションの規模をスケールアップ
しているストリーミングメディアサービスは、コンテンツのライセンスやビューワーの
好みとのマッチングを強化しようとしています。激しい競争が繰り広げられているスト
リーミングメディア市場では、適切なビューワーに適切なタイミングで適切なレコメン
デーションを行うことが集客の鍵となります。
コンテンツを分類するためには、複雑な相互関係の繋がりを把握しなければならないと
いう課題があります。ストリーミングサービスでは、当初、マルチモデルのデータベー
スでコンテンツを管理しようとしましたが、データの複雑さからこのソリューション
ではスケールできないことがわかりました。
© dbInsight LLC 2021® | dbInsight.io

17

ユースケースに最適なデータベースを選択する
例えば、ある番組のリストは、シーズン、エピソード、ジャンルで構成されています。ま
た、そのコンテンツを視聴するためのライセンスは、様々なクライアントデバイスに対応
していなければなりません。さらに、ビューワーの履歴や好み、また似たような趣味を持
つ人や似たような属性を持つグループとして視聴されたコンテンツなども考慮する必要が
あります。ストリーミングサービスでは、消費習慣の傾向を容易に適応・予測し、カスタ
マージャーニーをモデル化する機械学習の予測モデルと容易にインターフェースできるソ
リューションが必要でした。また、コンテンツが毎日更新されるメディアでは、トップト
レンドの番組を表示できるリーダーボード機能を提供する必要があります。
AWS がフルマネージド型グラフデータベースサービスである Amazon Neptune を発表
したとき、このストリーミングメディアサービスは、初期のリファレンスカスタマーと
して契約を結びました。Amazon Neptune は、信頼性と可用性の高いグラフデータベ
ースであり、プロパティグラフモデルと Resource Definition Framework (RDF) スタイ
ルグラフ、そしてこれらのグラフフレームワークに関連する Gremlin と SPARQL のク
エリ言語の両方をサポートしています。グラフデータベースのスケーリング機能によ
り、このストリーミングサービスでは、視聴習慣をより詳細に追跡することが可能にな
り、5 秒ごとのサンプルに限定するのではなく、1 秒ごとに追跡することができます。
さらに、クラスターを簡単にスケールできることで、スポーツイベントなどの特別なイ
ベントで定期的に発生するロードのスパイクにも対応できるようになりました。
ストリーミングサービスにとって、グラフデータモデルは、以前のマルチモデルデータ
ベースと比較して、コンテンツの分類に関するあらゆる複雑な相互関係を処理するのに
適していました。Amazon Neptune のプロパティグラフサポートを活用することで、
ストリーミングサービスは、柔軟性と拡張性の高いスキーマを使用することができ、デ
ータモデルを進化させて、イベントベースの番組への関心など、新しい関係やカテゴリ
ーをサポートすることができました。
© dbInsight LLC 2021® | dbInsight.io

18

ユースケースに最適なデータベースを選択する
REST API は、ビューワーに番組のレコメンデーションを表示するために使用されま
す。Amazon ElastiCache は、頻繁に照会される「ホット」データに使用されます。同
じ API を使って機械学習モデルをトリガーし、視聴のレコメンデーション情報を表示
します。その結果、プロジェクトリーダーによると、コンテンツ、視聴習慣、ストリー
ミングクライアントの複雑な相互関係を表現できるデータベースを使用することで、ス
トリーミングサービスは視聴者を惹きつけ、保持する面でより大きな責任を果たせるよ
うになりました。

要点のまとめ
ユースケースによっては、データの管理や処理に求められる要件が大きく異なる場合が
あります。安定している製品ルックアップテーブルのデータと、常に変化する対人接
触における公衆衛生上の暴露を表すデータとでは、必要とされる条件が異なります。し
かし、その判断は純粋にアーキテクチャの問題だけではありません。同じリレーショナ
ル構造を持つデータでも、データがファクトテーブルのように安定したものであるか、
消費者が選択した最新の製品、ゲーム、メディアコンテンツを追跡するような変動性の
大きいものであるかによって、異なるアクセス方法が必要になる場合があります。デー
タの読み込みと書き込みの要件は、メンバーのルックアップや次善のベストアクショ
ンとレコメンデーションといった別々のステップに分割して、目的別に設計されたデー
タベースソリューションで対処できるのでしょうか。 さらに、ユースケースの性質
上、極端なオートスケーリングが必要なのか、あるいは、ローカルまたは高度に分散さ
れたプロセスでデータを読み込み/書き込みする必要があるでしょうか。 そして、ビジ
ネスケースにとってより重要なことは何でしょうか。絶対的に一貫性のあるデータを返
すことと、サービスの高可用性を確保することのどちらが重要でしょうか。
データベースを選択する際には、まずビジネスユースケースに注目してください。デー
タベースの選択肢は数多くありますが、どれか一つだけに限定する必要はありません。
© dbInsight LLC 2021® | dbInsight.io

19

ユースケースに最適なデータベースを選択する

作成者
dbInsight、プリンシパル、Tony Baer 氏
tony@dbinsight.io
Twitter @TonyBaer

dbInsight について
dbInsight LLC® は、データベースと分析技術のエコシステムに関する独自の視点を提供
しています。独自の調査報告を発行し、その調査報告からインサイトを抽出し、データ
および分析技術を提供する企業が、自社の競争上のポジショニングを理解し、メッセー
ジを明確にすることを支援しています。
dbInsight の創業者兼プリンシパルである Tony Baer 氏は、データ駆動型トランスフォ
ーメーションに関する業界のエキスパートとして知られています。Onalytica は、2019
年と 2020 年に、データ部門とクラウド部門のトップ 100 インフルエンサーの一人に
同氏を選出しました。Analytics Insight は、同氏を 2019 AI ビッグデータのインフルエ
ンサートップ 100 に選出しました。レガシーのデータベース技術と、クラウドや分
析における新興技術の両方に関する同氏の複合的な専門知識は、大きな変革を遂げつつ
ある業界において、テクノロジープロバイダーがどのように市場に参入していくかを決
定づけています。同氏が定期的に投稿する ZDnet の「Big on Data」は、毎月 25,000～
30,000 回閲覧されています。
dbInsight® は、dbInsight LLC の登録商標です。

© dbInsight LLC 2021® | dbInsight.io

20

OCTOBER 27, 2021

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅中小企業向け：
よくあるシステム開発課題の対応方法から学ぶ
「これからのシステム開発」入門
文珠 啓介

テクニカルソリューションアーキテクト
アマゾン ウェブ サービス ジャパン株式会社
画面に映る資料の撮影などによる本セッション資料の転用を禁止しております
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

自己紹介

• 名前
文珠 啓介 / Keisuke Monju

• ロール
テクニカルソリューションアーキテクト

• 経歴
・オンプレミスでのインフラ構築・運用を行うエンジニア
・AWS へのマイグレーション対応とその後のサービス運用
• 好きな AWS サービス

Amazon CloudFront

AWS WAF
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アジェンダ
•
•

•

中堅・中小企業における優先度の高い 3 つのお悩み
中堅・中小企業のお客様からよくご相談いただく
システム開発現場での 6 つの課題と対応の為のアプローチ方法
Next Action

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業における
優先度の高い 3 つのお悩み

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業における優先度の高い 3 つのお悩み
コストのお悩み

•

人材のお悩み

•

製品サービスのお悩み

•

•
•
•
•

既存システムのメンテナンスコストが高い
新規 IT リソースの導入コストが高い
社内の IT 人材が足りない

構築運用は他社頼りで社内に有識者がいない
システムの維持に手一杯で課題は増えていく
新規のシステム開発に時間を割けない
セキュリティの対応方法に不安がある
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS クラウドが提供する価値

AWS クラウド活用の真価 = お客様が 価値提供に集中 できること

初期投資不要な
従量課金制でITリソースの
調達が容易に可能

マネージド型サービスの
活用による差別化を産ま
ない重労働からの開放

サービスとして提供される
セキュリティ機能の実装や
厳格なコンプライアンス
要件への対応
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

あらゆるワークロードをサポート

200

AWSの提供する 90 %のサービスや機能はお客様からの意見をもとに開発、残りの 10 %もお客様の潜在的な要望を汲み取って作られています

コンピューティング

機械学習

アプリケーション統合

IoT

Game Tech

AR と VR

ロボット工学

量子テクノロジー

エンドユーザーコンピューティング

ビジネスアプリケーション

カスタマーエンゲージメント

ストレージ

メディアサービス

移行と転送

データベース

分析

ブロックチェーン

ネットワークとコンテンツ配信

マネジメントとガバナンス

セキュリティ、ID 、コンプライアンス

モバイル

AWS コスト管理

開発者用ツール

人工衛星
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業のお客様から
よくご相談いただく、システム開発現場での
6 つの課題と対応の為のアプローチ方法

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業におけるシステム開発現場でのよくある 6 つの課題
セキュリティとコンプライアンス
アクセス管理が煩雑で、セキュリ
ティインシデントがいつ起きても
おかしくない

密結合なアーキテクチャ

サーバーリソースの管理

開発したシステムのリリース
開発サイクルは決まっているが、
ビルド/デプロイなどの手動操作
で労力が掛かる

環境構築
環境の構築は全て手動で作業を
行っており、環境の増築に苦労
する

ログ・メトリクス運用
障害が発生した際には直接
サーバーにリモートで接続し
て原因の調査を行っている

とあるシステムの改修が別の
システムの処理に直結するため、
改修が容易でない

コンピュートリソースの管理は
手動で行っており、急な負荷や
障害対応も手動で対応

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業におけるシステム開発現場でのよくある 6 つの課題
セキュリティとコンプライアンス
アクセス管理が煩雑で、セキュリ
ティインシデントがいつ起きても
おかしくない

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

このような構成があるとして、何か問題点はあるでしょうか？
オンプレミス
データセンター

「Admin」ユーザーでログイン

仮想サーバー

開発者
「Admin」ユーザーでログイン

運用者

操作ログ

ハイパーバイザー
ホスト
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アクセス制御・監査ができるアーキテクチャ例

開発者

(開発者権限)
運用者

(運用者権限)

操作ログ

閲覧・接続

AWS
CloudTrail

リソースの状態

変更・削除
Amazon EC2
(仮想サーバー)

AWS Config

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業におけるシステム開発現場でのよくある 6 つの課題
セキュリティとコンプライアンス
アクセス管理が煩雑で、セキュリ
ティインシデントがいつ起きても
おかしくない

密結合なアーキテクチャ

サーバーリソースの管理

開発したシステムのリリース
開発サイクルは決まっているが、
ビルド/デプロイなどの手動操作
で労力が掛かる

環境構築
環境の構築は全て手動で作業を
行っており、環境の増築に苦労
する

ログ・メトリクス運用
障害が発生した際には直接
サーバーにリモートで接続し
て原因の調査を行っている

とあるシステムの改修が別の
システムの処理に直結するため、
改修が容易でない

コンピュートリソースの管理は
手動で行っており、急な負荷や
障害対応も手動で対応

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業におけるシステム開発現場でのよくある 6 つの課題
密結合なアーキテクチャ

とあるシステムの改修が別の
システムの処理に直結するため、
改修が容易でない

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

それぞれの担当者の声を聞いてみましょう
アプリケーションサーバー

決済管理

決済管理サービス
ユーザー管理サービス

在庫管理
ユーザー管理

在庫管理サービス

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サービス間が疎結合なアーキテクチャ例
決済管理サービス
在庫管理サービス
(JavaScript)

Amazon API Gateway

ユーザー管理サービス
(NEW) 新規開発サービス

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業におけるシステム開発現場でのよくある 6 つの課題
セキュリティとコンプライアンス
アクセス管理が煩雑で、セキュリ
ティインシデントがいつ起きても
おかしくない

密結合なアーキテクチャ

サーバーリソースの管理

開発したシステムのリリース
開発サイクルは決まっているが、
ビルド/デプロイなどの手動操作
で労力が掛かる

環境構築
環境の構築は全て手動で作業を
行っており、環境の増築に苦労
する

ログ・メトリクス運用
障害が発生した際には直接
サーバーにリモートで接続し
て原因の調査を行っている

とあるシステムの改修が別の
システムの処理に直結するため、
改修が容易でない

コンピュートリソースの管理は
手動で行っており、急な負荷や
障害対応も手動で対応

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業におけるシステム開発現場でのよくある 6 つの課題
サーバーリソースの管理

コンピュートリソースの管理は
手動で行っており、急な負荷や
障害対応も手動で対応

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サービスを本番運用する際にあたって、作業は何が必要でしょうか？
オンプレミス
データセンター

サービスの利用
エンドユーザー

物理サーバー

開発担当

インフラ担当
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

サーバーレスなサービスを活用したアーキテクチャ例
AWS Cloud
静的コンテンツ
のリクエスト

エンドユーザー

(HTML/CSS
/ 画像など)

Amazon S3
(オブジェクトストレージ)

コンテンツ
キャッシュ

Amazon CloudFront
(Content Delivery Network)
API リクエスト

Query

Execute

Amazon
API Gateway
(API インターフェイス)

AWS Lambda
(処理基板)

Amazon
DynamoDB
(DB[NoSQL])
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業におけるシステム開発現場でのよくある 6 つの課題
セキュリティとコンプライアンス
アクセス管理が煩雑で、セキュリ
ティインシデントがいつ起きても
おかしくない

密結合なアーキテクチャ

サーバーリソースの管理

開発したシステムのリリース
開発サイクルは決まっているが、
ビルド/デプロイなどの手動操作
で労力が掛かる

環境構築
環境の構築は全て手動で作業を
行っており、環境の増築に苦労
する

ログ・メトリクス運用
障害が発生した際には直接
サーバーにリモートで接続し
て原因の調査を行っている

とあるシステムの改修が別の
システムの処理に直結するため、
改修が容易でない

コンピュートリソースの管理は
手動で行っており、急な負荷や
障害対応も手動で対応

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業におけるシステム開発現場でのよくある 6 つの課題

開発したシステムのリリース
開発サイクルは決まっているが、
ビルド/デプロイなどの手動操作
で労力が掛かる

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

開発したソースコードをデプロイする一連の流れを見てみましょう
ソースのアップロード

ソースサーバー

開発者
ビルド・デプロイ
の依頼

ビルドの指示

運用者

本番環境へのデプロイ
許可確認(許可の指示)

本番サーバー

デプロイ

ビルドサーバー
デプロイの指示

デプロイサーバー

デプロイ

動作チェック

責任者

ステージング
サーバー

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

CI/CD サービスを活用したアーキテクチャ例
AWS CodePipeline
(CI/CD の制御)

開発者

ソースのアップロード

AWS CodeCommit
(ソース管理サービス)

AWS CodeBuild
(ビルドサービス)

AWS CodeDeploy
(デプロイサービス)

デプロイ

デプロイ

承認アクション
の通知

本番サーバー

ステージング
サーバー

動作チェック

承認アクション責任者
の実行 © 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業におけるシステム開発現場でのよくある 6 つの課題
セキュリティとコンプライアンス
アクセス管理が煩雑で、セキュリ
ティインシデントがいつ起きても
おかしくない

密結合なアーキテクチャ

サーバーリソースの管理

開発したシステムのリリース
開発サイクルは決まっているが、
ビルド/デプロイなどの手動操作
で労力が掛かる

環境構築
環境の構築は全て手動で作業を
行っており、環境の増築に苦労
する

ログ・メトリクス運用
障害が発生した際には直接
サーバーにリモートで接続し
て原因の調査を行っている

とあるシステムの改修が別の
システムの処理に直結するため、
改修が容易でない

コンピュートリソースの管理は
手動で行っており、急な負荷や
障害対応も手動で対応

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業におけるシステム開発現場でのよくある 6 つの課題

環境構築
環境の構築は全て手動で作業を
行っており、環境の増築に苦労
する

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

短期間で全く同じ環境を複数作成するにはどうすれば良いでしょうか？

インフラ担当

責任者

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

コードとしてインフラストラクチャを管理した場合の状況
AWS CloudFormation

インフラ担当

責任者

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業におけるシステム開発現場でのよくある 6 つの課題
セキュリティとコンプライアンス
アクセス管理が煩雑で、セキュリ
ティインシデントがいつ起きても
おかしくない

密結合なアーキテクチャ

サーバーリソースの管理

開発したシステムのリリース
開発サイクルは決まっているが、
ビルド/デプロイなどの手動操作
で労力が掛かる

環境構築
環境の構築は全て手動で作業を
行っており、環境の増築に苦労
する

ログ・メトリクス運用
障害が発生した際には直接
サーバーにリモートで接続し
て原因の調査を行っている

とあるシステムの改修が別の
システムの処理に直結するため、
改修が容易でない

コンピュートリソースの管理は
手動で行っており、急な負荷や
障害対応も手動で対応

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業におけるシステム開発現場でのよくある 6 つの課題

ログ・メトリクス運用
障害が発生した際には直接
サーバーにリモートで接続し
て原因の調査を行っている

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

エラー原因のサーバーは迅速に特定できるでしょうか？
オンプレミス
データセンター

アクセスログ
CPU / メモリ使用率

サーバー A
リクエスト

エンドユーザー

ロードバランサー

(均等な負荷分散のみ)

運用者
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

アクセスログ
CPU / メモリ使用率

サーバー B

アクセスログ
CPU / メモリ使用率

サーバー C

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ログ・メトリクスが集約されているアーキテクチャ例

Amazon EC2
リクエスト

エンドユーザー

Elastic Load
Balancing
(負荷分散)

Amazon EC2

Amazon EC2

ログ・メトリクス
の送信

監視・運用
アラート通知

Amazon CloudWatch
(ログ・メトリクスの集約
/ アラートの発報)

運用者

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

中堅・中小企業におけるシステム開発現場でのよくある 6 つの課題
セキュリティとコンプライアンス
アクセス管理が煩雑で、セキュリ
ティインシデントがいつ起きても
おかしくない

密結合なアーキテクチャ

サーバーリソースの管理

開発したシステムのリリース
開発サイクルは決まっているが、
ビルド/デプロイなどの手動操作
で労力が掛かる

環境構築
環境の構築は全て手動で作業を
行っており、環境の増築に苦労
する

ログ・メトリクス運用
障害が発生した際には直接
サーバーにリモートで接続し
て原因の調査を行っている

とあるシステムの改修が別の
システムの処理に直結するため、
改修が容易でない

コンピュートリソースの管理は
手動で行っており、急な負荷や
障害対応も手動で対応

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

「AWS モダンアプリケーション開発」のホワイトペーパー
モダンアプリケーション開発
のベストプラクティス( 6 項目)

https://d1.awsstatic.com/whitepapers/ja_JP/modernapplication-development-on-aws.pdf
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Next Action

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Next Action
• ハンズオンコンテンツでの実践
• AWS 個別相談会を活用
•

AWS パートナーネットワーク（APN） を活用

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Next Action
• ハンズオンコンテンツでの実践
• AWS 個別相談会を活用
•

AWS パートナーネットワーク（APN） を活用

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS Hands-on for Beginners とは

https://aws.amazon.com/jp/aws-jp-introduction/aws-jp-webinar-hands-on/

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Next Action
• ハンズオンコンテンツでの実践
• AWS 個別相談会を活用
•

AWS パートナーネットワーク（APN） を活用

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

構成に悩んだらぜひ個別相談会もご活用ください！
https://pages.awscloud.com/sales-consulting-seminar-jp

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Next Action
• ハンズオンコンテンツでの実践
• AWS 個別相談会を活用
•

AWS パートナーネットワーク（APN） を活用

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

AWS パートナーネットワーク（APN）ついて

AWS を活用してお客様向けのソリューションとサービスを構築しているグローバルパートナープログラム
多くのパートナーの中からお客様の課題にあった信頼できるパートナーやソリューションをお選びいただけます

AWS パートナーソリューションファインダー
ビジネスニーズに応じたサービスや
ソリューションを提供できる
APN パートナーをすばやく検索

AWS コンピテンシープログラム

AWS サービスデリバリープログラム

特定の AWS サービスに関する経験と専門知識を
様々な業種、ユースケース
持つ APN コンサルティングパートナー向けの
およびワークロードの専門分野に
おけるスキルを特定、検証、および推奨
厳格な技術審査を通じた認定プログラム

https://aws.amazon.com/jp/partners/
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

ご清聴ありがとうございました

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Modern Applications Resource Hub にアクセス
豊富な日本語ガイドで皆様のモダナイゼーションの促進をサポート
•
•
•
•
•

AWS でモダンアプリケーションを構築する
モバイルアプリ、ウェブアプリを迅速に構築するには

AWS のコンテナサービスでモダナイゼーションを促進
サーバーレステクノロジーによる総所有コスト（TCO)
モダン Dev + Ops モデルの導入

その他にも ユースケースやアナリストレポートを豊富にラインアップ

https://bit.ly/3oVdKPV

Resource Hub はこちら »
© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Appendix

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Next Action にオススメなコンテンツ紹介
セキュリティとコンプライアンス
アクセス管理が煩雑で、セキュリ
ティインシデントがいつ起きても
おかしくない

密結合なアーキテクチャ

サーバーリソースの管理

開発したシステムのリリース
開発サイクルは決まっているが、
ビルド/デプロイなどの手動操作
で労力が掛かる

環境構築
環境の構築は全て手動で作業を
行っており、環境の増築に苦労
する

ログ・メトリクス運用
障害が発生した際には直接
サーバーにリモートで接続し
て原因の調査を行っている

とあるシステムの改修が別のシ
ステムの処理に直結するため、
改修が容易でない

コンピュートリソースの管理は
手動で行っており、急な負荷や
障害対応も手動で対応

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Next Action にオススメなコンテンツ紹介
セキュリティとコンプライアンス
アクセス管理が煩雑で、セキュリ
ティインシデントがいつ起きても
おかしくない

密結合なアーキテクチャ

とあるシステムの改修が別のシ
ステムの処理に直結するため、
改修が容易でない

サーバーリソースの管理

コンピュートリソースの管理は
手動で行っており、急な負荷や
障害対応も手動で対応

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Next Action にオススメなコンテンツ紹介

開発したシステムのリリース
開発サイクルは決まっているが、
ビルド/デプロイなどの手動操作
で労力が掛かる

環境構築
環境の構築は全て手動で作業を
行っており、環境の増築に苦労
する

ログ・メトリクス運用
障害が発生した際には直接
サーバーにリモートで接続し
て原因の調査を行っている

© 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.

Sponsored by: Amazon Web Services

企業におけるアプリケーション
モダナイゼーション：
アーキテクチャ、
オペレーション、
デリバリーに対する影響

Larry Carvalho

April 2020

IDCの見解

一般的なクラウド採用でよくある
第一ステップは、オンプレミスの
データセンターからパブリッククラウドへの
ワークロードのリフトアンドシフトなど
である。ただし、ビジネスは、新たなクラウド
テクノロジーを完全活用できると、クラウド
移行からさらに大きな価値を引き出せる。

パブリッククラウドへのワークロード移行は、十分に計画さ

ケーションは柔軟性が限定的であり、チームの俊敏性も損な

ンスが得られる。また、新規機能を迅速にテストできるた

報技術（IT）予算で大きな割合を占めるため、組織は既存ソ

れた場合、本番同様の設定で迅速に環境を再現できるチャ

め、デベロッパーはイノベーションを加速できる。アプリケー

ションを新規のデリバリー手法に適合させるベネフィットは
非常に大きく、企業はアプリケーション改善サイクルを継続

できる。ワークロードがFaaS（Functions-as-a-Service）、コ

ンテナ、
マイクロサービスといったクラウドの新規機能を活

用する場合、イノベーションのペースは加速する。これらの
マネージドサービスの採用は、組織のオペレーションに多

大な影響を与える。つまり、アプリケーションインフラストラ

われる。従来型のアプリケーションのメンテナンス費用は、情
リューションポートフォリオを強化する際に予算の制約を受
ける。クラウドテクノロジーは急速に進化しており、エンター

プライズアプリケーションアーキテクチャは、最新の機能性
を採用するよう迫られている。この機能性で提供される新た

なマインドセットとツールによって、デベロッパーは新規機能

のデリバリー速度を加速させ、オペレーションチームはビジ
ネスでより戦略性の高い役割を果たせる。

クチャのパッチ適用、更新、スケーリングは不要になる。

レガシーアプリケーションのポートフォリオを有する複数の

モノリシックアプリケーションは数十年間に渡り、従来型

ためにステップを講じており、最終的には市場での競争力が

のインフラストラクチャとソフトウェアアーキテクチャと

組み合わさって構築されており、デジタル化に対するビジ

ネス需要に適時に対応できないソリューションポートフォ
リオを有する組織には重荷になっている。レガシーアプリ

大企業は、アプリケーション開発をモダナイゼーションする
高まるよう、アプリケーション開発を通じて顧客への新規デ
ジタルエクスペリエンスを創出しようとしている。クラウドネ

イティブアーキテクチャは、俊敏性の向上、新規アプリケー
ションの市場投入時間の短縮、日常生活でコンシューマー

COPYRIGHT IDC © 2020 | PAGE 2

アプリケーションを使い慣れた顧客の期待に応えたユーザーエ

最新リリースパイプラインは、自動化された開発ライフサイクル

オペレーションモデルでは、クラウドプロバイダーがアプリケー

加速させる。IDCの調査によると、コンテナ、コンテナオーケスト

クスペリエンスの提供において、組織を支援する。サーバーレス
ションに必要なあらゆるインフラストラクチャ管理を実施する。

このため、それらの業務から完全に解放されたデベロッパーや
オペレーションチームは、ソフトウェアリリースの頻度を高めて、

新規設計や新規機能のリリースに向けて時間を再配分できる。

オンプレミスアプリケーションを有する多数の企業の場合、ア

プリケーションモダナイゼーションにおける第一ステップは、コ

で構成され、ソースコード管理からデプロイメントまでのパスを

レーション、サーバーレス、マイクロサービスといったクラウドネ
イティブテクノロジーに非常に精通したデベロッパーは5分の1弱
である。つまり、IT管理においては、アプリケーションモダナイ
ゼーションを進めるには、デベロッパーの教育を優先しつつ、IT
予算の自由度を高めなければならない。

ンテナ形式の採用である。コンテナは、優れたポータビリティと

アプリケーションの最新動向の一つに、自律的な開発チームが

き必要になる。多くの場合、モダナイゼーションの目標は、FaaS

解したり、コンテナやサーバーレスクラウドテクノロジー上で最

柔軟性を実現するが、インフラストラクチャ管理の要素は引き続
の採用である。FaaSは、インフラストラクチャ管理業務を全面

解消する。オンライン旅行会社のエクスペディアは、アプリケー
ションモダナイゼーション時に学んだ教訓を説明した。

リファクタリングには、ジャーニーが伴う。アプリケーション

サーバーと単一データストアで構成される従来型のアーキテク
チャから、複数のランタイム、分散型サービス、小規模データ

ストアで構築される最新アーキテクチャに移行する旅である。

ある。このチームは、アプリケーションをマイクロサービスに分
適化したりする。このアプローチでは、コードからデプロイメン

トに至るまでの従来の障壁が解消されると同時に、大規模なイ
ノベーションが可能になり、セキュリティ違反やダウンタイムの

リスクはなくなる。競争やディスラプションのトレンドの一歩先

を進み続けるという目標を掲げる場合、企業は、アプリケーショ
ンモダナイゼーションを最優先事項とし、多大な関心を向けな
ければならない。

COPYRIGHT IDC © 2020 | PAGE 3

調査概要
本ホワイトペーパーでは、リファクタリングの

取り組みの成功に必要な推奨ステップとして、
アプリケーションモダナイゼーションを

最優先させる理由について説明している。

IDCは、エクスペディアグループとのインタビューで、
AWSサービスを活用したアプリケーション

モダナイゼーションの経験と学んだ教訓の

話を聞き、本ホワイトペーパーで解説している。

COPYRIGHT IDC © 2020 | PAGE 4

概況
アプリケーションモダナイゼーションに
おけるビジネスの必須課題

モダンアプリケーションアーキテクチャに対する必要性は、これまでになく急速に移行
する市場で競争しなければならないという組織の必要性に牽引される。アプリケーショ
ンの新規機能や新規ケイパビリティに関する事業部門の要件は絶えず変化しており、

デベロッパーは、従来型のアプリケーション開発ツールや基盤インフラストラクチャを使

用しながら変更リクエストに対処していくという課題に直面している。新規アプリケー

ションをより迅速に開発しデリバリーするためのステップの一つは、DevOpsの採用で

ある。開発手法の一つであるDevOpsでは、アプリケーション運用は設計段階で始ま
り、デベロッパーと運用者は連携してアプリケーションの構築、リリース、運用を実施

する。組織はDevOpsで、顧客に対して迅速かつ信頼性の高い価値提供を行う。IDCの
デベロッパー調査『PaaSView and the Developer Survey』のなかで、DevOps実施後
に週ごとのコードリリースデプロイメントを倍増できたとする組織数が立証しているよ
うに、DevOpsの手法でデプロイメント頻度は増加する（Figure 1を参照）。

COPYRIGHT IDC © 2020 | PAGE 5

Figure 1. モダナイゼーション後のデプロイメント頻度の増加

Q.

DevOps導入後、コードリリースデプロイメントの平均頻度は、
どのように変化しましたか？

42%

2～3週間に1回以上

32%
58%
68%

1か月に1回以下
DevOps導入前

DevOps導入後

Source: IDC’s PaaSView and the Developer Survey, 2019

モダンアプリケーションでは、コンポーネントが相互に独立しているため、デベロッパーは大

規模な障害発生の不安を抱えずに、新規機能を安全に実験できる。また、モダンアプリケー
ションは、オペレーションチームの役割も根本的に変化させる。オペレーションチームは多く

の場合、ソフトウェア更新のインストールといった手作業の業務から解放される代わりに、

より戦略性の高い立場で、ガードレール構築、最新スキルに関する従業員のトレーニングと

採用、アプリケーション全体のヘルスチェックの管理を行う。機能は、ごく一部のユーザーに
デリバリーして試用させることができ、必要であれば変更は自動でロールバックできる。この
プロセスによって、複数の実行可能なソリューションを追求するコストは削減され、企業の
モダナイゼーションの成功確率は高まる。

モダンアプリケーションアーキテクチャで組織にベネフィットが生ずる理由は、複数存在

する。

新規機能の市場投入時間：モジュール式アプリケーションのベネフィットの一つは、相互

独立したコンポーネントで構成されているため、必要なコンポーネントのみ変更やテスト
を実施できる点である。このため、コード変更からデプロイメントまでの所要時間は短縮

される。従来型のアプリケーションは、機能リリースに数か月かかる場合もあったが、リフ
ァクタリングされたアプリケーションは、新規機能または機能変更のリクエストを受けた
後、コード修正、デプロイメント完了からユーザーへの提供まで、数分で進行できる。

COPYRIGHT IDC © 2020 | PAGE 6

俊敏なインフラストラクチャ：コンテナやサーバーレステクノロジーをデプロイメントに

使用できると、デベロッパーは、クラウドサービスの最適化によって即時にインフラスト
ラクチャをスケーリングし、アプリケーションに対する多様な需要に対応できる。モノリ

シックアプリケーションをサポートするインフラストラクチャ全体をスケーリングするの
ではなく、特定のユーザー需要に対応したコンテナのサブセットをマイクロ秒でスケール

アップできる。

エンドツーエンドのセキュリティ：アプリケーション変更の迅速化によって、コード修正時

に生じ得るセキュリティ問題への対処に関して課題がもたらされる。最新アーキテクチャ

を使用した開発ライフサイクルに追加されるチェックポイントで、最新アーキテクチャ
におけるセキュリティの全側面の管理と実行を確保できる。

継続的な軌道修正：停止のモニタリングやコンテナのポータビリティによって、地域を超

えた分散型アプリケーションが実現され、復旧が容易になる。結果的に、これらのアプ

リケーションでは高可用性が標準になる。パブリッククラウドテクノロジー使用から得

られる重要なベネフィットの一つは、アプリケーション開発ライフサイクルの各ステップ
をモニタリングできる点である。このため、クローズドのフィードバックループで、新規機
能のリリースや使用を実施しながら、アプリケーションを継続的に改善できる。

共通の目標の追求：レガシーインフラストラクチャの技術的負債は非常に大きいため、

開発チームは、プロジェクトのバックログに悩まされている。役員は、最新テクノロジー

による迅速な対応を求める取締役会や株主の圧力に直面している。現在のCIOはCEO直
属であり、一部の非ソフトウェア系企業はソフトウェア系企業からCEOをリクルートして
いる。IT部門は、
「現行業務の継続」と新規需要への対応に向けた刷新を並行させなけ

ればならないが、事業部門は多くの場合、こうしたIT部門を信頼しなくなっている。モダ
ンアプリケーション開発ツールやDevOps手法への投資は、事業部門管理者とITチーム
の目標やビジョンを整合させるウィンウィンのシナリオである。

COPYRIGHT IDC © 2020 | PAGE 7

アプリケーションモダナイゼーションの
ステップ

組織には長年に渡る技術的負債があるため、モダナイゼーションの取り組みでは、タスクの
優先順位決定や適切なスタッフと予算の配分に関する課題が存在する。IDCの予測では、

2025年までに、約3分の2の企業が毎日コードリリースをデプロイメントするソフトウェアの大
量生産者になり、新規アプリケーションの90％以上がクラウドネイティブになる。また、80％

のアプリケーションコンポーネントは外部調達され、デベロッパーは1.6倍に増加する。最新

クラウドアーキテクチャ上に構築されるアプリケーションから得られる長期的ベネフィット

は、より低コストでの俊敏性実現によって予算の自由度が高まる結果、モダナイゼーションの
取り組みがさらに加速される点である。

モダンアプリケーションアーキテクチャ移行の際、組織で採用可能なステップが複数存在
する。

スキルの習得または開発：最新エンタープライズアーキテクチャに関する知識には、機

能、コンテナ、
マイクロサービスの知識があるが、組織ではこれらを有する従業員はかな

り不足している。企業の開発チームは、VM志向のテクノロジーを使用せずに新たなステ

ートレスアプリケーションを書く方法を理解する能力がない。オペレーションチームは、

複雑なモニタリングシステムやロギングシステムをセットアップしなければならず、結果と
して、リアルタイムで問題に自動対応しなければならない。Figure 2によると、新たな開発

テクノロジーに非常に精通した従業員は、5分の1に過ぎない。新規アプリケーションデ
リバリー方法の採用には、カルチャーの変化が欠かせない。最新クラウドテクノロジー

で実現可能なベネフィットのあらゆる側面を理解した従業員が必要になるためである。

ポートフォリオの分析：エンタープライズアプリケーションモダナイゼーションは、ジャー

ニーである。事業部門のニーズと組織に最高の価値をもたらすソリューションを整合さ

せるための既存ポートフォリオの分析が、その出発地点である。一部のアプリケーション

は、クラウドネイティブテクノロジーの活用により適したコンポーネントで構成される。こ

れらは、特定され、マイクロサービスに分解されるべきである。ソリューションが需要急
増に遭遇した場合、
マイクロサービスへのリファクタリングの優れた候補になる。このよう
に、スケールアップやスケールダウンを必要とする機能は、モノリシックアプリケーション

の他の部分から切り離される。レガシーアプリケーションが、リファクタリングアプリ

ケーションから生ずる需要に対処できるようにするには、既存ポートフォリオとの統合を
計画することが重要である。リファクタリングの取り組みからの投資利益を早期に実現

するには、アプリケーションの優先順位を決定することでその革新や勢いを確立しや
すい。

COPYRIGHT IDC © 2020 | PAGE 8

セキュリティ戦略の構築：アプリケーションの市場投入時間とデプロイメントのスピード

が重要である一方、開発とデプロイメントのライフサイクルに沿ってセキュリティチェッ
クポイントを設けたパイプラインを構築することが、成功実現には不可欠である。規制

ガイドラインや順守ガイドラインは、データ主権やデータプライバシーの要件順守を求
める。リファクタリングされたすべてのアプリケーションに対し、共通のセキュリティ機
能を適用すると、再利用性が実現され、全体的な労力も減る。

モダンアプリケーションアーキテクチャは、アプリケーションプログラミングインター

フェース（API）経由で接続される個々のサービスに依存する。このため、データやアプリ
ケーションのセキュリティ確保には、アイデンティティアクセス管理（IAM）インフラストラク

チャとAPIゲートウェイを組み合わせたセキュリティポリシーが不可欠である。エンドツー

エンドのセキュリティポリシーであれば、グリーンフィールドとAPIを使用したモノリシック
アプリケーションやパッケージアプリケーションの間で、セキュアな通信を確保できる。

モジュール式アーキテクチャの活用：マイクロサービスは、ソフトウェア開発の軌道を変

化させる。デベロッパーがAPI経由で接続される独立サービスを構築するためである。マ
イクロサービスは独立的かつ専門的であるため、再利用性、スケーリング対処能力の向
上、開発時間短縮化などの複数のベネフィットをもたらす。独立単体のマイクロサービス
に分解されたアプリケーションモジュールは、統合を通じて既存アプリケーションと共存

できるようにするAPIを使用して、個別に起動できる。企業は、デカップリングで実現でき
るデータ同期化の課題を検討する一方、水平スケーリングの改善など、アプリケーション
ケイパビリティの利益となる状況を評価するべきである。たとえば、ホテルや家主など

のパートナーはエクスペディアグループのウェブサイトに保有物件の写真や画像をアップ
ロードすると、画像変換マイクロサービスを任意のアプリケーションから個別に呼び出せ

る。自己のデータストアでアプリケーションをマイクロサービスに分解すると、継続的デ

リバリーが実現される。アプリケーションのデカップリングでは、たとえば特定地域で高
い需要のあるリソースに対応する方法のみがスケーラビリティを実現できる。

ライフサイクルの加速：コンテナ、マイクロサービス、機能に関連する開発プロセスは

常に進化し、ソースコード管 理からデプロイメントに至るパスを加速させている。

DevOpsモデルを採用すると、アプリケーション機能に関するリクエストに対応する俊敏性
とスピードは向上する。テストやパッケージングを含め、パイプラインのあらゆるステップ
は、スクリプトで自動化するべきである。

COPYRIGHT IDC © 2020 | PAGE 9

フィードバックの自動化とモニタリング：構築、テスト、デプロイメントのステップを含

め、パイプラインを自動化する際、プロセスをモニタリングし、デベロッパーに対し不具

合を速やかにフィードバックすることが重要である。フィードバックによって、改善機会の
ある分野や将来自動化できるステップを特定できる。

適切なデータベースでのデータ価値の活用：分散型アプリケーションのスケール、セキュ

リティ、可用性に対処する適切なデータベースにはさまざまな選択肢がある。リレーショナ
ルデータベース、グラフデータベース、キーバリューデータベース、時系列データベースは、

eコマース、ゲーム、地理空間、IoT（Internet of Things）といった幅広いアプリケーション

のユースケースのサポート時に利用できる選択肢の一部である。オープンソースのデータ
ベースインスタンスは、コストを削減する。インメモリーキャッシュサービスは、モバイル

アプリケーションやウェブアプリケーションからの大量のリクエストに対処するケイパビ
リティを提供する。

サーバーレスモデルの活用：サーバーレステクノロジーは、インフラストラクチャ管理を

削減し、組み込みの高可用性を実現しているため、デベロッパーは選択した言語による

ビジネスロジック作成に専念できる。支払いは作業単位で算出され、また、自動でスケー
ルアップやスケールダウンが可能な実行の期間で価格設定されるため、TCO（Total Cost

of Ownership）は削減される。サーバーレスオペレーションモデルを採用すると、デベロッ

パーはコアコンピテンシーに集中できるだけでなく、クラウドサービスプロバイダーに付
加価値のない作業を任せられる。サーバーレスモデルを評価する際は、コールドスタート

を検討するべきである。迅速なスケーリングを要するアプリケーションの場合、
「コール
ド」機能の初期化に必要な時間が課題になる可能性はあるが、多くのベンダーは、プリ
ウォーム機能によってこの課題を解消するソリューションを提供している。サーバーレス

テクノロジーが、進化してコールドスタートに対応できるようになり、新規開発アーキテ

クチャへの意識が高まるなか、アプリケーション開発時の第一選択肢としてサーバーレ
スアーキテクチャを選定する企業は増えている。

スタート戦略としてのコンテナ化の検討：クラウドサービスによって、インフラストラクチャ

に対するさまざまなレベルの責任の大半をプロバイダーが引き継ぎ、ユーザー側のワー
クロード管理のわずらわしさを解消できる。コンテナベースのアプリケーションの場合、

クラウドサービスプロバイダーはクラスタ管理を実施し、イベント駆動型アプリケーショ
ンの場合、バックエンド全体が管理される。IoTアプリケーションやストリーム処理アプ

リケーションは、イベント駆動型コンピューティングに理想的である。あらゆる新規アプ
リケーションの第一選択肢としてサーバーレスを選定し、競合他社より優位に立つ企業
は増えている。

COPYRIGHT IDC © 2020 | PAGE 10

Figure 2. モダンアプリケーションアーキテクチャへの精通度

Q.

FaaS、コンテナオーケストレーションフレームワーク、コンテナ、
マイクロサービスに関する自身の精通度を教えてください

極めて精通している
非常に精通している
比較的精通している
ある程度精通している
精通していない
マイクロサービス

18% 21% 16% 20%
34%
28%

29%
27%

33%
37%

32%
27%

15% 17% 16% 15%
6% 6% 8% 6%
コンテナ

コンテナオーケストレーション
フレームワーク

n = 2,500 Source: IDC’s PaaSView and the Developer Survey, 2019

COPYRIGHT IDC © 2020 | PAGE 11

FaaS

AWSカスタマープロファイル：
エクスペディアグループはオンライン旅行会社であり、幅広いブランドポートフォリオを有
する。ポートフォリオには、世界有数のオンライン旅行ブランドも一部含まれている。データ

取得と顧客への革新的な選択肢の迅速な提供を課題とする業界にあって、エクスペディア
グループは、顧客エクスペリエンスの改善を常に目指している。

ホスピタリティ業界は継続的に変化し、価格志向型の市場で顧客の好みに対処している。旅

行プラットフォームは、顧客が休暇をプランニングする際に幅広い選択肢を提供することに

よって、顧客に手間をかけさせないことを狙っている。モノリシックアプリケーションで構成
された旅行プラットフォームを提供する企業は、顧客への独自のエクスペリエンス提供を課
題と考えている。これには、増加する一途の旅行業者から単一インターフェース経由で取得し

たデータの紐付けが関係する。顧客による旅行プラットフォーム使用は、時刻、地理、季節で

大幅に異なる。このため、需要に基づくスケーリングと、多様なインターフェース経由で接続
するユーザーに対し高可用性を提供できるテクノロジーが必要である。

エクスペディアグループは、旅行ブランド群で構成される。いずれのブランドも一体となって、

完璧な短期休暇旅行を求める顧客に独自の体験をもたらそうと努力している。全般的には、

エクスペディアグループのブランドは旅行のリサーチ、プランニング、予約の各側面を事実上

網羅しており、最適な飛行機座席の選択から、個人が投稿したホテルのレビューの閲覧、目
的地でのアクティビティのプランニングも可能である。エクスペディアグループのポートフォリ
オは、中程度のグレードからラグジュアリーに至るまで、好みや予算が多岐に渡るレジャー旅

行者とビジネス出張者の両方に対応する。数百万を超える物件、500社以上のエアライン、多

数のクルーズラインを含め、旅行業者と接続する旅行プラットフォームの更新や強化を実施

するためには、迅速な機能テストを実施し、相互に依存せずに機能をリリースできる最新アー
キテクチャが必要である。

COPYRIGHT IDC © 2020 | PAGE 12

IDCは、エクスペディアグループ傘下のバーボの著名エンジニアであるKuldeep Chowhan氏と

面談した。同氏は、モノリシックアプリケーションから出発し、リファクタリングを通じて最新
アーキテクチャに至ったバーボのジャーニーのなかでのベストプラクティスの一部を説明した。

共通性／再利用：エクスペディアグループは、多数の国で使用される旅行予約ウェブサイ

トを多数運用している。この規模での運用を可能にするために、共通のアプリケーショ
ンコンポーネントを採用、パッケージ化し、70か国以上で展開される200以上の旅行予

約ウェブサイト向けアプリケーションで再利用している。このアプローチは、4,000以上

のマイクロサービスを運用するために採用された。これらの共通コンポーネントが、組織
全体の効率性、単純性、規模の形でビジネス価値を創出するためである。これらの共通
コンポーネントの一部でデータ準備を支援するために、AWS Lambdaも活用中である。

このテクノロジーの価値を高める要素は特定されているため、エクスペディアグループの
エンジニアリングカルチャーは、あらゆるビジネスチームとテクノロジーチームで活用を
最大化できるスケーラブルな共通パターンで整合性を確保するべく、迅速に行動に乗り
出した。エクスペディアグループのシステムアーキテクチャは分散型であるため、チームは

組織として反復し進化できる。これが、成長し続けるビジネスを混乱させずに、エクスペ

ディアグループのテクノロジーの継続的進化を可能にしている。エクスペディアグループの
俊敏で卓越したエンジニアリングカルチャーによって、素晴らしいバランスが実現してい

る。それでもなお、同グループは謙虚である。同社は、いずれにも習熟していないとしつ
つも、自社の卓越したエンジニアリングカルチャーが自社の進化を保証していることを
認めている。

迅速なデプロイメント：アプリケーションをリファクタリングして最新アーキテクチャを

使用することに関するベネフィットの一つは、動作に高い確信を持ちつつ、本番環境に
機能変更をデプロイするまでの時間を短縮できる点である。この作業の鍵は、アプリケー

ションのライフサイクルの継続的インテグレーション／継続的デプロイメントのパイプ
ラインを自動化することである。エクスペディアグループでは、A/Bテストフレームワーク
を使用して、一部の顧客に対して機能のロールアウトとテストを実施している。このアプ
ローチで、デベロッパーはグローバルリリースする前に新規機能を実験し、顧客のニーズ

に合った機能のみをロールアウトできる。また、モノリシックアプリケーション使用時代
には、変更に数週間から数か月かかったが、現在、変更は数分でデプロイされるため、

ビジネスユーザーからの機能リクエストのバックログも削減される。最新のリリースパイ
プラインがあるため、エクスペディアグループは、機能のオンオフ後1時間程度でこれらの

機能をアプリケーションにグローバル展開できることを利用して、高い俊敏性を確保して
いる。

COPYRIGHT IDC © 2020 | PAGE 13

デプロイメントのリスク軽減は、新規機能を組み入れたページにルーティングされるト
ラフィックをわずか5％に抑え、新規コードがユーザーに悪影響を与えずに正しく動作す
るようにする。成功検証後の次のステップは、ルーティングを5％から5段階で最終的に
100％にすることである。新規機能に対する信頼が高まると、トラフィックは、5％のユー

ザーでのテストから一気に100％へと増加し、成熟度が急速にデプロイメントペースを加
速させることを示している。

D ev O p s：エクスペディアグループにおける中核的なエンジニアリング原 則の一つ

は、アプリケーションの観点から「構築者が保有する」ことである。以前は、デプロ

イメント機能は特定の個人に限定するという慣行だったが、現在は、アプリケーショ
ンチーム自体の責任である。エンジニアリングチームがあらゆるツールを構築するた

め、デベロッパーはアプリケーションを開発して、ロギングメトリクスや分散型トレー

スといったあらゆるモニタリングソリューションと共にデプロイできる。DevOpsの

慣行は開発チームに対するアプリケーション管理ツールの提供によって、ソースコー

ドからデ プ ロイメントに 至るライフサイクルでの摩 擦 を 解 消する。エクスペディ
アグループは、コンテナ、マイクロサービス、サーバーレスプラットフォームを使 用

するために、現在のアプリケーションをリファクタリングしている。全 般的に、IDC

では、このリファクタリングステップで市場投 入までの時間短 縮においてエクスペ

ディアグループが大きく優 位に立てると考えている。エクスペディアグループは、新
規アプリケーションや新規機能のリリース時間を短縮した。リリースは、モノリシッ
クアプリケーションでは数か月かかっていたが、モダンアプリケーションプラット

フォームでは1日に複数回の実施が可能である。アプリケーションアーキテクチャのモダ

ナイゼーションやDevOps慣行に対する投資で、顧客に出荷される機能は桁違いに増加
した（たとえば、バーボブランドのリリース速度は、過去3年間で12倍になった）。新規機

能での実験がしやすくなったため、エクスペディアグループは顧客に対する新規機能デリ
バリーのリスクを軽減でき、再利用によって、組織内での機能開発を時間短縮できる。

COPYRIGHT IDC © 2020 | PAGE 14

アマゾンウェブサービスを活用した
アプリケーションモダナイゼーション

アプリケーション設計を市場競争の中核を担う要素と捉えるビジネスは増加している。この

ため、アプリケーションモダナイゼーションの判断は、究極的には、ビジネス問題を解決する
必要性から生ずる。企業は、快適な製品の構築とより迅速なデリバリーによって新規顧客を

獲得したいと考えている。アプリケーションモダナイゼーションは、この成果を達成する方法
である。

AWSのポートフォリオは、組織がモダンアプリケーションの構築やレガシーアプリケーション

のモダナイゼーションを実現できるように、特別設計されている。AWSは深い専門知識を有
し、サーバーレステクノロジー、コンテナ、特定用途向けに作られたさまざまなデータベース、
デベロッパーツール、機械学習など、モダンアプリケーションの構築と運用に必要なサービス

すべてを提供している。これこそが、最速で成長するスタートアップ、最大手企業、主な政府機
関を含め、無数の顧客がAWSを信頼して、自身のインフラストラクチャを使用し、俊敏性を高
め、コストを削減している理由である。

AWSのサービス／製品の多くは、サーバーレスツールで管理されている。こうしたサーバーレ

スツールは、組織内におけるデベロッパーや運用者の役割を変化させている。たとえば、AWS

Lambdaを活用する場合、企業はビジネスのロジックコードを作成するだけでよく、プロビジョ
ニング、スケーリング、パッチ適用はすべてAWSで処理される。マネージドサービスの使用が
拡大すると同時に、リリースパイプラインなどにも自動化が普及した結果、オペレーション
チームは、ビジネスでより戦略性の高い役割を果たせ、デベロッパーはデプロイメントを念頭
に設計を行える。こうした変化の結果、一つの製品に関して統合的、自律的かつ部門横断的

な小規模チームが形成されている。最新のチームとカルチャーの醸成は、モダンアプリケー
ションの成果収穫において、テクノロジー自体と同様の重要性を有する。

COPYRIGHT IDC © 2020 | PAGE 15

将来の展望
従来型のビジネスが、技術的負債のないテクノロジー活用
を中核的強みとする有能なスタートアップに混乱させられる

ケースは増えている。こうした時代にあって、デジタルトランス

フォーメーションが企業の取り組みの最優先事項になり、
環境に対する不可欠なニーズになっている。クラウドプロバイ

ダーは、さまざまなクラウドネイティブサービスを提供してい

る。これらのサービスは、インフラストラクチャの効率性改善

とアプリケーション開発の加速によって、企業のデジタルトラ
ンスフォーメーションジャーニーを支援する。レガシーアプリ

ケーションのサポートコストは、従業員の高齢化に伴い増大
しているため、クラウドネイティブアーキテクチャの活用によ
るアプリケーションモダナイゼーションの取り組みが、企業に
とって緊急に必要なものになってきている。

モダンアプリケーションの開発デリバリープラットフォームは、
モノリシックアプリケーションをコンポーネント化できる。

つまり、マイクロサービスにリファクタリングできる。サーバー
レスオペレーションモデルは、これらのリソース管理の複雑

性を軽減する。企業は、デベロッパーツールセットをクラウド

プロバイダーから入手し、コード変更から本番環境への移行

時にこれらのリソースを安全に管理できるようにしなければ
ならない。

COPYRIGHT IDC © 2020 | PAGE 16

課題と機会
企業は、ビジネスの需要と既存テクノロジーを整合させる課題を理解しているものの、日常オペレーションで新規のク

ラウドテクノロジーのパラダイムを採用する際には、カルチャーの課題は情報テクノロジー部門にとって巨大なハード

ルである。DevOpsは、アプリケーションの開発デリバリーライフサイクルを自動化し、加速できるが、デベロッパーの
提出物を手作業で確認することに慣れた従業員は、ソフトウェアリリースプロセスの自動化に抵抗する。AWSは、自
動化でソフトウェア構築とデリバリーを変革した社内での経験をもとに構築されたさまざまなサービスを有している。
だが、企業にスキルを移転して、クラウドテクノロジー採用のジャーニー開始や勢いの維持を支援する必要性はある。

顧客は、専門的なクラウドスキルを有するAWSパートナーで構成されるより大規模なエコシステムからベネフィットを
得られると思われる。

結論
新規のビジネス機会には、最新テクノロジープラットフォームの成功が不可欠である。最新のテクノロジープラット

フォームは、カルチャーの変化だけでなく、最新開発ツールを利用する新たなスキルを必要とする。既存アプリケー
ションのリファクタリングは、企業のクラウド採用ジャーニー継 続に欠かせないステップである。IDCの予測で
は、2023年までに、情報通信テクノロジー（ICT）の支出の50％以上が、デジタルトランスフォーメーションやイノベー
ションに直接割り当てられる。本ホワイトペーパーでインタビューしたエクスペディアグループと同様のデジタルトラン

スフォーメーションの目標を達成するためには、企業は、アプリケーション機能の開発とデリバリーに俊敏な体制を
採用し、最新のソフトウェアデリバリーの方法とツールの採用によってビジネスのニーズを充足しなければならない。

COPYRIGHT IDC © 2020 | PAGE 17

IDC社 概要

IDC Research, Inc.

International Data Corporation（IDC）は、ITおよび通信分野

5 Speen Street

するグローバル企業です。50年にわたり、IDCは、世界中の企業

USA

略策定などの意思決定を行う上で不可欠な、客観的な情報

Twitter: @IDC

を対象として、1,100人を超えるアナリストが、世界規模、地域

www.idc.com

に関する調査・分析、アドバイザリーサービス、イベントを提供

Framingham, MA 01701

経営者、IT専門家、機関投資家に、テクノロジー導入や経営戦

508.872.8200

やコンサルティングを提供してきました。現在、110か国以上

idc-community.com

別、国別での市場動向の調査・分析および市場予測を行って

います。IDCは世界をリードするテクノロジーメディア (出版)、
調査会社、イベントを擁するIDG（インターナショナル・デー
タ・グループ）の系列会社です。

Copyright Notice
External Publication of IDC Information and Data — Any
IDC information that is to be used in advertising, press
releases, or promotional materials requires prior written
approval from the appropriate IDC Vice President or Country
Manager. A draft of the proposed document should
accompany any such request. IDC reserves the right to deny
approval of external usage for any reason.
Copyright 2020 IDC. Reproduction without written
permission is completely forbidden

COPYRIGHT IDC © 2020 | PAGE 18

継続的な学習が
モダナイゼーションを
促進する
AWS トレーニングと認定の利用による
モダナイゼーションの推進

はじめに

モダナイゼーションの加速

継続的なモダナイゼーションの成果は、一夜にして得られるものではありま
せん。常に最先端であり続けるには、チームや個人が継続的にクラウドに
ついてのトレーニングを受けることが重要です。トレーニングで力をつけ
たチームは、クラウドスキルを磨いて、俊敏性、迅速なイノベーション、
応答時間の短縮を可能にできます。AWS トレーニングと認定を活用するこ
とで、迷うことなく継続的な学習を進めることができます。そして、クラ
ウドを効率的かつ効果的に利用し、モダナイゼーションを加速させ、ビジ
ネスの成長を促進することができます。

モダンアプリケーションとは

モダンアプリケーションは、ビジネスニーズの変化に対応するために利用
しても、多種多様な需要を満たすために利用しても、組織にとってビジネ
ス上の大きなアドバンテージとなります。モダンアプリケーションで次の
ようなことができます。
1. 市場投入までの時間短縮 ー 構築とリリースサイクルの速度を上げ、
運用を AWS に任せます

2. イノベーションの促進 ー リスクを抑えつつアプリケーション全体でア
プリケーションコンポーネントを素早く変更します

3. モニタリングと自動化されたテスト手順で信頼性を向上させます
4. 従量課金制モデルと保守費用の低減によって、総保有コスト (TCO) を
改善します

5. 組織やそれぞれ独自のワークロードのニーズに合わせた適切なツールで
構築を行います

2

はじめに

人材の不足

競争力をつけてクラウドの利点を活用するため、組織はモダンアプリケー
ションをより迅速に革新および構築する必要があります。しかし、多くの組
織はすぐに、重要な課題に気が付きます。それは、スキルを持った人材の不
足です。モダンアプリケーションを理解し構築できるデベロッパー、そのモ
ダンアプリケーションを設計し管理できる管理者やクラウドアーキテクト、
そのアプリケーションを使用してビジネスを改善できる上級リーダーが組織
には必要です。

約

80

% の IT 分野の意思決定者が、 必
要 な ス キ ル が チ ー ム に 欠 け てい
ると回答しています (9,500 人 の IT
プロフェッショナルを対象に
し た Global Knowledge のアンケー
1
トによる )。

必要とされているスキルを十分に身につけたスタッフを見つけて雇用するこ
とに加えて、企業は継続的なモダナイゼーションに必要である高度なクラウ
ドスキルを持った従業員を維持するという課題にも直面しています。9,500
人の IT プロフェッショナルを対象にした Global Knowledge のアンケートで
は、IT 分野の意思決定者の 80% がクラウドサービスを導入してデジタルの
才能を伸ばすために必要なスキルがチームに欠けていると回答しています。1
最近のデータによると、米国の組織の 63% が IT スキルのギャップは大きく
なると予想しており、59% がこの人材不足は今後 2 年間続くと予測してい
2
ます。
簡単に言うと、昨日まで使っていたクラウドについてのトレーニング計画が

今日のモダナイゼーションのニーズには合わなくなるということです。能力
の高いクラウド人材をモダナイゼーションの加速に合わせて使えるようにす
るには、スタッフの雇用、トレーニング、維持について再考する必要があり
ます。継続的な学習を組織文化として定着させることで、トレーニングされ
た IT 人材を確保できます。継続的な学習なしでは、スキルギャップが存
在し続け、モダナイゼーションの目標を達成できません。
1「4 reasons to invest in entry-level cloud talent」
、CIO DIVE Online 2021 年

2「The Cloud Talent Drought Continues (and Is Even Larger than You Thought)」
、Forbes Magazine 2020 年

3

AWS トレーニングでモダナイゼーションを実現する方法

AWS トレーニングでモダ
ナイゼーションを実現する

モダナイゼーションの成功事例の背景にはそれぞれ、俊敏性の高い最先端
のチームがいます。モダナイゼーションの加速についていける組織は、状
況が日々変わり続けていることを知っています。モダナイゼーションを実
現し、進化し、後れを取らないために、組織は継続的な学習の文化を築く
必要があります。事実、成功している組織には、共通点が少なくとも 1 つ
あります。これらの組織では、デジタルトランスフォーメーションにおい
て後れを取っている組織と比較すると、IT スタッフの技術教育とトレーニ
3
ングに対する投資が 3 倍に上ります。
AWS トレーニングと認定は、
チームが
モダナイゼーションを進めるうえで必要な主要スキルを身につけ、組織が
目標に対応できるように、継続的な学習を提供します。
AWS では、スタッフにクラウドについてのトレーニングと能力開発を行う
にあたって、次のガイドラインを推奨しています。
1. あらゆる人材を開発するためにトレーニングに投資する

2. さまざまな技術的能力を持ったチーム間でクラウド対応力を築き、組織
の優先事項に応じて新しい運用モデルを作成する

3. 数少ない経験豊かなプロフェッショナル人材を追い求め奪い合うより
も、継続的な学習の文化を築き、現在のチームを惹き付けて維持する

「デジタルトランスフォーメーションに成功
した組織は、技術は買えるが従業員はトレー
ニングしなければならないことを理解して
います。『デジタル DNA』は教育から生ま
れるのです。ツールそのものが人の発想や
行動の変え方を教えてくれるわけではあり
ません」3
Inc.Digital、CEO および「The Digital Helix」共著者、
Michael Gale 氏

3 Inc.Digital、CEO および「The Digital Helix: Transforming Your Organization� s DNA to Thrive in the Digital
Age」共著者、Michael Gale 氏 2019 年 8 月 18 日のインタビューより

4

開始方法

モダナイゼーションの目標に合わせたスキルを構築する
チームに合わせたトレーニングを選択する

関連性の高いコースやクラスにアクセスする

まったく同じ組織はひとつとしてありません。まったく同じトレーニン
グ計画もひとつとしてありません。組織独自のトレーニング目標に合
わせたトレーニング計画を作るために、AWS Learning Needs Analysis
(LNA) (英語) を使用してそれぞれの組織に固有のインサイトを評価し引
き出すことができます。この無料のデータ駆動型評価ツールで、トレー
ニングに対する投資をビジネス目標に合わせることができます。組織全
体でモダナイゼーションの利点を実現するために、組織および個人のト
レーニング計画を策定することができます。

AWS の DevOps Ramp-Up Guides と Developer Ramp-Up Guides を活用
し、モダナイゼーションのスキルと知識の習得に向けてチームを導きま
しょう。ガイドは 2 つのセクションに分かれています。それぞれのセク
ションには、推奨順にリソースが並んでいます。無料デジタルトレーニ
ング、クラスルームコース、動画、ホワイトペーパー、認定が論理的な
順序で示され、従業員のモダナイゼーションの取り組みを支援します。

協力して AWS LNA からインサイトを導き出すことができます。組織のス
キルギャップが特定されれば、目的がはっきりしたコスト効率の高いト
レーニングと認定計画を立てて、モダナイゼーションに関する従業員の
ニーズを満たせるようになります。チームがモダナイゼーションの知識
を身につけ伸ばすための支援を行いましょう。AWS のエキスパートが作
成した多数のデジタルおよびバーチャルのインストラクター主導のコー
スは、
今も数が増え続けています。ぜひコースの一覧をご覧ください。

Developer Ramp-Up Guides を見る (英語) »

従業員にいくつかの質問に答えてもらうだけで、AWS のエキスパートと

規範的な学習の道筋には、コースの所要時間や、お客様やチームがモダ
ナイゼーションの目標に向けた適切なトレーニングの選択を行う手がか
りとなる追加リソースなど、有益な情報が含まれています。

DevOps Ramp-Up Guides を見る (英語) »

プライベートトレーニングについて問い合わせる (英語) »

5

開始方法

包括的なトレーニングでチームを支援する

AWS の包括的クラウドスキルイネーブルメントプログラムで、モダナイ
ゼーションの取り組みを進め、ビジネスの成長を加速できます。一連の
プログラムは、組織全体ですべての従業員が幅広くクラウドに対応し、
イノベーションを推進してモダンアプリケーション開発知識を身につけ
られるように設計されています。インストラクター主導のトレーニング
コースは、リモートまたは対面で提供され、対面の場合は公開コースか

お客様の拠点で開催されます。それぞれの利点を考慮して、クラスルー

ムトレーニングとオンデマンドデジタルトレーニングのどちらがチームに

合っているか判断してください。

クラスルームトレーニングを利用したハンズオンの学習体験

AWS のクラスルームトレーニングは、エキスパートレベルの指導で継続
的なモダナイゼーションを促進します。プレゼンテーション、ディス
カッション、ハンズオンラボがひとつになって、学習者がリモートまた
は教室でクラスルーム学習を行うことができます。エキスパートの AWS

認定インストラクターが実践的で詳細な技術知識を提供し、またその場で
学習者の理解を支援し、学習者が学習を続けられるようにします。技術的
なモダナイゼーションスキルをさらに磨きたい従業員は、複雑なトピック
に関するインサイトを備えたインストラクターから、ガイダンスやサポー
トをリアルタイムで受けることができます。

クラスルームトレーニングコースを見る »

デジタルトレーニングで時や場所を問わずにスキルを伸ばす

従業員が好きなときに好きな方法でトレーニングを受けることもできま
す。AWS エキスパートが作成した、無料、セルフペース、デジタル、ラ
イブ、リモートの 500 を超えるコースをご利用いただけます。フレキ
シブルでオンデマンドのコースには、15 分のものから 8 時間を超えるも
のまであり、これらはスケジュールや時間の都合に合わせて受講できま
す。デジタルトレーニングなら場所の制約がなく、従業員が世界中のど
こにいてもトレーニングにアクセスできます。

デジタルトレーニングコースを見る »

6

継続的なトレーニングを進める

モダナイゼーションの
加速を実現するコース

コンピューティング環境でモダナイゼーションを実現する

モダナイゼーションを学び、モダナイゼーションを活用しましょう。モ
ダンコンピューティング環境なら、俊敏性の高いアプリケーションを作成
できます。既存のアプリケーションをコンテナベースのアーキテクチャ
やサーバーレスコンピューティング環境にリプラットフォームして、実
行中のアプリケーションのコンピューティング環境にマネージドモデルを
導入しましょう。
Running Containers on Amazon Elastic Kubernetes Service (Amazon
EKS) ( クラスルーム )

このコースでは、Amazon EKS を使用した Kubernetes のコンテナ管理
とオーケストレーションを学ぶことができます。AWS を利用すれば、
Kubernetes コントロールプレーンのインストール、運用、保守は不要
です。
このコースは中級者向けで所要時間は 3 日間です。

7

継続的なトレーニングを進める

モダンウェブ/モバイルアプリケーションを構築する

アプリケーションのスキルを継続的に向上し、モダナイゼーションを実現
しましょう。AWS Lambda などのサーバーレス技術を使用したモジュラー
アーキテクチャを活用してまったく新しいアプリケーションを構築し、市
場投入までの時間を短縮できます。ソフトウェアの配信を自動化し、API を
使用してアプリケーションをラッピングすると、モダンアプリケーション
開発に着手できます。より強い回復力、迅速なイテレーション、実験に
よって、リスクを軽減しましょう。
Advanced Developing on AWS ( クラスルーム )

このコースでは、従来のオンプレミスのモノリシックアプリケーションを
サーバーレスマイクロサービスアーキテクチャにリファクタリングする方
法を学ぶことができます。実際のシナリオを使用した高度な開発トピッ
クをご覧ください。このコースは上級者向けで所要時間は 3 日間です。
Architecting Serverless Solutions ( デジタル ) (日本語)

「サーバーレス思考」でサーバーレスアーキテクチャを設計しましょう。
AWS Lambda や Amazon API Gateway などの AWS のマネージドサービスを、
イベント駆動型パターンにおいて組み合わせ、スケーラブルで安全なサー
バーレスアプリケーションを強化する方法をご覧ください。このコースは
中級者向けで所要時間は 3 時間です。

モダン DevOps

モダン DevOps でモダナイゼーションスキルを継続的に学習しましょ
う。イノベーションの推進やセキュリティ、パフォーマンス、回復力の向
上のために、デベロッパーはソフトウェア開発にモダン DevOps の導入を
進めています。オペレーションとデベロッパーが緊密に連携して、コンプ
ライアンスや回復力といったタスクを共有します。
DevOps Engineering on AWS ( クラスルーム )

このコースでは、組織が AWS でアプリケーションやサービスをすばやく開
発、配信、保守するための能力を向上させることができます。DevOps の文
化的な理念や、ツールの組み合わせやプラクティスの使用方法を学ぶこと
ができます。このコースは中級者向けで所要時間は 3 日間です。
Getting Started with DevOps on AWS ( デジタル ) (英語)

ここから始まります。AWS の DevOps ツー
AWS での DevOps 実装の行程は、
ルを使用するための知識やスキルを身につけましょう。継続的インテグレー
ションおよび継続的デリバリー (CI/CD) パイプラインを作成し制御しましょ
う。このコースのレベルは基礎レベルで、所要時間は 3 時間です。

8

8

まとめ

モダナイゼーションに
終わりはない
(お客様の進化もまた終わ
りはない)

モダナイゼーションは、継続的な学習とエンパワーメントの文化によっ
て進化し続ける終わりのない旅です。チームのクラウドスキルを強化
し、組織をモダナイゼーションに向かわせましょう。AWS トレーニング
と認定パートナーシップがお客様を支援します。

まずは、ビジネス目標に合わせたトレーニングのための投資からです。
目的がはっきりしたトレーニングと認定の計画を作成して、既存の人材
を開発し、
必要な人材を採用して、
どちらの人材にも留まってもらいます。
モダナイゼーションスキルのギャップを埋めて、モダナイゼーションを実
現しましょう。

クラウドが当たり前になった今日の世界では、モダナイゼーションは止
まりません。モダナイゼーションのマインドセットを受け入れ、新しい
クラウドスキルを使用して学習、構築、イノベーションを続け、優れた
アプリケーションを構築できるように支援しましょう。AWS トレーニン
グと認定を利用すれば、それが可能です。

詳細はこちら (英語) »

お問い合わせ »

© 2021 Amazon Web Services, Inc. or its aﬃliates. All rights reserved.

9

